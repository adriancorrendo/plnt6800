{
  "hash": "eb10602330fa81b5f0a3f607d4e0ffd4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Fundamentals of R Packages\"\nauthor: \"Dr. Adrian Correndo\"\ndate: \"2025-01-15\"\nformat:\n  html:\n    toc: true\n    toc-depth: 4\n    toc-location: left\neditor: visual\n---\n\n\n\n# Introduction\n\n**i. What Are R Packages?**\n\nR packages are collections of functions, data, and documentation that extend the capabilities of R. They are designed to solve specific problems or add functionalities, such as data visualization, statistical modeling, or handling specific types of data.\n\nAnalogy: Think of R as a toolbox ðŸ§° and packages as individual tools ðŸ”§ you can add to enhance its utility.\n\n::: callout-important\nCore Components:\n\n-   Functions: Ready-made commands to perform tasks.\n\n-   Data: Preloaded datasets for analysis or examples.\n\n-   Documentation: Manuals explaining how to use the package.\n:::\n\n**ii. Why Are R Packages Important?**\n\n-   They extend functionality beyond base features.\n\n-   Enable efficient workflows by using pre-written and optimized code.\n\n-   Provide community-contributed solutions for a wide variety of domains (e.g., agriculture, bioinformatics, machine learning).\n\n**iii. Where to Find R Packages?**\n\n-   CRAN (Comprehensive R Archive Network): The primary repository for R packages. Well-maintained and includes thousands of packages.\n\n-   Bioconductor: Specialized in bioinformatics and genomics.\n\n-   GitHub: A platform where developers host and share experimental or in-development packages.\n\n------------------------------------------------------------------------\n\n\n\n\n\n\n\n# 01. Managing packages\n\n## a. Installing packages\n\nTo install a package from **CRAN**, use:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"dplyr\")\n```\n:::\n\n\n\nTo install a **development** version of a package from **GitHub**, use:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::install_github(\"rstudio/ggplot2\")\n```\n:::\n\n\n\nChecking installed packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstalled.packages()\n```\n:::\n\n\n\n## b. Loading Packages\n\nOnce installed, load a package using:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n:::\n\n\n\nOr alternatively, you may use packages like `pacman`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pacman)\npacman::p_load(dplyr, ggplot2)\n```\n:::\n\n\n\nOr `easypackages`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(easypackages)\neasypackages::libraries(dplyr, ggplot2)\n```\n:::\n\n\n\n## c. Updating packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nupdate.packages()\n```\n:::\n\n\n\n## d. Unload packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndetach(\"package:ggplot2\", unload = TRUE)\n```\n:::\n\n\n\n## e. Uninstall packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremove.packages(\"ggplot2\")\n```\n:::\n\n\n\n# 02. Documentation\n\nTo explore the functions within a package, access the help documentation:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhelp(package = \"dplyr\")\n\n# or using the interrogation sign to get help\n?dplyr\n```\n:::\n\n\n\nYou can also view detailed tutorials or examples using vignetes:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvignette(package = \"dplyr\")\nbrowseVignettes(package = \"dplyr\")\n```\n:::\n\n\n\n# 03. Best Packages Practices\n\n## a. Start with the Right Packages:\n\nUse foundational and well supported packages (e.g. [tidyverse](https://www.tidyverse.org), [data.table](https://cran.r-project.org/web/packages/data.table/index.html)).\n\n## b. Stay Curious:\n\nExplore new packages via CRAN Task Views (e.g., [Agriculture Task View](https://cran.r-project.org/web/views/Agriculture.html)).\n\n## c. Version Control:\n\nWhen becoming an advanced user, you could implement [renv](https://cran.r-project.org/web/packages/renv/index.html) or [packrat](https://rstudio.github.io/packrat/) to manage package versions for reproducible analysis.\n\n# 04. Examples\n\nLet's explore some practical applications of a few packages\n\n## a. ggplot2 for data visualization:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nggplot(mtcars, aes(x = mpg, y = hp)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](02_fundamentals_rpackages_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n## b. dplyr for data manipulation:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nmtcars %>% filter(mpg > 20) %>% summarize(mean_hp = mean(hp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  mean_hp\n1    88.5\n```\n\n\n:::\n:::\n\n\n\n## c. agridat\n\nThe agridat package contains datasets related to agriculture, such as crop yields, experimental designs, and climate data. Letâ€™s use an example from this package:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the package\nlibrary(agridat)\n# Load an example dataset\ndata(rothamsted.oats, package = 'agridat')\nhead(rothamsted.oats)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  block trt  grain straw row col\n1     x  oa 61.375  83.0  12   1\n2     x 2me 68.750 130.0  12   2\n3     x 2sl 64.250 100.0  12   3\n4     x  ob 65.500  96.0  12   4\n5     w 2sl 79.625 130.5  12   5\n6     w  oa 79.250 122.0  12   6\n```\n\n\n:::\n\n```{.r .cell-code}\n# Visualize crop yields\nlibrary(ggplot2)\nggplot(rothamsted.oats, aes(x = trt, y = grain, fill = as.factor(block))) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(\n    title = \"Grain Yields in Rothamsted Oats Experiment\",\n    x = \"Treatment\",\n    y = \"Grain Yield (grams/plot)\",\n    fill = \"Block\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](02_fundamentals_rpackages_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n## d. agricolae\n\nThe agricolae package in R is a comprehensive toolset designed for statistical analysis and visualization of agricultural experiments. It is particularly useful for researchers and practitioners working in crop science, agronomy, and other fields of agricultural research.\n\nIt provides methods for designing experiments, analyzing experimental data, and visualizing results, particularly for data collected in agricultural and biological research.\n\n::: callout-note\nIt supports:\n\n-   **Experimental Designs**: Generate designs for field experiments like randomized complete block design (RCBD), Latin square, factorial experiments, and others.\n\n-   **Statistical Analysis**: Analyze variance (ANOVA), perform post-hoc tests (e.g., LSD, Tukey HSD), and assess experimental data.\n\n-   **Visualization**: Create plots for results, including mean comparisons, dendrograms, and histograms.\n\n-   **Agronomic Tools**: Calculate indices like stability for crop yields or pest/disease control measures.\n:::\n\n### i. Data analysis\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load agricolae package\nlibrary(agricolae)\n\n# Simulate agricultural data\ndata <- data.frame(\n  treatment = rep(c(\"A\", \"B\", \"C\"), each = 5),\n  yield = c(50, 55, 52, 51, 54,   # Yields for Treatment A\n            60, 62, 59, 61, 63,   # Yields for Treatment B\n            48, 46, 50, 49, 47)   # Yields for Treatment C\n)\n\n# Display the dataset\nprint(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   treatment yield\n1          A    50\n2          A    55\n3          A    52\n4          A    51\n5          A    54\n6          B    60\n7          B    62\n8          B    59\n9          B    61\n10         B    63\n11         C    48\n12         C    46\n13         C    50\n14         C    49\n15         C    47\n```\n\n\n:::\n\n```{.r .cell-code}\n# Perform ANOVA\nanova_result <- aov(yield ~ treatment, data = data)\nsummary(anova_result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            Df Sum Sq Mean Sq F value   Pr(>F)    \ntreatment    2  437.2   218.6   70.52 2.32e-07 ***\nResiduals   12   37.2     3.1                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n\n```{.r .cell-code}\n# Perform LSD test for pairwise comparison\nlsd_result <- LSD.test(anova_result, \"treatment\", console = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nStudy: anova_result ~ \"treatment\"\n\nLSD t Test for yield \n\nMean Square Error:  3.1 \n\ntreatment,  means and individual ( 95 %) CI\n\n  yield      std r        se     LCL     UCL Min Max Q25 Q50 Q75\nA  52.4 2.073644 5 0.7874008 50.6844 54.1156  50  55  51  52  54\nB  61.0 1.581139 5 0.7874008 59.2844 62.7156  59  63  60  61  62\nC  48.0 1.581139 5 0.7874008 46.2844 49.7156  46  50  47  48  49\n\nAlpha: 0.05 ; DF Error: 12\nCritical Value of t: 2.178813 \n\nleast Significant Difference: 2.426223 \n\nTreatments with the same letter are not significantly different.\n\n  yield groups\nB  61.0      a\nA  52.4      b\nC  48.0      c\n```\n\n\n:::\n\n```{.r .cell-code}\n# Could also run Tukey HSD, & Duncan's Test\n\n# Plot LSD results\nplot(lsd_result, main = \"LSD Test Results for Treatment Yields\")\n```\n\n::: {.cell-output-display}\n![](02_fundamentals_rpackages_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n### ii. Design of experiments\n\nYou can generate layouts for randomized complete block designs (RCBD), Latin squares, Graeco-Latin squares, factorial experiments, and split-plot designs\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndesign <- design.rcbd(trt = c(\"A\", \"B\", \"C\"), r = 3)\nprint(design)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$parameters\n$parameters$design\n[1] \"rcbd\"\n\n$parameters$trt\n[1] \"A\" \"B\" \"C\"\n\n$parameters$r\n[1] 3\n\n$parameters$serie\n[1] 2\n\n$parameters$seed\n[1] 2000902035\n\n$parameters$kinds\n[1] \"Super-Duper\"\n\n$parameters[[7]]\n[1] TRUE\n\n\n$sketch\n     [,1] [,2] [,3]\n[1,] \"A\"  \"B\"  \"C\" \n[2,] \"A\"  \"C\"  \"B\" \n[3,] \"C\"  \"A\"  \"B\" \n\n$book\n  plots block c(\"A\", \"B\", \"C\")\n1   101     1                A\n2   102     1                B\n3   103     1                C\n4   201     2                A\n5   202     2                C\n6   203     2                B\n7   301     3                C\n8   302     3                A\n9   303     3                B\n```\n\n\n:::\n:::\n\n\n\n## e. soiltestcorr\n\nThis package assists users on reproducible regression analysis of relationships between crop relative yield (ry) and soil test values (stv) under different approaches.\n\nFor example, we can fit a linear-plateu model the a dataset with:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(soiltestcorr)\n\ndata_freitas <- soiltestcorr::freitas1966\n\nplot_lp <- linear_plateau(data = data_freitas,\n                          stv = STK, ry = RY, plot = TRUE)\n\nplot_lp\n```\n\n::: {.cell-output-display}\n![](02_fundamentals_rpackages_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "02_fundamentals_rpackages_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}