{
  "hash": "d182cffb7eeae7fa1e0d293a4a43a581",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Transforming Agricultural Data with dplyr\"\nauthor: \"Dr. Adrian Correndo\"\ndate: \"2025-01-22\"\nformat: html\neditor: visual\n---\n\n\n\n# Introduction\n\nThe `dplyr` package in R provides powerful tools for transforming and analyzing data. In this tutorial, we'll use an agricultural dataset to explore some common `dplyr` functions like `filter()`, `mutate()`, `summarize()`, and `group_by()`.\n\nWe'll use the `agridat` package for our dataset. If you don't have it installed, you can do so by running:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"agridat\")\n```\n:::\n\n\n\n# Example Dataset: Corn Yields\n\nFor this tutorial, we'll use the `lasrosas.corn` dataset, which contains information on corn varieties, yields, and topographical features. First, let's load the required packages and inspect the dataset:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(agridat)\n\n# Load dataset\ndata(\"lasrosas.corn\")\ncorn_data <- lasrosas.corn\n\n# Inspect the dataset\nglimpse(corn_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 3,443\nColumns: 9\n$ year  <int> 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999…\n$ lat   <dbl> -33.05113, -33.05115, -33.05116, -33.05117, -33.05118, -33.05120…\n$ long  <dbl> -63.84886, -63.84879, -63.84872, -63.84865, -63.84858, -63.84851…\n$ yield <dbl> 72.14, 73.79, 77.25, 76.35, 75.55, 70.24, 76.17, 69.17, 69.77, 6…\n$ nitro <dbl> 131.5, 131.5, 131.5, 131.5, 131.5, 131.5, 131.5, 131.5, 131.5, 1…\n$ topo  <fct> W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W…\n$ bv    <dbl> 162.60, 170.49, 168.39, 176.68, 171.46, 170.56, 172.94, 171.86, …\n$ rep   <fct> R1, R1, R1, R1, R1, R1, R1, R1, R1, R1, R1, R1, R1, R1, R1, R1, …\n$ nf    <fct> N5, N5, N5, N5, N5, N5, N5, N5, N5, N5, N5, N5, N5, N5, N5, N5, …\n```\n\n\n:::\n:::\n\n\n\nThe `glimpse()` function provides an overview of the dataset, including variable names and data types.\n\n# Filtering Data\n\nTo focus on specific data, we can use `filter()`. For example, let's filter the data to include only rows where the nitrogen applied (`nitro`) is greater than 100:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter rows with nitro > 100\nhigh_nitro <- corn_data %>% filter(nitro > 100)\nhead(high_nitro)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  year       lat      long yield nitro topo     bv rep nf\n1 1999 -33.05113 -63.84886 72.14 131.5    W 162.60  R1 N5\n2 1999 -33.05115 -63.84879 73.79 131.5    W 170.49  R1 N5\n3 1999 -33.05116 -63.84872 77.25 131.5    W 168.39  R1 N5\n4 1999 -33.05117 -63.84865 76.35 131.5    W 176.68  R1 N5\n5 1999 -33.05118 -63.84858 75.55 131.5    W 171.46  R1 N5\n6 1999 -33.05120 -63.84851 70.24 131.5    W 170.56  R1 N5\n```\n\n\n:::\n:::\n\n\n\nThis selects only rows where the `nitro` column has values greater than 100.\n\n# Adding New Variables with `mutate()`\n\nYou can add new columns to your dataset with `mutate()`. Let's calculate the yield in tons per hectare (assuming the current yield is in kilograms):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add a column for yield in tons\ncorn_data <- corn_data %>% mutate(yield_tons = yield / 1000)\nhead(corn_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  year       lat      long yield nitro topo     bv rep nf yield_tons\n1 1999 -33.05113 -63.84886 72.14 131.5    W 162.60  R1 N5    0.07214\n2 1999 -33.05115 -63.84879 73.79 131.5    W 170.49  R1 N5    0.07379\n3 1999 -33.05116 -63.84872 77.25 131.5    W 168.39  R1 N5    0.07725\n4 1999 -33.05117 -63.84865 76.35 131.5    W 176.68  R1 N5    0.07635\n5 1999 -33.05118 -63.84858 75.55 131.5    W 171.46  R1 N5    0.07555\n6 1999 -33.05120 -63.84851 70.24 131.5    W 170.56  R1 N5    0.07024\n```\n\n\n:::\n:::\n\n\n\nThis creates a new column, `yield_tons`, with the transformed yield values.\n\n# Summarizing Data\n\nTo get a quick overview of your data, you can use `summarize()` in combination with `group_by()`. For example, let's calculate the average yield for each topographical category (`topo`):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Average yield by topography\naverage_yield_topo <- corn_data %>%\n  group_by(topo) %>%\n  summarize(avg_yield = mean(yield, na.rm = TRUE))\naverage_yield_topo\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n  topo  avg_yield\n  <fct>     <dbl>\n1 E          78.7\n2 HT         48.6\n3 LO         84.9\n4 W          66.8\n```\n\n\n:::\n\n```{.r .cell-code}\n# Average yield by year and topography\naverage_yield_topoyear <- corn_data %>%\n  group_by(year, topo) %>%\n  summarize(avg_yield = mean(yield, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n```{.r .cell-code}\naverage_yield_topoyear\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 3\n# Groups:   year [2]\n   year topo  avg_yield\n  <int> <fct>     <dbl>\n1  1999 E          64.8\n2  1999 HT         53.4\n3  1999 LO         71.2\n4  1999 W          66.0\n5  2001 E          92.7\n6  2001 HT         44.7\n7  2001 LO         99.9\n8  2001 W          67.7\n```\n\n\n:::\n:::\n\n\n\nThis groups the data by `topo` and calculates the mean yield for each group.\n\n# Additional `dplyr` Functions\n\nHere are some other useful `dplyr` functions:\n\n1.  **`arrange()`**: Arrange rows by a variable in ascending or descending order.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # Arrange data by yield in descending order\n    arranged_data <- corn_data %>% arrange(desc(yield))\n    head(arranged_data)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n      year       lat      long  yield nitro topo     bv rep nf yield_tons\n    1 2001 -33.05086 -63.84317 117.90  99.8   LO 162.17  R3 N4    0.11790\n    2 2001 -33.05125 -63.84245 117.19 124.6   LO 165.81  R3 N5    0.11719\n    3 2001 -33.05181 -63.84323 116.64 124.6   LO 159.75  R1 N5    0.11664\n    4 2001 -33.05084 -63.84324 114.94  99.8   LO 166.27  R3 N4    0.11494\n    5 2001 -33.05134 -63.84299 114.46  99.8   LO 164.58  R2 N4    0.11446\n    6 2001 -33.05127 -63.84238 114.08 124.6   LO 170.94  R3 N5    0.11408\n    ```\n    \n    \n    :::\n    :::\n\n\n\n2.  **`select()`**: Select specific columns from the dataset.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # Select specific columns\n    selected_data <- corn_data %>% select(yield, nitro, topo)\n    head(selected_data)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n      yield nitro topo\n    1 72.14 131.5    W\n    2 73.79 131.5    W\n    3 77.25 131.5    W\n    4 76.35 131.5    W\n    5 75.55 131.5    W\n    6 70.24 131.5    W\n    ```\n    \n    \n    :::\n    :::\n\n\n\n3.  **`distinct()`**: Find unique values in a column.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # Unique values in topo\n    unique_topo <- corn_data %>% distinct(topo)\n    unique_topo\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n      topo\n    1    W\n    2   HT\n    3    E\n    4   LO\n    ```\n    \n    \n    :::\n    :::\n\n\n\n4.  **`count()`**: Count the number of observations in each group.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # Count observations by topo\n    topo_count <- corn_data %>% count(topo)\n    topo_count\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n      topo    n\n    1    E  730\n    2   HT  785\n    3   LO  885\n    4    W 1043\n    ```\n    \n    \n    :::\n    :::\n\n\n\n5.  **`rename()`**: Rename a column.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # Rename a column\n    renamed_data <- corn_data %>% rename(Nitrogen = nitro)\n    head(renamed_data)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n      year       lat      long yield Nitrogen topo     bv rep nf yield_tons\n    1 1999 -33.05113 -63.84886 72.14    131.5    W 162.60  R1 N5    0.07214\n    2 1999 -33.05115 -63.84879 73.79    131.5    W 170.49  R1 N5    0.07379\n    3 1999 -33.05116 -63.84872 77.25    131.5    W 168.39  R1 N5    0.07725\n    4 1999 -33.05117 -63.84865 76.35    131.5    W 176.68  R1 N5    0.07635\n    5 1999 -33.05118 -63.84858 75.55    131.5    W 171.46  R1 N5    0.07555\n    6 1999 -33.05120 -63.84851 70.24    131.5    W 170.56  R1 N5    0.07024\n    ```\n    \n    \n    :::\n    :::\n\n\n\n# Hands-On Exercise\n\nTry the following tasks using the `lasrosas.corn` dataset:\n\n1.  Filter the data to include only rows where the yield is greater than 6000.\n2.  Add a new column that calculates yield per kilogram of nitrogen applied.\n3.  Summarize the data to find the total yield for each `topo` category.\n4.  Arrange the data by `nitro` in ascending order.\n5.  Use `select()` to create a dataset with only the `yield`, `topo`, and `nitro` columns.\n\nSubmit your code and results to the class discussion forum. Happy coding!\n\n# Conclusion\n\nThe `dplyr` package simplifies data transformation and analysis tasks, making it easier to work with agricultural datasets like the one in this tutorial. Use these functions and try the hands-on exercise to deepen your understanding.\n\nHappy coding!\n",
    "supporting": [
      "03_datawrangling_01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}