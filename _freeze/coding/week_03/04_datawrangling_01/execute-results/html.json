{
  "hash": "0e3228393cc53d6851b3052fc21b6b67",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Transforming Ag data with dplyr\"\nauthor: \"Dr. Adrian Correndo\"\ndate: \"2025-01-22\"\ncategories: [dplyr, data wrangling, mutate, filter, select, arrange]\nformat:\n  html:\n    toc: true\n    toc-location: left\n    toc-depth: 4\n    number-sections: true\n    table-class: \"table table-striped table-hover\"\neditor: source\nsmooth-scroll: true\nbibliography: ../../references.bib\nlink-citations: TRUE\n---\n\n\n\n\n# Description\n\nThis lesson introduces the concept of tidy data, and a few basic data wrangling techniques using `dplyr` package. Today, we are using `dplyr` and datasets from the `agridat` package. If you don't have them installed, you can do so by running:\n\n## Required packages for today\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pacman)\np_load(agridat) # Agridat datasets\np_load(dplyr) # dplyr for data wrangling\np_load(skimr) # skimr for quick exploration of the data\n```\n:::\n\n\n\n\n\n\n# Why TIDY?\n\nWell, from the hand of [Tidyverse](https://www.tidyverse.org/), the \"tidy data\" framework changed the way we code and work in R for data science. Tidy datasets are easy to manipulate, model and visualize, and have a specific structure [@wickham2014]:\n\n-   Each variable is a column,\n\n-   Each observation is a row, and\n\n-   Each value have its own cell.\n\n![](images/tidy-1.png) **Tidy-data structure**. Following three rules makes a dataset tidy: variables are in columns, observations are in rows, and values are in cells. Source: [@Wickham2017R].\n\nExample of tidy data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example of tidy data\ntidy_data <- data.frame(\n  subject = c(1, 2, 3),\n  gender = c(\"M\", \"F\", \"F\"),\n  score = c(90, 95, 88)\n)\n\ntidy_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  subject gender score\n1       1      M    90\n2       2      F    95\n3       3      F    88\n```\n\n\n:::\n:::\n\n\n\n\n### Free HTML books\n\n::: {layout-ncol=\"2\"}\n[![](images/cover.png){height=\"300\"}](https://r4ds.had.co.nz/)\n\n[![](images/cover-01.png){height=\"300\"}](https://www.tmwr.org/)\n:::\n\n## What is a Data Frame?\n\nA data frame is a two-dimensional table-like structure in R, where columns can contain different types of data (e.g., numeric, character). It is the default structure for datasets loaded from CSV files or data packages.\n\n### open a data frame\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the wheat dataset from agricolae (which is a data frame)\nwheat_data <- agridat::payne.wheat\n\n# Check the structure of the data frame\nstr(wheat_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t480 obs. of  4 variables:\n $ rotation: Factor w/ 6 levels \"AB\",\"AF\",\"Lc3\",..: 1 1 1 1 2 2 2 2 5 5 ...\n $ nitro   : int  0 70 140 210 0 70 140 210 0 70 ...\n $ year    : int  1981 1981 1981 1981 1981 1981 1981 1981 1981 1981 ...\n $ yield   : num  3.84 6.59 7.49 7.39 3.06 6.32 7.61 7.78 5.82 7.52 ...\n```\n\n\n:::\n:::\n\n\n\n\n## What is a Tibble?\n\nA tibble is a modern version of a data frame, introduced by the tibble package. It offers several improvements:\n\n\t•\tTibbles don’t convert characters to factors by default.\n\t•\tPrinting is more concise and doesn’t overwhelm you with too much data.\n\t•\tTibbles are more explicit with column types when printed.\n\n### create a tibble\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert the wheat data frame to a tibble\nwheat_tibble <- as_tibble(wheat_data)\n\n# Check the structure of the tibble\nwheat_tibble\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 480 × 4\n   rotation nitro  year yield\n   <fct>    <int> <int> <dbl>\n 1 AB           0  1981  3.84\n 2 AB          70  1981  6.59\n 3 AB         140  1981  7.49\n 4 AB         210  1981  7.39\n 5 AF           0  1981  3.06\n 6 AF          70  1981  6.32\n 7 AF         140  1981  7.61\n 8 AF         210  1981  7.78\n 9 Ln3          0  1981  5.82\n10 Ln3         70  1981  7.52\n# ℹ 470 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## iii. Key Differences between Data Frames and Tibbles\n\n\t1.\t**Printing**:\n\t\n  •\tData Frames print the entire dataset unless you limit the number of rows. No information about column types is displayed.\n\t•\tTibbles print only the first 10 rows and automatically show column types.\n\t\n### Example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Print the entire data frame\nprint(wheat_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    rotation nitro year yield\n1         AB     0 1981  3.84\n2         AB    70 1981  6.59\n3         AB   140 1981  7.49\n4         AB   210 1981  7.39\n5         AF     0 1981  3.06\n6         AF    70 1981  6.32\n7         AF   140 1981  7.61\n8         AF   210 1981  7.78\n9        Ln3     0 1981  5.82\n10       Ln3    70 1981  7.52\n11       Ln3   140 1981  8.12\n12       Ln3   210 1981  7.40\n13       Ln8     0 1981  4.71\n14       Ln8    70 1981  6.52\n15       Ln8   140 1981  8.03\n16       Ln8   210 1981  7.83\n17       Lc3     0 1981  5.35\n18       Lc3    70 1981  6.70\n19       Lc3   140 1981  7.69\n20       Lc3   210 1981  7.53\n21       Lc8     0 1981  6.47\n22       Lc8    70 1981  7.84\n23       Lc8   140 1981  7.98\n24       Lc8   210 1981  7.68\n25        AB     0 1982  4.47\n26        AB    70 1982  6.38\n27        AB   140 1982  7.82\n28        AB   210 1982  8.13\n29        AF     0 1982  4.30\n30        AF    70 1982  6.82\n31        AF   140 1982  8.16\n32        AF   210 1982  8.52\n33       Ln3     0 1982  5.37\n34       Ln3    70 1982  7.91\n35       Ln3   140 1982  7.53\n36       Ln3   210 1982  8.46\n37       Ln8     0 1982  5.55\n38       Ln8    70 1982  8.04\n39       Ln8   140 1982  8.27\n40       Ln8   210 1982  7.31\n41       Lc3     0 1982  5.16\n42       Lc3    70 1982  7.81\n43       Lc3   140 1982  8.38\n44       Lc3   210 1982  7.40\n45       Lc8     0 1982  6.56\n46       Lc8    70 1982  8.36\n47       Lc8   140 1982  8.60\n48       Lc8   210 1982  8.41\n49        AB     0 1983  4.11\n50        AB    70 1983  6.28\n51        AB   140 1983  8.70\n52        AB   210 1983  8.17\n53        AF     0 1983  3.76\n54        AF    70 1983  6.79\n55        AF   140 1983  8.50\n56        AF   210 1983  9.43\n57       Ln3     0 1983  3.86\n58       Ln3    70 1983  7.05\n59       Ln3   140 1983  8.06\n60       Ln3   210 1983  8.28\n61       Ln8     0 1983  4.45\n62       Ln8    70 1983  7.23\n63       Ln8   140 1983  7.48\n64       Ln8   210 1983  6.93\n65       Lc3     0 1983  6.36\n66       Lc3    70 1983  9.67\n67       Lc3   140 1983  9.34\n68       Lc3   210 1983  8.40\n69       Lc8     0 1983  7.39\n70       Lc8    70 1983  9.64\n71       Lc8   140 1983  8.80\n72       Lc8   210 1983  8.66\n73        AB     0 1984  3.66\n74        AB    70 1984  6.56\n75        AB   140 1984  7.74\n76        AB   210 1984  9.41\n77        AF     0 1984  4.28\n78        AF    70 1984  8.94\n79        AF   140 1984  9.12\n80        AF   210 1984  9.35\n81       Ln3     0 1984  4.92\n82       Ln3    70 1984  7.66\n83       Ln3   140 1984  9.75\n84       Ln3   210 1984 10.35\n85       Ln8     0 1984  5.46\n86       Ln8    70 1984  8.68\n87       Ln8   140 1984  9.20\n88       Ln8   210 1984 10.33\n89       Lc3     0 1984  7.18\n90       Lc3    70 1984 11.06\n91       Lc3   140 1984 10.52\n92       Lc3   210 1984  9.88\n93       Lc8     0 1984  7.51\n94       Lc8    70 1984  9.66\n95       Lc8   140 1984 11.04\n96       Lc8   210 1984  9.36\n97        AB     0 1985  2.39\n98        AB    70 1985  5.90\n99        AB   140 1985  7.76\n100       AB   210 1985  8.62\n101       AF     0 1985  2.03\n102       AF    70 1985  5.46\n103       AF   140 1985  7.72\n104       AF   210 1985  9.20\n105      Ln3     0 1985  4.24\n106      Ln3    70 1985  7.26\n107      Ln3   140 1985  8.26\n108      Ln3   210 1985  9.69\n109      Ln8     0 1985  4.07\n110      Ln8    70 1985  6.98\n111      Ln8   140 1985  8.39\n112      Ln8   210 1985  8.55\n113      Lc3     0 1985  4.97\n114      Lc3    70 1985  7.64\n115      Lc3   140 1985  9.57\n116      Lc3   210 1985  8.84\n117      Lc8     0 1985  4.44\n118      Lc8    70 1985  8.08\n119      Lc8   140 1985  8.76\n120      Lc8   210 1985 10.19\n121       AB     0 1986  4.17\n122       AB    70 1986  6.91\n123       AB   140 1986  7.21\n124       AB   210 1986  8.53\n125       AF     0 1986  4.08\n126       AF    70 1986  5.08\n127       AF   140 1986  6.32\n128       AF   210 1986  7.88\n129      Ln3     0 1986  3.36\n130      Ln3    70 1986  5.65\n131      Ln3   140 1986  6.62\n132      Ln3   210 1986  6.05\n133      Ln8     0 1986  4.68\n134      Ln8    70 1986  6.55\n135      Ln8   140 1986  7.20\n136      Ln8   210 1986  6.84\n137      Lc3     0 1986  6.14\n138      Lc3    70 1986  7.15\n139      Lc3   140 1986  6.89\n140      Lc3   210 1986  6.20\n141      Lc8     0 1986  6.09\n142      Lc8    70 1986  7.31\n143      Lc8   140 1986  6.85\n144      Lc8   210 1986  6.75\n145       AB     0 1987  4.39\n146       AB    70 1987  6.18\n147       AB   140 1987  6.75\n148       AB   210 1987  7.84\n149       AF     0 1987  3.02\n150       AF    70 1987  5.56\n151       AF   140 1987  6.60\n152       AF   210 1987  6.43\n153      Ln3     0 1987  4.41\n154      Ln3    70 1987  6.55\n155      Ln3   140 1987  7.59\n156      Ln3   210 1987  7.13\n157      Ln8     0 1987  4.80\n158      Ln8    70 1987  6.74\n159      Ln8   140 1987  7.86\n160      Ln8   210 1987  7.00\n161      Lc3     0 1987  5.51\n162      Lc3    70 1987  7.24\n163      Lc3   140 1987  7.74\n164      Lc3   210 1987  7.61\n165      Lc8     0 1987  5.26\n166      Lc8    70 1987  7.48\n167      Lc8   140 1987  8.31\n168      Lc8   210 1987  8.13\n169       AB     0 1988  2.98\n170       AB    70 1988  6.28\n171       AB   140 1988  6.77\n172       AB   210 1988  6.20\n173       AF     0 1988  3.09\n174       AF    70 1988  6.60\n175       AF   140 1988  6.63\n176       AF   210 1988  6.61\n177      Ln3     0 1988  4.01\n178      Ln3    70 1988  6.77\n179      Ln3   140 1988  7.12\n180      Ln3   210 1988  6.14\n181      Ln8     0 1988  4.34\n182      Ln8    70 1988  6.73\n183      Ln8   140 1988  7.46\n184      Ln8   210 1988  7.23\n185      Lc3     0 1988  5.68\n186      Lc3    70 1988  7.39\n187      Lc3   140 1988  7.54\n188      Lc3   210 1988  7.51\n189      Lc8     0 1988  5.26\n190      Lc8    70 1988  7.87\n191      Lc8   140 1988  6.94\n192      Lc8   210 1988  7.06\n193       AB     0 1989  1.16\n194       AB    70 1989  3.94\n195       AB   140 1989  4.58\n196       AB   210 1989  4.74\n197       AF     0 1989  2.80\n198       AF    70 1989  4.92\n199       AF   140 1989  5.17\n200       AF   210 1989  5.82\n201      Ln3     0 1989  4.04\n202      Ln3    70 1989  5.94\n203      Ln3   140 1989  6.10\n204      Ln3   210 1989  6.04\n205      Ln8     0 1989  3.77\n206      Ln8    70 1989  5.58\n207      Ln8   140 1989  5.56\n208      Ln8   210 1989  4.91\n209      Lc3     0 1989  5.45\n210      Lc3    70 1989  6.28\n211      Lc3   140 1989  6.12\n212      Lc3   210 1989  5.81\n213      Lc8     0 1989  4.91\n214      Lc8    70 1989  6.69\n215      Lc8   140 1989  6.39\n216      Lc8   210 1989  5.06\n217       AB     0 1990  1.47\n218       AB    70 1990  4.94\n219       AB   140 1990  5.83\n220       AB   210 1990  6.33\n221       AF     0 1990  1.38\n222       AF    70 1990  5.72\n223       AF   140 1990  6.30\n224       AF   210 1990  5.18\n225      Ln3     0 1990  1.73\n226      Ln3    70 1990  4.94\n227      Ln3   140 1990  5.43\n228      Ln3   210 1990  6.17\n229      Ln8     0 1990  2.62\n230      Ln8    70 1990  5.79\n231      Ln8   140 1990  5.08\n232      Ln8   210 1990  5.25\n233      Lc3     0 1990  3.59\n234      Lc3    70 1990  6.06\n235      Lc3   140 1990  7.20\n236      Lc3   210 1990  6.42\n237      Lc8     0 1990  3.31\n238      Lc8    70 1990  6.51\n239      Lc8   140 1990  6.65\n240      Lc8   210 1990  6.99\n241       AB     0 1991  4.48\n242       AB    70 1991  8.56\n243       AB   140 1991  9.94\n244       AB   210 1991 10.23\n245       AF     0 1991  3.46\n246       AF    70 1991  8.00\n247       AF   140 1991  9.75\n248       AF   210 1991 10.57\n249      Ln3     0 1991  6.75\n250      Ln3    70 1991  8.85\n251      Ln3   140 1991  9.96\n252      Ln3   210 1991 10.41\n253      Ln8     0 1991  5.94\n254      Ln8    70 1991  8.83\n255      Ln8   140 1991  9.64\n256      Ln8   210 1991  9.75\n257      Lc3     0 1991  6.47\n258      Lc3    70 1991  9.37\n259      Lc3   140 1991 10.46\n260      Lc3   210 1991 10.48\n261      Lc8     0 1991  6.08\n262      Lc8    70 1991  8.81\n263      Lc8   140 1991  9.63\n264      Lc8   210 1991 10.10\n265       AB     0 1992  6.31\n266       AB    70 1992  7.84\n267       AB   140 1992  7.21\n268       AB   210 1992  6.81\n269       AF     0 1992  3.82\n270       AF    70 1992  8.05\n271       AF   140 1992  8.21\n272       AF   210 1992  7.59\n273      Ln3     0 1992  2.73\n274      Ln3    70 1992  6.47\n275      Ln3   140 1992  7.49\n276      Ln3   210 1992  7.26\n277      Ln8     0 1992  4.19\n278      Ln8    70 1992  7.17\n279      Ln8   140 1992  7.54\n280      Ln8   210 1992  6.67\n281      Lc3     0 1992  6.33\n282      Lc3    70 1992  7.48\n283      Lc3   140 1992  6.13\n284      Lc3   210 1992  4.79\n285      Lc8     0 1992  7.11\n286      Lc8    70 1992  6.65\n287      Lc8   140 1992  6.45\n288      Lc8   210 1992  6.14\n289       AB     0 1993  3.11\n290       AB    70 1993  5.92\n291       AB   140 1993  5.89\n292       AB   210 1993  6.63\n293       AF     0 1993  2.86\n294       AF    70 1993  5.79\n295       AF   140 1993  6.72\n296       AF   210 1993  7.37\n297      Ln3     0 1993  3.13\n298      Ln3    70 1993  5.40\n299      Ln3   140 1993  6.60\n300      Ln3   210 1993  6.52\n301      Ln8     0 1993  3.42\n302      Ln8    70 1993  5.16\n303      Ln8   140 1993  6.47\n304      Ln8   210 1993  6.55\n305      Lc3     0 1993  5.58\n306      Lc3    70 1993  7.01\n307      Lc3   140 1993  7.69\n308      Lc3   210 1993  7.91\n309      Lc8     0 1993  6.08\n310      Lc8    70 1993  7.03\n311      Lc8   140 1993  7.20\n312      Lc8   210 1993  7.69\n313       AB     0 1994  0.93\n314       AB    70 1994  3.94\n315       AB   140 1994  4.04\n316       AB   210 1994  3.51\n317       AF     0 1994  1.80\n318       AF    70 1994  5.32\n319       AF   140 1994  8.08\n320       AF   210 1994  8.55\n321      Ln3     0 1994  4.76\n322      Ln3    70 1994  6.16\n323      Ln3   140 1994  7.35\n324      Ln3   210 1994  7.14\n325      Ln8     0 1994  3.64\n326      Ln8    70 1994  5.14\n327      Ln8   140 1994  7.00\n328      Ln8   210 1994  7.16\n329      Lc3     0 1994  5.06\n330      Lc3    70 1994  6.00\n331      Lc3   140 1994  6.28\n332      Lc3   210 1994  7.50\n333      Lc8     0 1994  3.46\n334      Lc8    70 1994  6.48\n335      Lc8   140 1994  6.07\n336      Lc8   210 1994  7.53\n337       AB     0 1995  1.30\n338       AB    70 1995  4.21\n339       AB   140 1995  4.35\n340       AB   210 1995  4.35\n341       AF     0 1995  1.27\n342       AF    70 1995  3.82\n343       AF   140 1995  4.60\n344       AF   210 1995  4.96\n345      Ln3     0 1995  2.17\n346      Ln3    70 1995  5.01\n347      Ln3   140 1995  5.39\n348      Ln3   210 1995  5.79\n349      Ln8     0 1995  2.52\n350      Ln8    70 1995  5.71\n351      Ln8   140 1995  5.36\n352      Ln8   210 1995  6.53\n353      Lc3     0 1995  2.57\n354      Lc3    70 1995  5.70\n355      Lc3   140 1995  6.46\n356      Lc3   210 1995  5.78\n357      Lc8     0 1995  3.52\n358      Lc8    70 1995  6.60\n359      Lc8   140 1995  6.36\n360      Lc8   210 1995  6.14\n361       AB     0 1996  1.19\n362       AB    70 1996  7.24\n363       AB   140 1996  7.80\n364       AB   210 1996  8.43\n365       AF     0 1996  0.65\n366       AF    70 1996  6.60\n367       AF   140 1996  7.69\n368       AF   210 1996  7.79\n369      Ln3     0 1996  3.82\n370      Ln3    70 1996  7.19\n371      Ln3   140 1996  7.15\n372      Ln3   210 1996  8.41\n373      Ln8     0 1996  6.37\n374      Ln8    70 1996  8.23\n375      Ln8   140 1996  8.77\n376      Ln8   210 1996  8.46\n377      Lc3     0 1996  5.23\n378      Lc3    70 1996  7.76\n379      Lc3   140 1996  8.19\n380      Lc3   210 1996  8.67\n381      Lc8     0 1996  5.73\n382      Lc8    70 1996  7.97\n383      Lc8   140 1996  8.48\n384      Lc8   210 1996  8.28\n385       AB     0 1997  1.58\n386       AB    70 1997  5.73\n387       AB   140 1997  7.37\n388       AB   210 1997  7.88\n389       AF     0 1997  2.40\n390       AF    70 1997  6.52\n391       AF   140 1997  9.25\n392       AF   210 1997  9.24\n393      Ln3     0 1997  1.74\n394      Ln3    70 1997  3.83\n395      Ln3   140 1997  5.15\n396      Ln3   210 1997  5.02\n397      Ln8     0 1997  2.53\n398      Ln8    70 1997  6.20\n399      Ln8   140 1997  6.93\n400      Ln8   210 1997  7.25\n401      Lc3     0 1997  4.40\n402      Lc3    70 1997  7.70\n403      Lc3   140 1997  8.01\n404      Lc3   210 1997  8.30\n405      Lc8     0 1997  4.10\n406      Lc8    70 1997  6.78\n407      Lc8   140 1997  7.36\n408      Lc8   210 1997  7.43\n409       AB     0 1998  3.21\n410       AB    70 1998  6.70\n411       AB   140 1998  9.35\n412       AB   210 1998 10.26\n413       AF     0 1998  2.52\n414       AF    70 1998  6.35\n415       AF   140 1998  8.80\n416       AF   210 1998  9.72\n417      Ln3     0 1998  3.77\n418      Ln3    70 1998  7.13\n419      Ln3   140 1998  8.67\n420      Ln3   210 1998  9.62\n421      Ln8     0 1998  4.97\n422      Ln8    70 1998  7.77\n423      Ln8   140 1998  9.21\n424      Ln8   210 1998  9.24\n425      Lc3     0 1998  4.78\n426      Lc3    70 1998  7.48\n427      Lc3   140 1998  8.50\n428      Lc3   210 1998  8.75\n429      Lc8     0 1998  4.11\n430      Lc8    70 1998  7.55\n431      Lc8   140 1998  9.01\n432      Lc8   210 1998  8.98\n433       AB     0 1999  0.00\n434       AB    70 1999  1.97\n435       AB   140 1999  3.44\n436       AB   210 1999  2.28\n437       AF     0 1999  0.52\n438       AF    70 1999  6.55\n439       AF   140 1999  7.53\n440       AF   210 1999  8.48\n441      Ln3     0 1999  1.69\n442      Ln3    70 1999  6.58\n443      Ln3   140 1999  7.58\n444      Ln3   210 1999  7.83\n445      Ln8     0 1999  3.42\n446      Ln8    70 1999  6.59\n447      Ln8   140 1999  8.26\n448      Ln8   210 1999  6.51\n449      Lc3     0 1999  4.42\n450      Lc3    70 1999  7.27\n451      Lc3   140 1999  8.65\n452      Lc3   210 1999  9.54\n453      Lc8     0 1999  1.79\n454      Lc8    70 1999  4.65\n455      Lc8   140 1999  5.54\n456      Lc8   210 1999  4.95\n457       AB     0 2000  1.45\n458       AB    70 2000  4.54\n459       AB   140 2000  4.52\n460       AB   210 2000  5.53\n461       AF     0 2000  0.96\n462       AF    70 2000  4.87\n463       AF   140 2000  6.28\n464       AF   210 2000  7.39\n465      Ln3     0 2000  3.40\n466      Ln3    70 2000  7.06\n467      Ln3   140 2000  8.64\n468      Ln3   210 2000  8.71\n469      Ln8     0 2000  3.42\n470      Ln8    70 2000  6.58\n471      Ln8   140 2000  7.22\n472      Ln8   210 2000  7.49\n473      Lc3     0 2000  5.05\n474      Lc3    70 2000  8.24\n475      Lc3   140 2000  8.96\n476      Lc3   210 2000 10.33\n477      Lc8     0 2000  4.31\n478      Lc8    70 2000  7.47\n479      Lc8   140 2000  8.95\n480      Lc8   210 2000  9.65\n```\n\n\n:::\n\n```{.r .cell-code}\n# Print the tibble (shows only first 10 rows and column types)\nprint(wheat_tibble)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 480 × 4\n   rotation nitro  year yield\n   <fct>    <int> <int> <dbl>\n 1 AB           0  1981  3.84\n 2 AB          70  1981  6.59\n 3 AB         140  1981  7.49\n 4 AB         210  1981  7.39\n 5 AF           0  1981  3.06\n 6 AF          70  1981  6.32\n 7 AF         140  1981  7.61\n 8 AF         210  1981  7.78\n 9 Ln3          0  1981  5.82\n10 Ln3         70  1981  7.52\n# ℹ 470 more rows\n```\n\n\n:::\n:::\n\n\n\n\n# A package for data manipulation...🚀\n\n![](https://dplyr.tidyverse.org/logo.png){.absolute top=0 right=0 height=\"30%\"}\n\nThe `dplyr` package in R provides powerful tools for transforming and analyzing data. In this tutorial, we'll use an agricultural dataset to explore some common `dplyr` functions like `filter()`, `mutate()`, `summarize()`, and `group_by()`.\n\n## Why using R Packages? 💡\n\n- **Efficiency**: Avoid rewriting code for common tasks.\n- **Consistency**: Standardized code structure and naming conventions.\n- **Reproducibility**: Ensures that your work is easier to share and reproduce.\n- **Intuitive**: R packages use functions with intuitive names of functions, so you can spend less time learning the code & more time learning to solve practical problems. \n\n## Example 1: mutate()\n\n::: {.column width=\"65%\"}\nPackages like `dplyr` simplify tasks by providing clean, concise code for data manipulation. \n:::\n\n::: {.fragment}\n::: {.column width=\"65%\"}\n**1. Create a new column**: `total`, which is the sum of two existing columns (`var1` and `var2`).\n:::\n:::\n\n#### Base R version\n::: {.fragment}\n::: {.column width=\"80%\"}\n```r\n# Sample data\ndf <- data.frame(var1 = c(1, 2, 3), var2 = c(4, 5, 6))\n\n# Adding a new column using base R\ndf$total <- df$var1 + df$var2\n```\n:::\n:::\n\n::: {.fragment}\n#### dplyr package (Tidyverse)\n```r\nlibrary(dplyr)\n\n# Using mutate to add a new column\ndf <- df %>%\n  mutate(total = var1 + var2)\n\n```\n:::\n\n## Example 2: filter()\n\n::: {.fragment}\n**2. Filtering**: get values of `var1` greater than 2.\n:::\n\n::: {.fragment}\n\n\n#### Base R version\n::: {.column width=\"65%\"}\n```r\n# Filter rows using base R\nfiltered_df <- df[df$var1 > 2, ]\n```\n:::\n:::\n\n::: {.fragment}\n#### dplyr package (Tidyverse)\n```r\n# Filter rows using dplyr\nfiltered_df <- filter(data = df, var1 > 2)\n```\n:::\n\n## Example 3: select()\n\n::: {.fragment}\n**3. Select specific variables**: get `var1` and `var3`.\n:::\n\n<br/>\n\n::: {.fragment}\n#### Base R version\n```r\n# Select columns using base R\nselected_df <- df[ , c(\"var1\",\"var3\")]\n```\n:::\n\n::: {.fragment}\n\n<br/>\n\n#### dplyr package (Tidyverse)\n```r\n# Filter rows using dplyr\nfiltered_df <- select(data = df, var1, var3)\n```\n:::\n\n# Corn Dataset:\n\nFor this tutorial, we'll use the `lasrosas.corn` dataset from the 'agridat' package, which contains information on corn varieties, yields, and topographical features. First, let's load the required packages and inspect the dataset:\n## Read data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load dataset\ndata(\"lasrosas.corn\") # This creates an object with the name of the dataset \"lasrosas.corn\"\n\n# Store the data with another name\ncorn_data <- lasrosas.corn\n```\n:::\n\n\n\n\n## Inspect data\n### glimpse\nThe `glimpse()` function provides an overview of the dataset, including variable names and data types.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Inspect the dataset\nglimpse(corn_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 3,443\nColumns: 9\n$ year  <int> 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999…\n$ lat   <dbl> -33.05113, -33.05115, -33.05116, -33.05117, -33.05118, -33.05120…\n$ long  <dbl> -63.84886, -63.84879, -63.84872, -63.84865, -63.84858, -63.84851…\n$ yield <dbl> 72.14, 73.79, 77.25, 76.35, 75.55, 70.24, 76.17, 69.17, 69.77, 6…\n$ nitro <dbl> 131.5, 131.5, 131.5, 131.5, 131.5, 131.5, 131.5, 131.5, 131.5, 1…\n$ topo  <fct> W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W…\n$ bv    <dbl> 162.60, 170.49, 168.39, 176.68, 171.46, 170.56, 172.94, 171.86, …\n$ rep   <fct> R1, R1, R1, R1, R1, R1, R1, R1, R1, R1, R1, R1, R1, R1, R1, R1, …\n$ nf    <fct> N5, N5, N5, N5, N5, N5, N5, N5, N5, N5, N5, N5, N5, N5, N5, N5, …\n```\n\n\n:::\n:::\n\n\n\n### skim\nThe `skim()` function from the 'skimr' allows to take a deeper look to all the variables (columns), creating a quick summary that reports the presence of missing values, etc., etc.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nskimr::skim(corn_data)\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |          |\n|:------------------------|:---------|\n|Name                     |corn_data |\n|Number of rows           |3443      |\n|Number of columns        |9         |\n|_______________________  |          |\n|Column type frequency:   |          |\n|factor                   |3         |\n|numeric                  |6         |\n|________________________ |          |\n|Group variables          |None      |\n\n\n**Variable type: factor**\n\n|skim_variable | n_missing| complete_rate|ordered | n_unique|top_counts                         |\n|:-------------|---------:|-------------:|:-------|--------:|:----------------------------------|\n|topo          |         0|             1|FALSE   |        4|W: 1043, LO: 885, HT: 785, E: 730  |\n|rep           |         0|             1|FALSE   |        3|R3: 1149, R1: 1147, R2: 1147       |\n|nf            |         0|             1|FALSE   |        6|N1: 577, N3: 575, N5: 575, N0: 573 |\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|    mean|    sd|      p0|     p25|     p50|     p75|    p100|hist  |\n|:-------------|---------:|-------------:|-------:|-----:|-------:|-------:|-------:|-------:|-------:|:-----|\n|year          |         0|             1| 1999.99|  1.00| 1999.00| 1999.00| 1999.00| 2001.00| 2001.00|▇▁▁▁▇ |\n|lat           |         0|             1|  -33.05|  0.00|  -33.05|  -33.05|  -33.05|  -33.05|  -33.05|▃▇▆▃▁ |\n|long          |         0|             1|  -63.85|  0.00|  -63.85|  -63.85|  -63.85|  -63.84|  -63.84|▇▇▇▇▇ |\n|yield         |         0|             1|   69.83| 19.83|   12.66|   54.54|   66.63|   84.68|  117.90|▁▅▇▃▃ |\n|nitro         |         0|             1|   64.57| 42.60|    0.00|   29.00|   66.00|  106.00|  131.50|▅▇▇▂▇ |\n|bv            |         0|             1|  174.42|  9.68|   91.74|  168.48|  173.08|  179.39|  213.82|▁▁▁▇▁ |\n\n\n:::\n:::\n\n\n\n## Adding New Variables with `mutate()`\n\nYou can add new columns to your dataset with `mutate()`. Let's calculate the yield in tons per hectare (assuming the current yield is in kilograms):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add a column for yield in tons\ncorn_data <- corn_data %>% \n  # New column, `yield_tons`, with the transformed yield values.\n  mutate(yield_tons = yield / 1000)\n\nhead(corn_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  year       lat      long yield nitro topo     bv rep nf yield_tons\n1 1999 -33.05113 -63.84886 72.14 131.5    W 162.60  R1 N5    0.07214\n2 1999 -33.05115 -63.84879 73.79 131.5    W 170.49  R1 N5    0.07379\n3 1999 -33.05116 -63.84872 77.25 131.5    W 168.39  R1 N5    0.07725\n4 1999 -33.05117 -63.84865 76.35 131.5    W 176.68  R1 N5    0.07635\n5 1999 -33.05118 -63.84858 75.55 131.5    W 171.46  R1 N5    0.07555\n6 1999 -33.05120 -63.84851 70.24 131.5    W 170.56  R1 N5    0.07024\n```\n\n\n:::\n:::\n\n\n\n\n## Filtering Data\nTo focus on specific data, we can use `filter()`. For example, let's filter the data to include only rows where the nitrogen applied (`nitro`) is greater than 100:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter rows with nitro > 100\nhigh_nitro <- corn_data %>%\n  # only rows where the `nitro` column has values greater than 100.\n  filter(nitro > 100)\n\nhead(high_nitro)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  year       lat      long yield nitro topo     bv rep nf yield_tons\n1 1999 -33.05113 -63.84886 72.14 131.5    W 162.60  R1 N5    0.07214\n2 1999 -33.05115 -63.84879 73.79 131.5    W 170.49  R1 N5    0.07379\n3 1999 -33.05116 -63.84872 77.25 131.5    W 168.39  R1 N5    0.07725\n4 1999 -33.05117 -63.84865 76.35 131.5    W 176.68  R1 N5    0.07635\n5 1999 -33.05118 -63.84858 75.55 131.5    W 171.46  R1 N5    0.07555\n6 1999 -33.05120 -63.84851 70.24 131.5    W 170.56  R1 N5    0.07024\n```\n\n\n:::\n:::\n\n\n\n\n## Selecting columns\n\nTo select specific variables, we use `select()`, which selects specific columns from the dataset.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select specific columns\nselected_data <- corn_data %>% select(yield, nitro, topo)\nhead(selected_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  yield nitro topo\n1 72.14 131.5    W\n2 73.79 131.5    W\n3 77.25 131.5    W\n4 76.35 131.5    W\n5 75.55 131.5    W\n6 70.24 131.5    W\n```\n\n\n:::\n:::\n\n\n\n\n## Renaming columns\nWhen we need to change names of columns, we can use `rename()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Rename a column\nrenamed_data <- corn_data %>% rename(Nitrogen = nitro)\nhead(renamed_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  year       lat      long yield Nitrogen topo     bv rep nf yield_tons\n1 1999 -33.05113 -63.84886 72.14    131.5    W 162.60  R1 N5    0.07214\n2 1999 -33.05115 -63.84879 73.79    131.5    W 170.49  R1 N5    0.07379\n3 1999 -33.05116 -63.84872 77.25    131.5    W 168.39  R1 N5    0.07725\n4 1999 -33.05117 -63.84865 76.35    131.5    W 176.68  R1 N5    0.07635\n5 1999 -33.05118 -63.84858 75.55    131.5    W 171.46  R1 N5    0.07555\n6 1999 -33.05120 -63.84851 70.24    131.5    W 170.56  R1 N5    0.07024\n```\n\n\n:::\n:::\n\n\n\n\n## Arranging data\n\nTo reorder the data based on specific criteria, we can use `arrange()`, which will arrange rows by a variable in ascending or descending order.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Arrange data by yield in descending order\narranged_data <- corn_data %>% arrange(desc(yield))\nhead(arranged_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  year       lat      long  yield nitro topo     bv rep nf yield_tons\n1 2001 -33.05086 -63.84317 117.90  99.8   LO 162.17  R3 N4    0.11790\n2 2001 -33.05125 -63.84245 117.19 124.6   LO 165.81  R3 N5    0.11719\n3 2001 -33.05181 -63.84323 116.64 124.6   LO 159.75  R1 N5    0.11664\n4 2001 -33.05084 -63.84324 114.94  99.8   LO 166.27  R3 N4    0.11494\n5 2001 -33.05134 -63.84299 114.46  99.8   LO 164.58  R2 N4    0.11446\n6 2001 -33.05127 -63.84238 114.08 124.6   LO 170.94  R3 N5    0.11408\n```\n\n\n:::\n:::\n\n\n\n\n## Finding unique values\nTo find out what are the unique values of a variable, we can use `distinct()`, which will return the unique values within a column.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Unique values in topo\nunique_topo <- corn_data %>% distinct(topo)\nunique_topo\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  topo\n1    W\n2   HT\n3    E\n4   LO\n```\n\n\n:::\n:::\n\n\n\n\n## Counting\n\nThe function `count()` counts the number of observations within a group.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Count observations by topo\ntopo_count <- corn_data %>% count(topo)\ntopo_count\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  topo    n\n1    E  730\n2   HT  785\n3   LO  885\n4    W 1043\n```\n\n\n:::\n:::\n\n\n\n\n## Summarizing Data\n\nTo get a quick overview of your data, you can use `summarize()` in combination with `group_by()`. For example, let's calculate the average yield for each topographical category (`topo`):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Average yield by topography\naverage_yield_topo <- corn_data %>%\n  group_by(topo) %>%\n  summarize(avg_yield = mean(yield, na.rm = TRUE))\naverage_yield_topo\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n  topo  avg_yield\n  <fct>     <dbl>\n1 E          78.7\n2 HT         48.6\n3 LO         84.9\n4 W          66.8\n```\n\n\n:::\n\n```{.r .cell-code}\n# Average yield by year and topography\naverage_yield_topoyear <- corn_data %>%\n  group_by(year, topo) %>%\n  summarize(avg_yield = mean(yield, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n```{.r .cell-code}\naverage_yield_topoyear\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 3\n# Groups:   year [2]\n   year topo  avg_yield\n  <int> <fct>     <dbl>\n1  1999 E          64.8\n2  1999 HT         53.4\n3  1999 LO         71.2\n4  1999 W          66.0\n5  2001 E          92.7\n6  2001 HT         44.7\n7  2001 LO         99.9\n8  2001 W          67.7\n```\n\n\n:::\n:::\n\n\n\n\nThis groups the data by `topo` and calculates the mean yield for each group.\n\n\n\n\n\n# Hands-On Exercise\n\nTry the following tasks using the `lasrosas.corn` dataset:\n\n1.  Filter the data to include only rows where the yield is greater than 6000.\n2.  Add a new column that calculates yield per kilogram of nitrogen applied.\n3.  Summarize the data to find the total yield for each `topo` category.\n4.  Arrange the data by `nitro` in ascending order.\n5.  Use `select()` to create a dataset with only the `yield`, `topo`, and `nitro` columns.\n\nSubmit your code and results to the class discussion forum. Happy coding!\n\n# Conclusion\n\nThe `dplyr` package simplifies data transformation and analysis tasks, making it easier to work with agricultural datasets like the one in this tutorial. Use these functions and try the hands-on exercise to deepen your understanding.\n\nHappy coding!\n",
    "supporting": [
      "04_datawrangling_01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}