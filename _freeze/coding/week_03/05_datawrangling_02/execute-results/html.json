{
  "hash": "5b7e486d96246953072e7133c8af0410",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Transforming Ag data in R II\"\nauthor: \"Dr. Adrian Correndo\"\ndate: \"2025-01-24\"\ncategories: [data wrangling, dplyr, tidyr, stringr, lubridate, forcats]\nformat:\n  html:\n    toc: true\n    toc-location: left\n    toc-depth: 4\n    number-sections: true\n    table-class: \"table table-striped table-hover\"\n  pdf:\n    number-sections: true\neditor: source\nsmooth-scroll: true\nbibliography: ../../references.bib\nlink-citations: TRUE\n---\n\n\n\n\n# More packages for data manipulation...ðŸš€\n\nThis lesson builds on our previous session by introducing more advanced data wrangling techniques using `tidyr`, `stringr`, and `forcats`. We will explore how to manipulate and transform data for efficient analysis. Additionally, we introduce `lubridate` for handling dates effectively.\n\n## Required packages for today\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pacman)\np_load(agridat, dplyr, tidyr, stringr, forcats, skimr, lubridate)\n```\n:::\n\n\n\n\n# Advanced `dplyr` Functions\n![](https://dplyr.tidyverse.org/logo.png){.absolute top=0 right=0 height=\"25%\"}\n\n## Aggregation with `group_by()` and `summarize()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_corn <- agridat::lasrosas.corn\nsummary_data <- data_corn %>% \n  group_by(topo, year) %>% \n  summarize(mean_yield = mean(yield, na.rm = TRUE), .groups = \"drop\")\nsummary_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 Ã— 3\n  topo   year mean_yield\n  <fct> <int>      <dbl>\n1 E      1999       64.8\n2 E      2001       92.7\n3 HT     1999       53.4\n4 HT     2001       44.7\n5 LO     1999       71.2\n6 LO     2001       99.9\n7 W      1999       66.0\n8 W      2001       67.7\n```\n\n\n:::\n:::\n\n\n\n\n## Applying Functions to Multiple Columns using `across()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_across <- data_corn %>% \n  mutate(across(c(lat, long), ~ round(.x, digits=1), .names = \"rounded_{.col}\")) # Rounding values to 1 decimal place for better readability\nhead(data_across)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  year       lat      long yield nitro topo     bv rep nf rounded_lat\n1 1999 -33.05113 -63.84886 72.14 131.5    W 162.60  R1 N5       -33.1\n2 1999 -33.05115 -63.84879 73.79 131.5    W 170.49  R1 N5       -33.1\n3 1999 -33.05116 -63.84872 77.25 131.5    W 168.39  R1 N5       -33.1\n4 1999 -33.05117 -63.84865 76.35 131.5    W 176.68  R1 N5       -33.1\n5 1999 -33.05118 -63.84858 75.55 131.5    W 171.46  R1 N5       -33.1\n6 1999 -33.05120 -63.84851 70.24 131.5    W 170.56  R1 N5       -33.1\n  rounded_long\n1        -63.8\n2        -63.8\n3        -63.8\n4        -63.8\n5        -63.8\n6        -63.8\n```\n\n\n:::\n:::\n\n\n\n\n## Creating Conditional Columns with `case_when()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_casewhen <- data_corn %>% \n  mutate(yield_category = case_when(\n    yield > 10 ~ \"High\",\n    yield > 5 ~ \"Medium\",\n    TRUE ~ \"Low\"\n  ))\nhead(data_casewhen)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  year       lat      long yield nitro topo     bv rep nf yield_category\n1 1999 -33.05113 -63.84886 72.14 131.5    W 162.60  R1 N5           High\n2 1999 -33.05115 -63.84879 73.79 131.5    W 170.49  R1 N5           High\n3 1999 -33.05116 -63.84872 77.25 131.5    W 168.39  R1 N5           High\n4 1999 -33.05117 -63.84865 76.35 131.5    W 176.68  R1 N5           High\n5 1999 -33.05118 -63.84858 75.55 131.5    W 171.46  R1 N5           High\n6 1999 -33.05120 -63.84851 70.24 131.5    W 170.56  R1 N5           High\n```\n\n\n:::\n:::\n\n\n\n## Slicing data with `slice()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Selecting the first 3 rows\nfirst_rows <- data_corn %>% slice(1:3)\nhead(first_rows)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  year       lat      long yield nitro topo     bv rep nf\n1 1999 -33.05113 -63.84886 72.14 131.5    W 162.60  R1 N5\n2 1999 -33.05115 -63.84879 73.79 131.5    W 170.49  R1 N5\n3 1999 -33.05116 -63.84872 77.25 131.5    W 168.39  R1 N5\n```\n\n\n:::\n\n```{.r .cell-code}\n# Selecting the last 3 rows\nlast_rows <- data_corn %>% slice_tail(n = 3)\nhead(last_rows)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  year       lat      long yield nitro topo     bv rep nf\n1 2001 -33.05110 -63.84189 92.33    39   LO 166.75  R3 N1\n2 2001 -33.05112 -63.84182 88.98    39   LO 163.59  R3 N1\n3 2001 -33.05115 -63.84175 85.74    39   LO 163.48  R3 N1\n```\n\n\n:::\n\n```{.r .cell-code}\n# Selecting 3 random rows\nrandom_rows <- data_corn %>% slice_sample(n = 3)\nhead(random_rows)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  year       lat      long yield nitro topo     bv rep nf\n1 2001 -33.04934 -63.84794 98.34 124.6    W 172.03  R3 N5\n2 1999 -33.05098 -63.84433 63.53   0.0    E 170.32  R3 N0\n3 1999 -33.05118 -63.84607 57.66  66.0   HT 185.94  R2 N3\n```\n\n\n:::\n\n```{.r .cell-code}\n# Selecting every 2nd row\nevery_second_row <- data_corn %>% slice(seq(1, n(), by = 2))\nhead(every_second_row)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  year       lat      long yield nitro topo     bv rep nf\n1 1999 -33.05113 -63.84886 72.14 131.5    W 162.60  R1 N5\n2 1999 -33.05116 -63.84872 77.25 131.5    W 168.39  R1 N5\n3 1999 -33.05118 -63.84858 75.55 131.5    W 171.46  R1 N5\n4 1999 -33.05121 -63.84844 76.17 131.5    W 172.94  R1 N5\n5 1999 -33.05123 -63.84830 69.77 131.5    W 171.88  R1 N5\n6 1999 -33.05126 -63.84816 71.05 131.5    W 173.02  R1 N5\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Working with Time-Series Data: `lead()` and `lag()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_lag <- data_corn %>% \n  arrange(year, topo) %>% \n  mutate(yield_change = yield - lag(yield))\nhead(data_lag)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  year       lat      long yield nitro topo     bv rep nf yield_change\n1 1999 -33.05174 -63.84532 59.94 131.5    E 182.12  R1 N5           NA\n2 1999 -33.05175 -63.84525 58.96 131.5    E 182.57  R1 N5        -0.98\n3 1999 -33.05176 -63.84518 61.77 131.5    E 178.07  R1 N5         2.81\n4 1999 -33.05178 -63.84511 66.41 131.5    E 177.83  R1 N5         4.64\n5 1999 -33.05179 -63.84504 66.06 131.5    E 176.17  R1 N5        -0.35\n6 1999 -33.05180 -63.84497 62.13 131.5    E 176.56  R1 N5        -3.93\n```\n\n\n:::\n:::\n\n\n\n\n# Data Tidying with `tidyr`\n\n![](https://tidyr.tidyverse.org/logo.png){.absolute top=0 right=0 height=\"25%\"}\n\n`tidyr` helps reshape data into a tidy format. Some key functions:\n\n## Gathering and Spreading Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert from wide to long format using pivot_longer\nlong_data <- data_corn %>% \n  pivot_longer(cols = c(yield, nitro), \n               names_to = \"measurement\", # name of the column with description\n               values_to = \"value\") # name of the column with values\nhead(long_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 9\n   year   lat  long topo     bv rep   nf    measurement value\n  <int> <dbl> <dbl> <fct> <dbl> <fct> <fct> <chr>       <dbl>\n1  1999 -33.1 -63.8 W      163. R1    N5    yield        72.1\n2  1999 -33.1 -63.8 W      163. R1    N5    nitro       132. \n3  1999 -33.1 -63.8 W      170. R1    N5    yield        73.8\n4  1999 -33.1 -63.8 W      170. R1    N5    nitro       132. \n5  1999 -33.1 -63.8 W      168. R1    N5    yield        77.2\n6  1999 -33.1 -63.8 W      168. R1    N5    nitro       132. \n```\n\n\n:::\n\n```{.r .cell-code}\n# Convert back from long to wide format using pivot_wider\nwide_data <- long_data %>% \n  pivot_wider(names_from = measurement, \n              values_from = value)\nhead(wide_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 9\n   year   lat  long topo     bv rep   nf    yield nitro\n  <int> <dbl> <dbl> <fct> <dbl> <fct> <fct> <dbl> <dbl>\n1  1999 -33.1 -63.8 W      163. R1    N5     72.1  132.\n2  1999 -33.1 -63.8 W      170. R1    N5     73.8  132.\n3  1999 -33.1 -63.8 W      168. R1    N5     77.2  132.\n4  1999 -33.1 -63.8 W      177. R1    N5     76.4  132.\n5  1999 -33.1 -63.8 W      171. R1    N5     75.6  132.\n6  1999 -33.1 -63.8 W      171. R1    N5     70.2  132.\n```\n\n\n:::\n:::\n\n\n\n\n## Separating and Uniting Columns\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example dataset with a combined column\nexample_data <- data_corn %>% \n  mutate(topo_year = paste(topo, year, sep = \"_\"))\n\n# Splitting 'topo_year' into two columns\nseparated_data <- example_data %>% \n  separate(topo_year, into = c(\"topo\", \"year\"), sep = \"_\")\nhead(separated_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        lat      long yield nitro     bv rep nf topo year\n1 -33.05113 -63.84886 72.14 131.5 162.60  R1 N5    W 1999\n2 -33.05115 -63.84879 73.79 131.5 170.49  R1 N5    W 1999\n3 -33.05116 -63.84872 77.25 131.5 168.39  R1 N5    W 1999\n4 -33.05117 -63.84865 76.35 131.5 176.68  R1 N5    W 1999\n5 -33.05118 -63.84858 75.55 131.5 171.46  R1 N5    W 1999\n6 -33.05120 -63.84851 70.24 131.5 170.56  R1 N5    W 1999\n```\n\n\n:::\n\n```{.r .cell-code}\n# Combining 'topo' and 'year' back into a single column\nunited_data <- separated_data %>% \n  unite(\"topo_year\", topo, year, sep = \"-\")\nhead(united_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        lat      long yield nitro     bv rep nf topo_year\n1 -33.05113 -63.84886 72.14 131.5 162.60  R1 N5    W-1999\n2 -33.05115 -63.84879 73.79 131.5 170.49  R1 N5    W-1999\n3 -33.05116 -63.84872 77.25 131.5 168.39  R1 N5    W-1999\n4 -33.05117 -63.84865 76.35 131.5 176.68  R1 N5    W-1999\n5 -33.05118 -63.84858 75.55 131.5 171.46  R1 N5    W-1999\n6 -33.05120 -63.84851 70.24 131.5 170.56  R1 N5    W-1999\n```\n\n\n:::\n:::\n\n\n\n\n## Nesting and Unnesting Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnested_data <- data_corn %>% \n  group_by(topo) %>% \n  nest()\nhead(nested_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 Ã— 2\n# Groups:   topo [4]\n  topo  data                \n  <fct> <list>              \n1 W     <tibble [1,043 Ã— 8]>\n2 HT    <tibble [785 Ã— 8]>  \n3 E     <tibble [730 Ã— 8]>  \n4 LO    <tibble [885 Ã— 8]>  \n```\n\n\n:::\n\n```{.r .cell-code}\nunnested_data <- nested_data %>% \n  unnest(cols = c(data))\nhead(unnested_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 9\n# Groups:   topo [1]\n  topo   year   lat  long yield nitro    bv rep   nf   \n  <fct> <int> <dbl> <dbl> <dbl> <dbl> <dbl> <fct> <fct>\n1 W      1999 -33.1 -63.8  72.1  132.  163. R1    N5   \n2 W      1999 -33.1 -63.8  73.8  132.  170. R1    N5   \n3 W      1999 -33.1 -63.8  77.2  132.  168. R1    N5   \n4 W      1999 -33.1 -63.8  76.4  132.  177. R1    N5   \n5 W      1999 -33.1 -63.8  75.6  132.  171. R1    N5   \n6 W      1999 -33.1 -63.8  70.2  132.  171. R1    N5   \n```\n\n\n:::\n:::\n\n\n\n\n# String Manipulation with `stringr`\n\n![](https://stringr.tidyverse.org/logo.png){.absolute top=0 right=0 height=\"25%\"}\n\nThe `stringr` package provides a consistent way to work with character strings.\n\n## Detecting and Extracting Strings\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames <- c(\"Wheat Field\", \"Corn Field\", \"Soybean Farm\")\nstr_detect(names, \"Field\") # Check if 'Field' is present\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE  TRUE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_subset(names, \"Corn\") # Extract values containing 'Corn'\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Corn Field\"\n```\n\n\n:::\n:::\n\n\n\n\n## Modifying Strings\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames <- str_replace(names, \"Field\", \"Plot\")\nnames\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Wheat Plot\"   \"Corn Plot\"    \"Soybean Farm\"\n```\n\n\n:::\n\n```{.r .cell-code}\ncapitalized_names <- str_to_title(names)\nhead(capitalized_names)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Wheat Plot\"   \"Corn Plot\"    \"Soybean Farm\"\n```\n\n\n:::\n\n```{.r .cell-code}\ndata_clean <- data_corn %>% \n  mutate(topo_clean = str_replace_all(topo, \"[^a-zA-Z0-9]\", \"_\"))\n\nhead(data_clean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  year       lat      long yield nitro topo     bv rep nf topo_clean\n1 1999 -33.05113 -63.84886 72.14 131.5    W 162.60  R1 N5          W\n2 1999 -33.05115 -63.84879 73.79 131.5    W 170.49  R1 N5          W\n3 1999 -33.05116 -63.84872 77.25 131.5    W 168.39  R1 N5          W\n4 1999 -33.05117 -63.84865 76.35 131.5    W 176.68  R1 N5          W\n5 1999 -33.05118 -63.84858 75.55 131.5    W 171.46  R1 N5          W\n6 1999 -33.05120 -63.84851 70.24 131.5    W 170.56  R1 N5          W\n```\n\n\n:::\n:::\n\n\n\n\n## Splitting Strings\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwords <- \"Wheat,Corn,Soybean\"\nsplit_words <- str_split(words, \",\")\nhead(split_words)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"Wheat\"   \"Corn\"    \"Soybean\"\n```\n\n\n:::\n:::\n\n\n\n\n# Factor Handling with `forcats`\n\n![](https://forcats.tidyverse.org/logo.png){.absolute top=0 right=0 height=\"25%\"}\n`forcats` provides tools to manipulate categorical data effectively.\n\n## Reordering Factors\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(forcats)\ncrops <- factor(c(\"soybean\", \"corn\", \"wheat\"), levels = c(\"wheat\", \"corn\", \"soybean\"))\ncrops <- fct_relevel(crops, \"corn\") # Moves 'corn' to first position\nhead(crops)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] soybean corn    wheat  \nLevels: corn wheat soybean\n```\n\n\n:::\n:::\n\n\n\n\n## Lump Rare Categories Together\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\ndata <- data.frame(crop = sample(c(\"corn\", \"soybean\", \"wheat\", \"barley\", \"oats\"), 20, replace = TRUE))\n\n# Using mutate() to lump rare categories together\nfactor_data <- data %>%\n  mutate(crop_lumped = fct_lump_n(crop, n = 3)) # Keep top 3 categories, lump others into 'Other'\nfactor_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      crop crop_lumped\n1    wheat       wheat\n2    wheat       wheat\n3  soybean     soybean\n4  soybean     soybean\n5    wheat       wheat\n6     oats       Other\n7   barley       Other\n8     corn        corn\n9  soybean     soybean\n10   wheat       wheat\n11    oats       Other\n12   wheat       wheat\n13   wheat       wheat\n14    corn        corn\n15  barley       Other\n16    corn        corn\n17    corn        corn\n18    oats       Other\n19   wheat       wheat\n20 soybean     soybean\n```\n\n\n:::\n:::\n\n\n\n\n# Date Handling with `lubridate`\n\n![](https://lubridate.tidyverse.org/logo.png){.absolute top=0 right=0 height=\"25%\"}\n\nThe `lubridate` package simplifies working with dates and times in R.\n\n### Parsing Dates\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndates <- c(\"2023-06-15\", \"2024-01-20\", \"2025-07-04\")\nparsed_dates <- ymd(dates)\nparsed_dates\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2023-06-15\" \"2024-01-20\" \"2025-07-04\"\n```\n\n\n:::\n:::\n\n\n\n\n## Extracting Date Components\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyear(parsed_dates)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2023 2024 2025\n```\n\n\n:::\n\n```{.r .cell-code}\nmonth(parsed_dates)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6 1 7\n```\n\n\n:::\n\n```{.r .cell-code}\nday(parsed_dates)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 15 20  4\n```\n\n\n:::\n:::\n\n\n\n\n## Parsing and Extracting Date Components\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndates_corn <- data_corn %>% \n  mutate(date = ymd(paste(year, \"01\", \"01\", sep = \"-\")))\nhead(dates_corn)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  year       lat      long yield nitro topo     bv rep nf       date\n1 1999 -33.05113 -63.84886 72.14 131.5    W 162.60  R1 N5 1999-01-01\n2 1999 -33.05115 -63.84879 73.79 131.5    W 170.49  R1 N5 1999-01-01\n3 1999 -33.05116 -63.84872 77.25 131.5    W 168.39  R1 N5 1999-01-01\n4 1999 -33.05117 -63.84865 76.35 131.5    W 176.68  R1 N5 1999-01-01\n5 1999 -33.05118 -63.84858 75.55 131.5    W 171.46  R1 N5 1999-01-01\n6 1999 -33.05120 -63.84851 70.24 131.5    W 170.56  R1 N5 1999-01-01\n```\n\n\n:::\n:::\n\n\n\n\n# Summary\n\nToday, we explored:\n- `tidyr` for reshaping and tidying data, including `nest()` and `unnest()`.\n- `stringr` for working with text data.\n- `forcats` for handling categorical variables.\n- `lubridate` for working with date data.\n\nThese functions will help you work efficiently with real-world agricultural data. Next session, we will integrate these skills into a full data processing workflow!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}