{
  "hash": "cce57ff88268fca6d08159b641622c4c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Wrangling I\"\nauthor: \"Dr. Adrian Correndo\"\nformat: \n  html: default\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"easypackages\")\nlibrary(pacman)\np_load(\"dplyr\", \"tidyr\") # data manipulation\np_load(agridat) # Ag datasets\n```\n:::\n\n\n\n\n\n\n# 01. Introduction\n\nThis lesson introduces key R concepts, such as the different types of objects and data structures, basic operations, the concept of tidy data, and a few basic data wrangling techniques.\n\n## i. Types of Objects in R\n\nR has different types of objects that store data in various formats. The most common types are:\n\n\t1.\tVectors: One-dimensional arrays that can hold numeric, character, or logical values.\n\t2.\tLists: Collections of objects, possibly of different types (e.g., vectors, data frames).\n\t3.\tData Frames: Tables where each column can hold different types of data (e.g., numbers, characters).\n\t4.\tMatrices: Two-dimensional arrays with rows and columns, where all elements are of the same type.\n\t\n\t\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example of creating different objects in R\n\n# Vector\nmy_vector <- c(1, 2, 3, 4)\n\n# Matrix\nmy_matrix <- matrix(1:9, nrow = 3, ncol = 3)\n\n# Data frame\nmy_data <- data.frame(crop = c(\"Corn\", \"Soybean\", \"Wheat\"),\n                      area_Mha = c(2, 3, 1),\n                      yield_Mgha = c(11, 3.3, 8) )\n\n# mutate(production_Mton = area_Mha * yield_Mgha)\n\n# List\nmy_list <- list(my_vector, my_matrix, my_data)\n\n# Display objects\nmy_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4\n```\n\n\n:::\n\n```{.r .cell-code}\nmy_matrix\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n```\n\n\n:::\n\n```{.r .cell-code}\nmy_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     crop area_Mha yield_Mgha\n1    Corn        2       11.0\n2 Soybean        3        3.3\n3   Wheat        1        8.0\n```\n\n\n:::\n\n```{.r .cell-code}\nmy_list\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 1 2 3 4\n\n[[2]]\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n[[3]]\n     crop area_Mha yield_Mgha\n1    Corn        2       11.0\n2 Soybean        3        3.3\n3   Wheat        1        8.0\n```\n\n\n:::\n:::\n\n\n\n\n\n## ii.Types of Data\n\nIn R, data can come in various types:\n\n\t1.\tNumeric: Numbers, either integers or floating-point numbers.\n\t2.\tCharacter: Strings of text.\n\t3.\tLogical: TRUE or FALSE values.\n\t4.\tFactors: Categorical data, stored as integers with labels.\n\t\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Demonstrating data types\n\n# Numeric\nnum <- 42\n\n# Character\nchar <- \"Hello, R!\"\n\n# Logical\nlogic <- TRUE\n\n# Factor\nfact <- factor(c(\"low\", \"medium\", \"high\"))\n\n# Display types\nclass(num)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(char)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(logic)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(fact)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"factor\"\n```\n\n\n:::\n:::\n\n\n\n\n\n## iii. Basic Operations\n\nR allows you to perform mathematical and logical operations on these objects.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Basic arithmetic operations\nx <- 10\ny <- 5\n\nsum_result <- x + y\nproduct_result <- x * y\ndifference <- x - y\n\n# Display results\nsum_result\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 15\n```\n\n\n:::\n\n```{.r .cell-code}\nproduct_result\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 50\n```\n\n\n:::\n\n```{.r .cell-code}\ndifference\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n\n\n\n\n# 02. What Is Tidy Data?\n\nTidy data follows a simple set of rules to make data analysis easier:\n\n\t1.\tEach variable forms a column.\n\t2.\tEach observation forms a row.\n\t3.\tEach type of observational unit forms a table.\n\nExample of tidy data:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example of tidy data\ntidy_data <- data.frame(\n  subject = c(1, 2, 3),\n  gender = c(\"M\", \"F\", \"F\"),\n  score = c(90, 95, 88)\n)\n\ntidy_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  subject gender score\n1       1      M    90\n2       2      F    95\n3       3      F    88\n```\n\n\n:::\n:::\n\n\n\n\n\n## Data Frames vs Tibbles\n\n## i. What is a Data Frame?\n\nA data frame is a two-dimensional table-like structure in R, where columns can contain different types of data (e.g., numeric, character). It is the default structure for datasets loaded from CSV files or data packages.\n\n### create a data frame\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the wheat dataset from agricolae (which is a data frame)\nwheat_data <- agridat::payne.wheat\n\n# Check the structure of the data frame\nstr(wheat_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t480 obs. of  4 variables:\n $ rotation: Factor w/ 6 levels \"AB\",\"AF\",\"Lc3\",..: 1 1 1 1 2 2 2 2 5 5 ...\n $ nitro   : int  0 70 140 210 0 70 140 210 0 70 ...\n $ year    : int  1981 1981 1981 1981 1981 1981 1981 1981 1981 1981 ...\n $ yield   : num  3.84 6.59 7.49 7.39 3.06 6.32 7.61 7.78 5.82 7.52 ...\n```\n\n\n:::\n:::\n\n\n\n\n\n## ii. What is a Tibble?\n\nA tibble is a modern version of a data frame, introduced by the tibble package. It offers several improvements:\n\n\t•\tTibbles don’t convert characters to factors by default.\n\t•\tPrinting is more concise and doesn’t overwhelm you with too much data.\n\t•\tTibbles are more explicit with column types when printed.\n\n### create a tibble\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert the wheat data frame to a tibble\nwheat_tibble <- as_tibble(wheat_data)\n\n# Check the structure of the tibble\nwheat_tibble\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 480 × 4\n   rotation nitro  year yield\n   <fct>    <int> <int> <dbl>\n 1 AB           0  1981  3.84\n 2 AB          70  1981  6.59\n 3 AB         140  1981  7.49\n 4 AB         210  1981  7.39\n 5 AF           0  1981  3.06\n 6 AF          70  1981  6.32\n 7 AF         140  1981  7.61\n 8 AF         210  1981  7.78\n 9 Ln3          0  1981  5.82\n10 Ln3         70  1981  7.52\n# ℹ 470 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n## iii. Key Differences between Data Frames and Tibbles\n\n\t1.\t**Printing**:\n\t\n  •\tData Frames print the entire dataset unless you limit the number of rows. No information about column types is displayed.\n\t•\tTibbles print only the first 10 rows and automatically show column types.\n\t\n### Example:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Print the entire data frame\nprint(wheat_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    rotation nitro year yield\n1         AB     0 1981  3.84\n2         AB    70 1981  6.59\n3         AB   140 1981  7.49\n4         AB   210 1981  7.39\n5         AF     0 1981  3.06\n6         AF    70 1981  6.32\n7         AF   140 1981  7.61\n8         AF   210 1981  7.78\n9        Ln3     0 1981  5.82\n10       Ln3    70 1981  7.52\n11       Ln3   140 1981  8.12\n12       Ln3   210 1981  7.40\n13       Ln8     0 1981  4.71\n14       Ln8    70 1981  6.52\n15       Ln8   140 1981  8.03\n16       Ln8   210 1981  7.83\n17       Lc3     0 1981  5.35\n18       Lc3    70 1981  6.70\n19       Lc3   140 1981  7.69\n20       Lc3   210 1981  7.53\n21       Lc8     0 1981  6.47\n22       Lc8    70 1981  7.84\n23       Lc8   140 1981  7.98\n24       Lc8   210 1981  7.68\n25        AB     0 1982  4.47\n26        AB    70 1982  6.38\n27        AB   140 1982  7.82\n28        AB   210 1982  8.13\n29        AF     0 1982  4.30\n30        AF    70 1982  6.82\n31        AF   140 1982  8.16\n32        AF   210 1982  8.52\n33       Ln3     0 1982  5.37\n34       Ln3    70 1982  7.91\n35       Ln3   140 1982  7.53\n36       Ln3   210 1982  8.46\n37       Ln8     0 1982  5.55\n38       Ln8    70 1982  8.04\n39       Ln8   140 1982  8.27\n40       Ln8   210 1982  7.31\n41       Lc3     0 1982  5.16\n42       Lc3    70 1982  7.81\n43       Lc3   140 1982  8.38\n44       Lc3   210 1982  7.40\n45       Lc8     0 1982  6.56\n46       Lc8    70 1982  8.36\n47       Lc8   140 1982  8.60\n48       Lc8   210 1982  8.41\n49        AB     0 1983  4.11\n50        AB    70 1983  6.28\n51        AB   140 1983  8.70\n52        AB   210 1983  8.17\n53        AF     0 1983  3.76\n54        AF    70 1983  6.79\n55        AF   140 1983  8.50\n56        AF   210 1983  9.43\n57       Ln3     0 1983  3.86\n58       Ln3    70 1983  7.05\n59       Ln3   140 1983  8.06\n60       Ln3   210 1983  8.28\n61       Ln8     0 1983  4.45\n62       Ln8    70 1983  7.23\n63       Ln8   140 1983  7.48\n64       Ln8   210 1983  6.93\n65       Lc3     0 1983  6.36\n66       Lc3    70 1983  9.67\n67       Lc3   140 1983  9.34\n68       Lc3   210 1983  8.40\n69       Lc8     0 1983  7.39\n70       Lc8    70 1983  9.64\n71       Lc8   140 1983  8.80\n72       Lc8   210 1983  8.66\n73        AB     0 1984  3.66\n74        AB    70 1984  6.56\n75        AB   140 1984  7.74\n76        AB   210 1984  9.41\n77        AF     0 1984  4.28\n78        AF    70 1984  8.94\n79        AF   140 1984  9.12\n80        AF   210 1984  9.35\n81       Ln3     0 1984  4.92\n82       Ln3    70 1984  7.66\n83       Ln3   140 1984  9.75\n84       Ln3   210 1984 10.35\n85       Ln8     0 1984  5.46\n86       Ln8    70 1984  8.68\n87       Ln8   140 1984  9.20\n88       Ln8   210 1984 10.33\n89       Lc3     0 1984  7.18\n90       Lc3    70 1984 11.06\n91       Lc3   140 1984 10.52\n92       Lc3   210 1984  9.88\n93       Lc8     0 1984  7.51\n94       Lc8    70 1984  9.66\n95       Lc8   140 1984 11.04\n96       Lc8   210 1984  9.36\n97        AB     0 1985  2.39\n98        AB    70 1985  5.90\n99        AB   140 1985  7.76\n100       AB   210 1985  8.62\n101       AF     0 1985  2.03\n102       AF    70 1985  5.46\n103       AF   140 1985  7.72\n104       AF   210 1985  9.20\n105      Ln3     0 1985  4.24\n106      Ln3    70 1985  7.26\n107      Ln3   140 1985  8.26\n108      Ln3   210 1985  9.69\n109      Ln8     0 1985  4.07\n110      Ln8    70 1985  6.98\n111      Ln8   140 1985  8.39\n112      Ln8   210 1985  8.55\n113      Lc3     0 1985  4.97\n114      Lc3    70 1985  7.64\n115      Lc3   140 1985  9.57\n116      Lc3   210 1985  8.84\n117      Lc8     0 1985  4.44\n118      Lc8    70 1985  8.08\n119      Lc8   140 1985  8.76\n120      Lc8   210 1985 10.19\n121       AB     0 1986  4.17\n122       AB    70 1986  6.91\n123       AB   140 1986  7.21\n124       AB   210 1986  8.53\n125       AF     0 1986  4.08\n126       AF    70 1986  5.08\n127       AF   140 1986  6.32\n128       AF   210 1986  7.88\n129      Ln3     0 1986  3.36\n130      Ln3    70 1986  5.65\n131      Ln3   140 1986  6.62\n132      Ln3   210 1986  6.05\n133      Ln8     0 1986  4.68\n134      Ln8    70 1986  6.55\n135      Ln8   140 1986  7.20\n136      Ln8   210 1986  6.84\n137      Lc3     0 1986  6.14\n138      Lc3    70 1986  7.15\n139      Lc3   140 1986  6.89\n140      Lc3   210 1986  6.20\n141      Lc8     0 1986  6.09\n142      Lc8    70 1986  7.31\n143      Lc8   140 1986  6.85\n144      Lc8   210 1986  6.75\n145       AB     0 1987  4.39\n146       AB    70 1987  6.18\n147       AB   140 1987  6.75\n148       AB   210 1987  7.84\n149       AF     0 1987  3.02\n150       AF    70 1987  5.56\n151       AF   140 1987  6.60\n152       AF   210 1987  6.43\n153      Ln3     0 1987  4.41\n154      Ln3    70 1987  6.55\n155      Ln3   140 1987  7.59\n156      Ln3   210 1987  7.13\n157      Ln8     0 1987  4.80\n158      Ln8    70 1987  6.74\n159      Ln8   140 1987  7.86\n160      Ln8   210 1987  7.00\n161      Lc3     0 1987  5.51\n162      Lc3    70 1987  7.24\n163      Lc3   140 1987  7.74\n164      Lc3   210 1987  7.61\n165      Lc8     0 1987  5.26\n166      Lc8    70 1987  7.48\n167      Lc8   140 1987  8.31\n168      Lc8   210 1987  8.13\n169       AB     0 1988  2.98\n170       AB    70 1988  6.28\n171       AB   140 1988  6.77\n172       AB   210 1988  6.20\n173       AF     0 1988  3.09\n174       AF    70 1988  6.60\n175       AF   140 1988  6.63\n176       AF   210 1988  6.61\n177      Ln3     0 1988  4.01\n178      Ln3    70 1988  6.77\n179      Ln3   140 1988  7.12\n180      Ln3   210 1988  6.14\n181      Ln8     0 1988  4.34\n182      Ln8    70 1988  6.73\n183      Ln8   140 1988  7.46\n184      Ln8   210 1988  7.23\n185      Lc3     0 1988  5.68\n186      Lc3    70 1988  7.39\n187      Lc3   140 1988  7.54\n188      Lc3   210 1988  7.51\n189      Lc8     0 1988  5.26\n190      Lc8    70 1988  7.87\n191      Lc8   140 1988  6.94\n192      Lc8   210 1988  7.06\n193       AB     0 1989  1.16\n194       AB    70 1989  3.94\n195       AB   140 1989  4.58\n196       AB   210 1989  4.74\n197       AF     0 1989  2.80\n198       AF    70 1989  4.92\n199       AF   140 1989  5.17\n200       AF   210 1989  5.82\n201      Ln3     0 1989  4.04\n202      Ln3    70 1989  5.94\n203      Ln3   140 1989  6.10\n204      Ln3   210 1989  6.04\n205      Ln8     0 1989  3.77\n206      Ln8    70 1989  5.58\n207      Ln8   140 1989  5.56\n208      Ln8   210 1989  4.91\n209      Lc3     0 1989  5.45\n210      Lc3    70 1989  6.28\n211      Lc3   140 1989  6.12\n212      Lc3   210 1989  5.81\n213      Lc8     0 1989  4.91\n214      Lc8    70 1989  6.69\n215      Lc8   140 1989  6.39\n216      Lc8   210 1989  5.06\n217       AB     0 1990  1.47\n218       AB    70 1990  4.94\n219       AB   140 1990  5.83\n220       AB   210 1990  6.33\n221       AF     0 1990  1.38\n222       AF    70 1990  5.72\n223       AF   140 1990  6.30\n224       AF   210 1990  5.18\n225      Ln3     0 1990  1.73\n226      Ln3    70 1990  4.94\n227      Ln3   140 1990  5.43\n228      Ln3   210 1990  6.17\n229      Ln8     0 1990  2.62\n230      Ln8    70 1990  5.79\n231      Ln8   140 1990  5.08\n232      Ln8   210 1990  5.25\n233      Lc3     0 1990  3.59\n234      Lc3    70 1990  6.06\n235      Lc3   140 1990  7.20\n236      Lc3   210 1990  6.42\n237      Lc8     0 1990  3.31\n238      Lc8    70 1990  6.51\n239      Lc8   140 1990  6.65\n240      Lc8   210 1990  6.99\n241       AB     0 1991  4.48\n242       AB    70 1991  8.56\n243       AB   140 1991  9.94\n244       AB   210 1991 10.23\n245       AF     0 1991  3.46\n246       AF    70 1991  8.00\n247       AF   140 1991  9.75\n248       AF   210 1991 10.57\n249      Ln3     0 1991  6.75\n250      Ln3    70 1991  8.85\n251      Ln3   140 1991  9.96\n252      Ln3   210 1991 10.41\n253      Ln8     0 1991  5.94\n254      Ln8    70 1991  8.83\n255      Ln8   140 1991  9.64\n256      Ln8   210 1991  9.75\n257      Lc3     0 1991  6.47\n258      Lc3    70 1991  9.37\n259      Lc3   140 1991 10.46\n260      Lc3   210 1991 10.48\n261      Lc8     0 1991  6.08\n262      Lc8    70 1991  8.81\n263      Lc8   140 1991  9.63\n264      Lc8   210 1991 10.10\n265       AB     0 1992  6.31\n266       AB    70 1992  7.84\n267       AB   140 1992  7.21\n268       AB   210 1992  6.81\n269       AF     0 1992  3.82\n270       AF    70 1992  8.05\n271       AF   140 1992  8.21\n272       AF   210 1992  7.59\n273      Ln3     0 1992  2.73\n274      Ln3    70 1992  6.47\n275      Ln3   140 1992  7.49\n276      Ln3   210 1992  7.26\n277      Ln8     0 1992  4.19\n278      Ln8    70 1992  7.17\n279      Ln8   140 1992  7.54\n280      Ln8   210 1992  6.67\n281      Lc3     0 1992  6.33\n282      Lc3    70 1992  7.48\n283      Lc3   140 1992  6.13\n284      Lc3   210 1992  4.79\n285      Lc8     0 1992  7.11\n286      Lc8    70 1992  6.65\n287      Lc8   140 1992  6.45\n288      Lc8   210 1992  6.14\n289       AB     0 1993  3.11\n290       AB    70 1993  5.92\n291       AB   140 1993  5.89\n292       AB   210 1993  6.63\n293       AF     0 1993  2.86\n294       AF    70 1993  5.79\n295       AF   140 1993  6.72\n296       AF   210 1993  7.37\n297      Ln3     0 1993  3.13\n298      Ln3    70 1993  5.40\n299      Ln3   140 1993  6.60\n300      Ln3   210 1993  6.52\n301      Ln8     0 1993  3.42\n302      Ln8    70 1993  5.16\n303      Ln8   140 1993  6.47\n304      Ln8   210 1993  6.55\n305      Lc3     0 1993  5.58\n306      Lc3    70 1993  7.01\n307      Lc3   140 1993  7.69\n308      Lc3   210 1993  7.91\n309      Lc8     0 1993  6.08\n310      Lc8    70 1993  7.03\n311      Lc8   140 1993  7.20\n312      Lc8   210 1993  7.69\n313       AB     0 1994  0.93\n314       AB    70 1994  3.94\n315       AB   140 1994  4.04\n316       AB   210 1994  3.51\n317       AF     0 1994  1.80\n318       AF    70 1994  5.32\n319       AF   140 1994  8.08\n320       AF   210 1994  8.55\n321      Ln3     0 1994  4.76\n322      Ln3    70 1994  6.16\n323      Ln3   140 1994  7.35\n324      Ln3   210 1994  7.14\n325      Ln8     0 1994  3.64\n326      Ln8    70 1994  5.14\n327      Ln8   140 1994  7.00\n328      Ln8   210 1994  7.16\n329      Lc3     0 1994  5.06\n330      Lc3    70 1994  6.00\n331      Lc3   140 1994  6.28\n332      Lc3   210 1994  7.50\n333      Lc8     0 1994  3.46\n334      Lc8    70 1994  6.48\n335      Lc8   140 1994  6.07\n336      Lc8   210 1994  7.53\n337       AB     0 1995  1.30\n338       AB    70 1995  4.21\n339       AB   140 1995  4.35\n340       AB   210 1995  4.35\n341       AF     0 1995  1.27\n342       AF    70 1995  3.82\n343       AF   140 1995  4.60\n344       AF   210 1995  4.96\n345      Ln3     0 1995  2.17\n346      Ln3    70 1995  5.01\n347      Ln3   140 1995  5.39\n348      Ln3   210 1995  5.79\n349      Ln8     0 1995  2.52\n350      Ln8    70 1995  5.71\n351      Ln8   140 1995  5.36\n352      Ln8   210 1995  6.53\n353      Lc3     0 1995  2.57\n354      Lc3    70 1995  5.70\n355      Lc3   140 1995  6.46\n356      Lc3   210 1995  5.78\n357      Lc8     0 1995  3.52\n358      Lc8    70 1995  6.60\n359      Lc8   140 1995  6.36\n360      Lc8   210 1995  6.14\n361       AB     0 1996  1.19\n362       AB    70 1996  7.24\n363       AB   140 1996  7.80\n364       AB   210 1996  8.43\n365       AF     0 1996  0.65\n366       AF    70 1996  6.60\n367       AF   140 1996  7.69\n368       AF   210 1996  7.79\n369      Ln3     0 1996  3.82\n370      Ln3    70 1996  7.19\n371      Ln3   140 1996  7.15\n372      Ln3   210 1996  8.41\n373      Ln8     0 1996  6.37\n374      Ln8    70 1996  8.23\n375      Ln8   140 1996  8.77\n376      Ln8   210 1996  8.46\n377      Lc3     0 1996  5.23\n378      Lc3    70 1996  7.76\n379      Lc3   140 1996  8.19\n380      Lc3   210 1996  8.67\n381      Lc8     0 1996  5.73\n382      Lc8    70 1996  7.97\n383      Lc8   140 1996  8.48\n384      Lc8   210 1996  8.28\n385       AB     0 1997  1.58\n386       AB    70 1997  5.73\n387       AB   140 1997  7.37\n388       AB   210 1997  7.88\n389       AF     0 1997  2.40\n390       AF    70 1997  6.52\n391       AF   140 1997  9.25\n392       AF   210 1997  9.24\n393      Ln3     0 1997  1.74\n394      Ln3    70 1997  3.83\n395      Ln3   140 1997  5.15\n396      Ln3   210 1997  5.02\n397      Ln8     0 1997  2.53\n398      Ln8    70 1997  6.20\n399      Ln8   140 1997  6.93\n400      Ln8   210 1997  7.25\n401      Lc3     0 1997  4.40\n402      Lc3    70 1997  7.70\n403      Lc3   140 1997  8.01\n404      Lc3   210 1997  8.30\n405      Lc8     0 1997  4.10\n406      Lc8    70 1997  6.78\n407      Lc8   140 1997  7.36\n408      Lc8   210 1997  7.43\n409       AB     0 1998  3.21\n410       AB    70 1998  6.70\n411       AB   140 1998  9.35\n412       AB   210 1998 10.26\n413       AF     0 1998  2.52\n414       AF    70 1998  6.35\n415       AF   140 1998  8.80\n416       AF   210 1998  9.72\n417      Ln3     0 1998  3.77\n418      Ln3    70 1998  7.13\n419      Ln3   140 1998  8.67\n420      Ln3   210 1998  9.62\n421      Ln8     0 1998  4.97\n422      Ln8    70 1998  7.77\n423      Ln8   140 1998  9.21\n424      Ln8   210 1998  9.24\n425      Lc3     0 1998  4.78\n426      Lc3    70 1998  7.48\n427      Lc3   140 1998  8.50\n428      Lc3   210 1998  8.75\n429      Lc8     0 1998  4.11\n430      Lc8    70 1998  7.55\n431      Lc8   140 1998  9.01\n432      Lc8   210 1998  8.98\n433       AB     0 1999  0.00\n434       AB    70 1999  1.97\n435       AB   140 1999  3.44\n436       AB   210 1999  2.28\n437       AF     0 1999  0.52\n438       AF    70 1999  6.55\n439       AF   140 1999  7.53\n440       AF   210 1999  8.48\n441      Ln3     0 1999  1.69\n442      Ln3    70 1999  6.58\n443      Ln3   140 1999  7.58\n444      Ln3   210 1999  7.83\n445      Ln8     0 1999  3.42\n446      Ln8    70 1999  6.59\n447      Ln8   140 1999  8.26\n448      Ln8   210 1999  6.51\n449      Lc3     0 1999  4.42\n450      Lc3    70 1999  7.27\n451      Lc3   140 1999  8.65\n452      Lc3   210 1999  9.54\n453      Lc8     0 1999  1.79\n454      Lc8    70 1999  4.65\n455      Lc8   140 1999  5.54\n456      Lc8   210 1999  4.95\n457       AB     0 2000  1.45\n458       AB    70 2000  4.54\n459       AB   140 2000  4.52\n460       AB   210 2000  5.53\n461       AF     0 2000  0.96\n462       AF    70 2000  4.87\n463       AF   140 2000  6.28\n464       AF   210 2000  7.39\n465      Ln3     0 2000  3.40\n466      Ln3    70 2000  7.06\n467      Ln3   140 2000  8.64\n468      Ln3   210 2000  8.71\n469      Ln8     0 2000  3.42\n470      Ln8    70 2000  6.58\n471      Ln8   140 2000  7.22\n472      Ln8   210 2000  7.49\n473      Lc3     0 2000  5.05\n474      Lc3    70 2000  8.24\n475      Lc3   140 2000  8.96\n476      Lc3   210 2000 10.33\n477      Lc8     0 2000  4.31\n478      Lc8    70 2000  7.47\n479      Lc8   140 2000  8.95\n480      Lc8   210 2000  9.65\n```\n\n\n:::\n\n```{.r .cell-code}\n# Print the tibble (shows only first 10 rows and column types)\nprint(wheat_tibble)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 480 × 4\n   rotation nitro  year yield\n   <fct>    <int> <int> <dbl>\n 1 AB           0  1981  3.84\n 2 AB          70  1981  6.59\n 3 AB         140  1981  7.49\n 4 AB         210  1981  7.39\n 5 AF           0  1981  3.06\n 6 AF          70  1981  6.32\n 7 AF         140  1981  7.61\n 8 AF         210  1981  7.78\n 9 Ln3          0  1981  5.82\n10 Ln3         70  1981  7.52\n# ℹ 470 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n\t\n\t2.\t**Subsetting**:\n\t\n\t•\tWhen subsetting a single column from a data frame using [, \"column\"], it may return a vector, depending on the structure of the data.\n\t•\tTibbles always return a tibble when subsetting, preserving the structure of the data.\n### Example:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Subsetting 'yield' column from data frame (returns a vector)\nsubset_df <- wheat_data[, \"yield\"]\nclass(subset_df)  # returns \"numeric\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Subsetting 'yield' column from tibble (returns a tibble)\nsubset_tibble <- wheat_tibble[, \"yield\"]\nclass(subset_tibble)  # returns \"tbl_df\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\n## SUBSETTING with TIDYVERSE SYNTAX\n# Subsetting in a tibble\nwheat_tibble_subset <- select(wheat_tibble, nitro, yield)\n\n# View the subset (printing behavior of tibbles)\nwheat_tibble_subset\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 480 × 2\n   nitro yield\n   <int> <dbl>\n 1     0  3.84\n 2    70  6.59\n 3   140  7.49\n 4   210  7.39\n 5     0  3.06\n 6    70  6.32\n 7   140  7.61\n 8   210  7.78\n 9     0  5.82\n10    70  7.52\n# ℹ 470 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\t\n\t3.  **Column Types**:\n\t\n\t•\tData Frames can automatically convert character columns to factors unless explicitly told otherwise.\n\t•\tTibbles do not convert characters to factors automatically, which is more intuitive for many data analysis tasks.\n### Example:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check the class of 'nitro' in the data frame (often a factor)\nclass(wheat_data$nitro)  # returns \"factor\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check the class of 'nitro' in the tibble (remains character)\nclass(wheat_tibble$nitro)  # returns \"character\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n:::\n\n\n\n\n\n## CHECKPOINT 1\n\nIn this lesson, we covered:\n\n\t•\tTypes of objects in R (vectors, matrices, data frames, and lists).\n\t•\tBasic arithmetic and logical operations in R.\n\t•\tCommon data types in R (numeric, character, logical, and factors).\n\t•\tThe concept of tidy data\n\t•\tDataframes vs. Tibbles\n\n# 03. Basic Data Wrangling\n\nData wrangling involves preparing and transforming your data for analysis. R provides several functions, especially in the dplyr package, to help with this.\n\nKey functions in dplyr include:\n\n\t•\tselect(): Select specific columns.\n\t•\tfilter(): Filter rows based on conditions.\n\t•\tmutate(): Add new columns or modify existing ones.\n\t•\tsummarise(): Create summary statistics.\n\t•\tarrange(): Sort the data by one or more columns.\n\t\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the wheat_data dataset\nwheat_data <- agridat::payne.wheat\n\n# Convert to tibble for better display and manipulation\nwheat_tibble <- as_tibble(wheat_data)\n```\n:::\n\n\n\n\n\n### 1. Select columns\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select specific columns (year, yield, block)\nselected_data <- select(wheat_tibble, year, rotation, nitro, yield)\n\n# View selected data\nselected_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 480 × 4\n    year rotation nitro yield\n   <int> <fct>    <int> <dbl>\n 1  1981 AB           0  3.84\n 2  1981 AB          70  6.59\n 3  1981 AB         140  7.49\n 4  1981 AB         210  7.39\n 5  1981 AF           0  3.06\n 6  1981 AF          70  6.32\n 7  1981 AF         140  7.61\n 8  1981 AF         210  7.78\n 9  1981 Ln3          0  5.82\n10  1981 Ln3         70  7.52\n# ℹ 470 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n\n### 2. Filtering Rows\n\nUse filter() to select rows based on conditions. Here, we’ll filter potato yields greater than 40.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter rows where yield is greater than 40\nhigh_yield <- filter(wheat_tibble, yield > 40)\n\n# View the filtered data\nhigh_yield\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 4\n# ℹ 4 variables: rotation <fct>, nitro <int>, year <int>, yield <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\n### 3. Mutating (creating new columns)\n\nUse mutate() to create new columns. We are going to:\ni) create a new column called \"crop = 'potato'\"\nii) categorize potato yield into “High”, “Medium”, or “Low”.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Categorize yield into \"High\", \"Medium\", and \"Low\"\nwheat_tibble <- wheat_tibble %>%\n  mutate(yield_category = case_when(\n    yield > 40 ~ \"High\",\n    yield > 30 ~ \"Medium\",\n    TRUE ~ \"Low\"\n  ))\n\n# View the updated data\nhead(select(wheat_tibble, yield, yield_category))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  yield yield_category\n  <dbl> <chr>         \n1  3.84 Low           \n2  6.59 Low           \n3  7.49 Low           \n4  7.39 Low           \n5  3.06 Low           \n6  6.32 Low           \n```\n\n\n:::\n:::\n\n\n\n\n\n### 4. Summarizing Data\n\nWe can calculate summary statistics like the mean and standard deviation of yield by block.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Summarize yield by block\nsummary_stats <- wheat_tibble %>%\n  group_by(rotation) %>%\n  summarise(mean_yield = mean(yield), sd_yield = sd(yield))\n\n# View the summary statistics\nsummary_stats\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  rotation mean_yield sd_yield\n  <fct>         <dbl>    <dbl>\n1 AB             5.61     2.44\n2 AF             6.04     2.47\n3 Lc3            7.18     1.71\n4 Lc8            7.04     1.76\n5 Ln3            6.35     2.05\n6 Ln8            6.50     1.79\n```\n\n\n:::\n:::\n\n\n\n\n\n### 5. Arranging Rows\n\nWe can sort the dataset by a specific column using arrange(). Let’s sort by yield in descending order.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Arrange rows by yield\narranged_data <- arrange(wheat_tibble, desc(yield))\n\n# View the arranged data\narranged_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 480 × 5\n   rotation nitro  year yield yield_category\n   <fct>    <int> <int> <dbl> <chr>         \n 1 Lc3         70  1984  11.1 Low           \n 2 Lc8        140  1984  11.0 Low           \n 3 AF         210  1991  10.6 Low           \n 4 Lc3        140  1984  10.5 Low           \n 5 Lc3        210  1991  10.5 Low           \n 6 Lc3        140  1991  10.5 Low           \n 7 Ln3        210  1991  10.4 Low           \n 8 Ln3        210  1984  10.4 Low           \n 9 Ln8        210  1984  10.3 Low           \n10 Lc3        210  2000  10.3 Low           \n# ℹ 470 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n## CHECKPOINT 2\n\nIn this second half lesson, we covered:\n\n\t•\tBasic data wrangling functions from the dplyr package:\n\t- select()\n\t- filter()\n\t- mutate()\n\t- summarise()\n\t- arrange()\n\t\n\n## Additional Essential Data Wrangling Functions\n\n### 6. Renaming Columns\n\nThe rename() function allows you to rename columns easily. Let’s rename the yield column to wheat_yield.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwheat_tibble %>% rename(yield_class = yield_category)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 480 × 5\n   rotation nitro  year yield yield_class\n   <fct>    <int> <int> <dbl> <chr>      \n 1 AB           0  1981  3.84 Low        \n 2 AB          70  1981  6.59 Low        \n 3 AB         140  1981  7.49 Low        \n 4 AB         210  1981  7.39 Low        \n 5 AF           0  1981  3.06 Low        \n 6 AF          70  1981  6.32 Low        \n 7 AF         140  1981  7.61 Low        \n 8 AF         210  1981  7.78 Low        \n 9 Ln3          0  1981  5.82 Low        \n10 Ln3         70  1981  7.52 Low        \n# ℹ 470 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n### 7. Relocating Columns\n\nUse relocate() to change the order of columns. Let’s move the nitro column to the beginning.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Move 'nitro' to the first position\nwheat_relocated <- wheat_tibble %>%\n  relocate(nitro)\n\n# View the relocated columns\nhead(wheat_relocated)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  nitro rotation  year yield yield_category\n  <int> <fct>    <int> <dbl> <chr>         \n1     0 AB        1981  3.84 Low           \n2    70 AB        1981  6.59 Low           \n3   140 AB        1981  7.49 Low           \n4   210 AB        1981  7.39 Low           \n5     0 AF        1981  3.06 Low           \n6    70 AF        1981  6.32 Low           \n```\n\n\n:::\n:::\n\n\n\n\n\n### 8. Removing Duplicate Rows\n\nThe distinct() function removes duplicate rows based on one or more columns. Let’s remove duplicates in the nitro and yield columns.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Remove duplicate rows based on 'nitro' and 'yield'\ndistinct_wheat <- wheat_tibble %>%\n  distinct(nitro, yield)\n\n# View distinct rows\nhead(distinct_wheat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  nitro yield\n  <int> <dbl>\n1     0  3.84\n2    70  6.59\n3   140  7.49\n4   210  7.39\n5     0  3.06\n6    70  6.32\n```\n\n\n:::\n:::\n\n\n\n\n\n\n### 9. Slicing Rows by Position\n\nThe slice() function allows you to select rows by their position. Let’s select the first 5 rows.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select the first 5 rows\nsliced_wheat <- wheat_tibble %>%\n  slice(1:5)\n\n# View the sliced rows\nsliced_wheat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 5\n  rotation nitro  year yield yield_category\n  <fct>    <int> <int> <dbl> <chr>         \n1 AB           0  1981  3.84 Low           \n2 AB          70  1981  6.59 Low           \n3 AB         140  1981  7.49 Low           \n4 AB         210  1981  7.39 Low           \n5 AF           0  1981  3.06 Low           \n```\n\n\n:::\n:::\n\n\n\n\n\n\n### 10. Extracting a Column as a Vector\n\nYou can use pull() to extract a single column from a tibble as a vector. Let’s extract the yield column.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract 'yield' as a vector\nyield_vector <- wheat_tibble %>%\n  pull(yield)\n\n# View the yield vector\nyield_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1]  3.84  6.59  7.49  7.39  3.06  6.32  7.61  7.78  5.82  7.52  8.12  7.40\n [13]  4.71  6.52  8.03  7.83  5.35  6.70  7.69  7.53  6.47  7.84  7.98  7.68\n [25]  4.47  6.38  7.82  8.13  4.30  6.82  8.16  8.52  5.37  7.91  7.53  8.46\n [37]  5.55  8.04  8.27  7.31  5.16  7.81  8.38  7.40  6.56  8.36  8.60  8.41\n [49]  4.11  6.28  8.70  8.17  3.76  6.79  8.50  9.43  3.86  7.05  8.06  8.28\n [61]  4.45  7.23  7.48  6.93  6.36  9.67  9.34  8.40  7.39  9.64  8.80  8.66\n [73]  3.66  6.56  7.74  9.41  4.28  8.94  9.12  9.35  4.92  7.66  9.75 10.35\n [85]  5.46  8.68  9.20 10.33  7.18 11.06 10.52  9.88  7.51  9.66 11.04  9.36\n [97]  2.39  5.90  7.76  8.62  2.03  5.46  7.72  9.20  4.24  7.26  8.26  9.69\n[109]  4.07  6.98  8.39  8.55  4.97  7.64  9.57  8.84  4.44  8.08  8.76 10.19\n[121]  4.17  6.91  7.21  8.53  4.08  5.08  6.32  7.88  3.36  5.65  6.62  6.05\n[133]  4.68  6.55  7.20  6.84  6.14  7.15  6.89  6.20  6.09  7.31  6.85  6.75\n[145]  4.39  6.18  6.75  7.84  3.02  5.56  6.60  6.43  4.41  6.55  7.59  7.13\n[157]  4.80  6.74  7.86  7.00  5.51  7.24  7.74  7.61  5.26  7.48  8.31  8.13\n[169]  2.98  6.28  6.77  6.20  3.09  6.60  6.63  6.61  4.01  6.77  7.12  6.14\n[181]  4.34  6.73  7.46  7.23  5.68  7.39  7.54  7.51  5.26  7.87  6.94  7.06\n[193]  1.16  3.94  4.58  4.74  2.80  4.92  5.17  5.82  4.04  5.94  6.10  6.04\n[205]  3.77  5.58  5.56  4.91  5.45  6.28  6.12  5.81  4.91  6.69  6.39  5.06\n[217]  1.47  4.94  5.83  6.33  1.38  5.72  6.30  5.18  1.73  4.94  5.43  6.17\n[229]  2.62  5.79  5.08  5.25  3.59  6.06  7.20  6.42  3.31  6.51  6.65  6.99\n[241]  4.48  8.56  9.94 10.23  3.46  8.00  9.75 10.57  6.75  8.85  9.96 10.41\n[253]  5.94  8.83  9.64  9.75  6.47  9.37 10.46 10.48  6.08  8.81  9.63 10.10\n[265]  6.31  7.84  7.21  6.81  3.82  8.05  8.21  7.59  2.73  6.47  7.49  7.26\n[277]  4.19  7.17  7.54  6.67  6.33  7.48  6.13  4.79  7.11  6.65  6.45  6.14\n[289]  3.11  5.92  5.89  6.63  2.86  5.79  6.72  7.37  3.13  5.40  6.60  6.52\n[301]  3.42  5.16  6.47  6.55  5.58  7.01  7.69  7.91  6.08  7.03  7.20  7.69\n[313]  0.93  3.94  4.04  3.51  1.80  5.32  8.08  8.55  4.76  6.16  7.35  7.14\n[325]  3.64  5.14  7.00  7.16  5.06  6.00  6.28  7.50  3.46  6.48  6.07  7.53\n[337]  1.30  4.21  4.35  4.35  1.27  3.82  4.60  4.96  2.17  5.01  5.39  5.79\n[349]  2.52  5.71  5.36  6.53  2.57  5.70  6.46  5.78  3.52  6.60  6.36  6.14\n[361]  1.19  7.24  7.80  8.43  0.65  6.60  7.69  7.79  3.82  7.19  7.15  8.41\n[373]  6.37  8.23  8.77  8.46  5.23  7.76  8.19  8.67  5.73  7.97  8.48  8.28\n[385]  1.58  5.73  7.37  7.88  2.40  6.52  9.25  9.24  1.74  3.83  5.15  5.02\n[397]  2.53  6.20  6.93  7.25  4.40  7.70  8.01  8.30  4.10  6.78  7.36  7.43\n[409]  3.21  6.70  9.35 10.26  2.52  6.35  8.80  9.72  3.77  7.13  8.67  9.62\n[421]  4.97  7.77  9.21  9.24  4.78  7.48  8.50  8.75  4.11  7.55  9.01  8.98\n[433]  0.00  1.97  3.44  2.28  0.52  6.55  7.53  8.48  1.69  6.58  7.58  7.83\n[445]  3.42  6.59  8.26  6.51  4.42  7.27  8.65  9.54  1.79  4.65  5.54  4.95\n[457]  1.45  4.54  4.52  5.53  0.96  4.87  6.28  7.39  3.40  7.06  8.64  8.71\n[469]  3.42  6.58  7.22  7.49  5.05  8.24  8.96 10.33  4.31  7.47  8.95  9.65\n```\n\n\n:::\n:::\n\n\n\n\n\n\n### 11. Combining and Splitting Columns\n\n\t•\tunite(): Combines multiple columns into one.\n\t•\tseparate(): Splits one column into multiple columns.\n\nLet’s combine nitro and yield into a single column and then split it back.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combine 'nitro' and 'yield' into a single column\nunited_wheat <- wheat_tibble %>%\n  unite(\"nitro_yield\", nitro, yield, sep = \"_\")\n\n# View the united column\nhead(united_wheat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  rotation nitro_yield  year yield_category\n  <fct>    <chr>       <int> <chr>         \n1 AB       0_3.84       1981 Low           \n2 AB       70_6.59      1981 Low           \n3 AB       140_7.49     1981 Low           \n4 AB       210_7.39     1981 Low           \n5 AF       0_3.06       1981 Low           \n6 AF       70_6.32      1981 Low           \n```\n\n\n:::\n\n```{.r .cell-code}\n# Split the 'nitro_yield' column back into two\nseparated_wheat <- united_wheat %>%\n  separate(nitro_yield, into = c(\"nitro\", \"yield\"), sep = \"_\")\n\n# View the separated columns\nhead(separated_wheat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  rotation nitro yield  year yield_category\n  <fct>    <chr> <chr> <int> <chr>         \n1 AB       0     3.84   1981 Low           \n2 AB       70    6.59   1981 Low           \n3 AB       140   7.49   1981 Low           \n4 AB       210   7.39   1981 Low           \n5 AF       0     3.06   1981 Low           \n6 AF       70    6.32   1981 Low           \n```\n\n\n:::\n:::\n\n\n\n\n\n### Wrapping up 2\nIn this extended lesson, we covered more essential data wrangling functions in R:\n\n\t•\tRenaming columns with rename().\n\t•\tRearranging columns with relocate().\n\t•\tRemoving duplicates with distinct().\n\t•\tSelecting rows by position with slice().\n\t•\tExtracting columns as vectors with pull().\n\t•\tCombining and splitting columns with unite() and separate().\n\nThese functions are fundamental for preparing data in R, especially when working with agricultural datasets.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}