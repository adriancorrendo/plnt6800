{
  "hash": "0b8da0038f319e0d897153c91b118e03",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Advanced Data Wrangling in R\"\nauthor: \"Dr. Adrian Correndo\"\ndate: \"2025-01-29\"\ncategories: [data wrangling, dplyr, tidyr, case study]\nformat:\n  html:\n    toc: true\n    toc-location: left\n    toc-depth: 4\n    number-sections: true\n    table-class: \"table table-striped table-hover\"\n  pdf:\n    number-sections: true\neditor: source\nsmooth-scroll: true\nbibliography: ../../references.bib\nlink-citations: TRUE\n---\n\n\n\n\n\n\n**Description** <br/>\n\nThis class dives deeper into the world of R data wrangling, covering advanced techniques and their applications. We'll explore complex functions and join operations essential for real-world data analysis.\n\n**Required packages for today** <br/>\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pacman)\np_load(dplyr, tidyr, stringr, lubridate, janitor)\n```\n:::\n\n\n\n\n\n\n# Review of Previous Lessons\n\n|  |  |\n|----|----|\n| ![](https://dplyr.tidyverse.org/logo.png){.absolute top=\"0\" right=\"0\" height=\"45%\"} | ![](https://tidyr.tidyverse.org/logo.png){.absolute top=\"0\" right=\"0\" height=\"45%\"} |\n\nQuick recap of essential data wrangling functions: \n\n::: panel-tabset\n## `dplyr` \n-   `mutate()`\n\n-   `filter()`\n-   `select()`\n-   `slice()`, `slice_head()`, `slice_tail()`, `slice_sample()`\n-   `rename()`\n\n-   `arrange()`\n-   `distinct()`\n-   `count()`\n\n-   `glimpse()`\n-   `summarise()`\n-   `group_by`\n\n## `tidyr`\n\n-   `unite()`\n-   `separate()`\n-   `pivot_longer()`\n-   `pivot_wider()`\n-   `case_when()`\n-   `nest()` \n-   `unnest()` \n\n## `skimr`\n\n- `skim()`\n\n:::\n\n# Complex Joins\n\nIn data analysis, combining data from different sources is often necessary. Here, we'll use `dplyr`'s join functions to merge datasets based on common keys.\n\n## Example: Merging Weather and Crop Yield Data\n\n-   `left_join()`: Includes all records from the left dataset and the matched records from the right dataset. If there is no match, the result is NA in the columns of the right dataset.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather_data <- tibble(\n  date = seq(as.Date(\"2024-04-01\"), as.Date(\"2024-10-01\"), by = \"month\"),\n  precipitation = c(20, 40, 60, 80, 50, 30, 2),\n  temperature = c(15, 18, 25, 30, 22, 16, 12)\n)\n\nforage_data <- tibble(\n  date = seq(as.Date(\"2024-04-01\"), as.Date(\"2024-10-01\"), by = \"month\"),\n  forage_yield = c(500, 1200, 3000, 4000, 2800, 1500, 0)\n)\n\n# Merge data\nleft_joined_data <- left_join(weather_data, forage_data, by = \"date\")\n```\n:::\n\n\n\n\n\n\n-   `right_join()`: Includes all records from the right dataset and the matched records from the left dataset. If there is no match, the result is NA in the columns of the left dataset.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Merge data\nright_joined_data <- right_join(weather_data, forage_data, by = \"date\")\n```\n:::\n\n\n\n\n\n\n-   `full_join()`: Includes all records when there is a match in the keys of the left or right datasets. If there is no match, the result is NA in the columns of the dataset that does not have a match.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Merge data\nfull_joined_data <- full_join(weather_data, forage_data, by = \"date\")\n```\n:::\n\n\n\n\n\n\n# Date Handling with `lubridate`\n\n![](https://lubridate.tidyverse.org/logo.png){.absolute top=\"0\" right=\"0\" height=\"25%\"}\n\nUsing `lubridate`, we can extract various date components for analysis.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather_data_dates <- weather_data %>%\n  mutate(\n    year_month_day = format(date, \"%Y_%m_%d\"),\n    day_of_year = yday(date),\n    day_of_month = mday(date),\n    week_of_year = week(date),\n    month_name = month(date, label = TRUE, abbr = FALSE)\n  )\nglimpse(weather_data_dates)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 7\nColumns: 8\n$ date           <date> 2024-04-01, 2024-05-01, 2024-06-01, 2024-07-01, 2024-0…\n$ precipitation  <dbl> 20, 40, 60, 80, 50, 30, 2\n$ temperature    <dbl> 15, 18, 25, 30, 22, 16, 12\n$ year_month_day <chr> \"2024_04_01\", \"2024_05_01\", \"2024_06_01\", \"2024_07_01\",…\n$ day_of_year    <dbl> 92, 122, 153, 183, 214, 245, 275\n$ day_of_month   <int> 1, 1, 1, 1, 1, 1, 1\n$ week_of_year   <dbl> 14, 18, 22, 27, 31, 35, 40\n$ month_name     <ord> April, May, June, July, August, September, October\n```\n\n\n:::\n:::\n\n\n\n\n\n\n# Data Cleaning with `janitor`\n\n![](https://sfirke.github.io/janitor/reference/figures/logo_small.png){.absolute top=\"0\" right=\"0\" height=\"25%\"}\n\nSometimes, datasets come with inconsistent column names, which can cause issues in analysis.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmessy_weather_data <- tibble(\n  `Date Recorded` = seq(as.Date(\"2024-04-01\"), as.Date(\"2024-10-01\"), by = \"month\"),\n  `Precipitation (mm)` = c(20, 40, 60, 80, 50, 30, 2),\n  `Temperature..(C,)` = c(15, 18, 25, 30, 22, 16, 12)\n)\n\nclean_weather_data <- messy_weather_data %>% clean_names()\nclean_weather_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 3\n  date_recorded precipitation_mm temperature_c\n  <date>                   <dbl>         <dbl>\n1 2024-04-01                  20            15\n2 2024-05-01                  40            18\n3 2024-06-01                  60            25\n4 2024-07-01                  80            30\n5 2024-08-01                  50            22\n6 2024-09-01                  30            16\n7 2024-10-01                   2            12\n```\n\n\n:::\n:::\n\n\n\n\n\n\n# Checking Data Quality\n\nAfter merging, it's crucial to check for missing values and duplicates:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_quality_summary <- full_joined_data %>%\n  summarise(across(everything(), ~ sum(is.na(.)), .names = \"missing_{.col}\"))\n\nduplicate_rows <- full_joined_data %>% get_dupes()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNo variable names specified - using all columns.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNo duplicate combinations found of: date, precipitation, temperature, forage_yield\n```\n\n\n:::\n\n```{.r .cell-code}\ndata_quality_summary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  missing_date missing_precipitation missing_temperature missing_forage_yield\n         <int>                 <int>               <int>                <int>\n1            0                     0                   0                    0\n```\n\n\n:::\n\n```{.r .cell-code}\nduplicate_rows\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 5\n# ℹ 5 variables: date <date>, precipitation <dbl>, temperature <dbl>,\n#   forage_yield <dbl>, dupe_count <int>\n```\n\n\n:::\n:::\n\n\n\n\n\n\n# Final Thoughts and Resources\n\nData wrangling is a crucial step in data analysis, ensuring datasets are clean, structured, and ready for further exploration. By leveraging `dplyr`, `tidyr`, `janitor`, and `lubridate`, we can efficiently manage and transform our data to extract meaningful insights.\n\nFor further reading and practice, consider the following resources:\n\n-   [R for Data Science](https://r4ds.had.co.nz/) by Hadley Wickham & Garrett Grolemund\n-   [tidyverse documentation](https://www.tidyverse.org/)\n-   [lubridate cheatsheet](https://evoldyn.gitlab.io/evomics-2018/ref-sheets/R_lubridate.pdf)\n-   [Data Wrangling with R](https://rstudio-conf-2020.github.io/data-wrangling/) - A comprehensive tutorial\n\nKeep practicing and experimenting with different datasets to solidify your understanding. Happy coding!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}