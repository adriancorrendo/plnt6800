{
  "hash": "707569acbec891af353984b1cd587da5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Viz II\"\nauthor: \"Dr. Adrian Correndo\"\ndate: \"2025-02-05\"\ncategories: [figures, graphics, plots, ggplot2, tidyverse, secondary-axis, annotations]\nformat:\n  html:\n    toc: true\n    toc-location: left\n    toc-depth: 4\n    number-sections: true\n    table-class: \"table table-striped table-hover\"\n  pdf:\n    number-sections: true\neditor: source\nsmooth-scroll: true\nbibliography: ../../references.bib\nlink-citations: TRUE\n---\n\n\n\n\n**Description** <br/>\n\nIn this session, weâ€™ll explore advanced visualization techniques using `ggplot2`, focusing on secondary axes, polygons for data segmentation, and mathematical annotations. These skills will help you create more dynamic and insightful visual representations.\n\n![](https://ggplot2.tidyverse.org/logo.png){.absolute top=0 right=0 height=\"25%\"}\n\n# Learning Objectives\n\nBy the end of this session, you will:\n1. Implement secondary axes for multi-variable comparisons.\n2. Use polygons to visually segment data regions.\n3. Add mathematical annotations to highlight key relationships.\n4. Refine plot aesthetics, including themes, legends, and custom annotations.\n\n**Required Packages** <br/>\n\nEnsure you have the following packages installed:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pacman)\np_load(agridat)\np_load(dplyr, tidyr)\np_load(ggplot2, patchwork, ggtext, ggrepel, ggthemes)\np_load(lubridate)\n```\n:::\n\n\n\n\n# Visualizing Weather Data with Secondary Axes\n\nIn this section, weâ€™ll visualize monthly temperature and precipitation data, using a secondary axis to compare the two variables.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create sample weather dataset\nweather_data <- data.frame(\n  Month = as.integer(1:12),\n  Temperature = c(2, 3, 5, 9, 14, 18, 21, 20, 16, 11, 6, 3),  # Monthly avg temp in Â°C\n  Precipitation = c(50, 40, 45, 60, 80, 90, 100, 95, 70, 65, 55, 50)  # Monthly precip in mm\n)\n\n# Create month (as the month name) with \"lubridate\"\nweather_data <- weather_data %>% \n  mutate(month = ymd(paste(2023, Month, \"01\", sep = \"-\")))\n\n\n# Define conversion factor\nconv_factor <- 6\n\n# Base ggplot\nweather_plot <-\n# using numbers as months\n  #ggplot(data = weather_data, aes(x = Month)) +\n# using months names\nggplot(data = weather_data, aes(x = month)) +\n  # Add geom_bar for Main Y-axis.\n  geom_bar(aes(y = Precipitation), stat = \"identity\", fill = \"steelblue\", color = \"grey25\", alpha = 0.6) +\n  geom_text(aes(label = Precipitation, y = Precipitation + 3)) +\n  # The geoms for the secondary axis are still displayed on the primay scale, so we need to adjust the scale of its units with the \"conv_factor\" we created above.\n  geom_line(aes(y = Temperature * conv_factor), color = \"red\", linewidth = 1.2) +\n  geom_point(aes(y = Temperature * conv_factor), color = \"red\", size = 3) +\n  geom_label(aes(label = Temperature, y = (Temperature * conv_factor) - 2), color = \"red\") +\n  # Adjust scale of Y-axis\n  scale_y_continuous(\n    # Main\n    limits = c(0, 140), \n    breaks = seq(0, 140, by = 20),\n    name = \"Precipitation (mm)\",\n    # Secondary\n    sec.axis = sec_axis(~ . / conv_factor, name = \"Temperature (Â°C)\", breaks = seq(0, 24, by = 2))\n  ) +\n  # Adjust scales if numeric \n  #scale_x_continuous(limits = c(0.5, 12.5), breaks = seq(1, 12, by = 1)) +\n  # Adjust x scale if it's date format\n  scale_x_date(\n    date_labels = \"%b\",       # Show abbreviated month names\n    date_breaks = \"1 month\",  # Break at every month\n  ) +\n  # Add labels\n  labs(title = \"Monthly Weather Data\", x = \"Month\", y = \"Precipitation (mm)\") +\n  # Adjust themes\n  theme_classic() +\n  theme(\n    plot.title = element_text(color = \"forestgreen\", face = \"bold\", hjust = 0.5),\n    axis.title.y.right = element_text(color = \"red\", face = \"italic\", size = rel(1)),\n    axis.text.y.right = element_text(color = \"red\"),\n    axis.title.y = element_text(color = \"steelblue\", face = \"italic\", size = rel(1))\n  )\n\nweather_plot\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_adv_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n\n## Explanation:\n- **Primary Y-axis:** Displays precipitation in mm.\n- **Secondary Y-axis:** Converts temperature to Â°C using a conversion factor.\n- **Annotations:** Temperature and precipitation values are labeled for clarity.\n\n# Using Polygons for Data Segmentation\n\nPolygons help segment and highlight specific regions in a plot, enhancing interpretability. Let's suppose we have standardized data for both temperature and precipitation for the same location over a series of 30 years for a give location.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set seed for reproducibility\nset.seed(123)\n# Create the dataframe\ndf <- data.frame(precip = rnorm(30), temp = rnorm(30), \n                 year = seq(1995, 2024, by = 1))\n\npolygon_plot <- ggplot(df) +\n  # Add annotation\n  annotate(\"rect\", xmin = -Inf, xmax = 0, ymin = -Inf, ymax = 0, fill = \"yellow\", alpha = 0.5) +\n  # Add label\n  geom_label(x = -1, y = -1, label = \"Cool and Dry\") +\n  # Repeat for the rest of the polygons\n  # Annotation\n  annotate(\"rect\", xmin = 0, xmax = Inf, ymin = -Inf, ymax = 0, fill = \"blue\", alpha = 0.5) +\n  geom_label(x = 1, y = -1, label = \"Cool and Wet\") +\n  # Annotation\n  annotate(\"rect\", xmin = 0, xmax = Inf, ymin = 0, ymax = Inf, fill = \"green\", alpha = 0.5) +\n  geom_label(x = 1, y = 1.5, label = \"Warm and Wet\") +\n  # Annotation\n  annotate(\"rect\", xmin = -Inf, xmax = 0, ymin = 0, ymax = Inf, fill = \"red\", alpha = 0.5) +\n  geom_label(x = -1, y = 1.5, label = \"Warm and Dry\") +\n  # Add data points with year values instead of symbols (geom_text vs. geom_point)\n  geom_text(aes(label = year, y = temp, x = precip)) +\n  theme_classic()\n\npolygon_plot\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_adv_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\n## Explanation:\n- **`annotate(\"rect\")`**: Creates colored polygons for each quadrant.\n- **Labels**: Descriptive labels are added to clarify each region.\n\n# Adding Mathematical Annotations\n\nAdding mathematical annotations can clarify relationships in your data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load corn dataset\ncorn_data <- agridat::lasrosas.corn\n\n# Fit linear model\nlm_fit <- lm(yield ~ nitro, data = corn_data)\n\n# Extract regression equation\nlm_eq <- paste0(\"y = \", round(coef(lm_fit)[\"(Intercept)\"], 2), \" + x \", round(coef(lm_fit)[\"nitro\"], 2))\n\n# Plot with annotation\nscatter_with_equation <- corn_data %>% \n  ggplot(aes(x = nitro, y = yield)) +\n  geom_point(color = \"blue\", alpha = 0.3) +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"red\", linetype = \"dashed\") +\n  annotate(\"text\", x = 100, y = 120, label = lm_eq, hjust = 0, color = \"red\") +\n  labs(title = \"Yield vs. Nitrogen with Regression Equation\") +\n  theme_classic()\n\nscatter_with_equation\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](08_ggplot2_adv_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n## Explanation:\n- **`lm()`** fits a linear model to the data.\n- **`annotate()`** displays the regression equation on the plot.\n\n# Conclusion\n\nIn this tutorial, youâ€™ve learned how to:\n- Use secondary axes to visualize multiple variables.\n- Segment data regions with polygons for enhanced interpretability.\n- Add mathematical annotations to highlight key relationships.\n\nThese advanced visualization techniques will elevate your data reports and improve analytical clarity. ðŸš€\n\nNext class, we will cover how to plot geographical maps with ggplot2!\n\n# Additional resources \n\nRemember to explore additional resources for more learning:\n\n1. **[ggplot2 Documentation](https://ggplot2.tidyverse.org/)** â€“ The official documentation for ggplot2 with comprehensive guides and examples.\n2. **[R Graphics Cookbook](https://r-graphics.org/)** â€“ A collection of practical recipes for creating a wide variety of graphics with ggplot2.\n3. **[The Grammar of Graphics](https://www.springer.com/gp/book/9780387245447)** by Leland Wilkinson â€“ The foundational theory behind ggplot2.\n4. **[Data Visualization: A Practical Introduction](https://socviz.co/)** by Kieran Healy â€“ An excellent resource for both beginners and advanced users.\n5. **[Tidyverse Tutorials](https://www.tidyverse.org/learn/)** â€“ Tutorials on ggplot2 and related packages in the Tidyverse ecosystem.\n6. **[R Graph Gallery](https://r-graph-gallery.com/)** â€“ A rich gallery of ggplot2 visualizations for inspiration and code snippets.\n",
    "supporting": [
      "08_ggplot2_adv_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}