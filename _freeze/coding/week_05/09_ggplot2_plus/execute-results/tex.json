{
  "hash": "a2104748de2bb432a4fa4a1eb2bcbee6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Viz III: Geographic Mapping with ggplot2\"\nauthor: \"Dr. Adrian Correndo\"\ndate: \"2025-02-07\"\ncategories: [maps, geography, ggplot2, sf, tidyverse, data-visualization, leaflet, geojson]\nformat:\n  html:\n    toc: true\n    toc-location: left\n    toc-depth: 4\n    number-sections: true\n    table-class: \"table table-striped table-hover\"\n    self-contained: true\n  pdf:\n    number-sections: true\neditor: source\nsmooth-scroll: true\nbibliography: ../../references.bib\nlink-citations: TRUE\n---\n\n\n\n\n\n\n**Description** <br/>\n\nIn this class, we will explore how to create geographic maps using `ggplot2`, `sf`, `maps`, `leaflet`, and `geojson`. We'll cover techniques for plotting data points on US and Canada maps, customizing map aesthetics, and working with spatial data.\n\n![](https://ggplot2.tidyverse.org/logo.png){.absolute top=0 right=0 height=\"25%\"}\n\n# Learning Objectives\n\nBy the end of this session, you will:\n1. Load and visualize geographic data using `sf` and `maps`.\n2. Create US and Canada maps using `ggplot2`.\n3. Overlay data points on maps using geographic coordinates.\n4. Customize map aesthetics for professional presentations.\n5. Work with shapefiles and GeoJSON for more detailed geographic visualizations.\n6. Implement a function for plotting.\n7. Create an interactive map using `leaflet`.\n\n**Required Packages** <br/>\n\nEnsure the following packages are installed:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pacman)\np_load(ggplot2, sf, maps, dplyr, \n       ggthemes, ggrepel, leaflet, geojsonio,\n       ggspatial, ggpubr)\n```\n:::\n\n\n\n\n\n\n# Introduction to Mapping with `ggplot2` and `maps`\n\nWe will start by creating basic maps of the US and Canada using the `maps` package.\n\n## US Map with State Boundaries\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load US map data\nus_map <- map_data(\"state\")\n\n# Plot US map\nus_plot <- \n  ggplot() +\n  geom_polygon(data = us_map, aes(x = long, y = lat, group = group),\n               fill = \"grey90\", color = \"grey35\") +\n  coord_fixed(1.3) +\n  labs(title = \"Map of the United States\") +\n  theme_base()\n\nus_plot\n```\n\n::: {.cell-output-display}\n![](09_ggplot2_plus_files/figure-pdf/unnamed-chunk-2-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n\n\n## Canada Map with Provincial Boundaries\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load Canada map data\ncanada_map <- map_data(\"world\", region = \"Canada\")\n\n# Plot Canada map\ncanada_plot <- ggplot() +\n  geom_polygon(data = canada_map, aes(x = long, y = lat, group = group),\n               fill = \"steelblue\", color = \"black\") +\n  coord_fixed(1.3) +\n  labs(title = \"Map of Canada\")\n\ncanada_plot\n```\n\n::: {.cell-output-display}\n![](09_ggplot2_plus_files/figure-pdf/unnamed-chunk-3-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\ncanada_cut <- canada_plot +\n  # Cut limits of map\n  scale_y_continuous(limits = c(41, 48))+\n  scale_x_continuous(limits = c(-87, -75))+\n  theme_minimal()\n\ncanada_cut\n```\n\n::: {.cell-output-display}\n![](09_ggplot2_plus_files/figure-pdf/unnamed-chunk-3-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n\n\n# Plotting Data Points on Maps\n\nNext, we'll plot specific data points (e.g., cities) on the US and Canada maps.\n\n## Plotting Cities on US Map\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sample city data\ncities_us <- data.frame(\n  city = c(\"New Jersey\", \"New York\", \"Los Angeles\", \"Chicago\", \"Houston\", \"Phoenix\"),\n  lon = c(-74, -74.006, -118.2437, -87.6298, -95.3698, -112.074),\n  lat = c(40.9, 40.7128, 34.0522, 41.8781, 29.7604, 33.4484)\n)\n\n# Plot US map with cities\nus_plot +\n  geom_point(data = cities_us, aes(x = lon, y = lat), \n             color = \"red\", size = 3) +\n  # geom_label(data = cities_us, aes(x = lon, y = lat, label = city), \n  #                  size = 3, color = \"black\")\n  geom_label_repel(data = cities_us, aes(x = lon, y = lat, label = city), \n                    size = 3, color = \"black\")\n```\n\n::: {.cell-output-display}\n![](09_ggplot2_plus_files/figure-pdf/unnamed-chunk-4-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n\n\n## Plotting Cities on Canada Map\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sample city data for Canada\ncities_canada <- data.frame(\n  city = c(\"Toronto\", \"Vancouver\", \"Montreal\", \"Calgary\", \"Ottawa\"),\n  lon = c(-79.3832, -123.1216, -73.5673, -114.0719, -75.6972),\n  lat = c(43.6511, 49.2827, 45.5017, 51.0447, 45.4215)\n)\n\n# Plot Canada map with cities\ncanada_plot +\n  geom_point(data = cities_canada, aes(x = lon, y = lat), \n             color = \"blue\", size = 3) +\n  geom_label_repel(data = cities_canada, aes(x = lon, y = lat, label = city), \n                   size = 3, color = \"black\")\n```\n\n::: {.cell-output-display}\n![](09_ggplot2_plus_files/figure-pdf/unnamed-chunk-5-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n\n\n# Mapping with Shapefiles using `sf`\n\nFor more detailed geographic visualizations, we can use shapefiles with the `sf` package.\n\n## Loading and Plotting Shapefiles\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load shapefile (replace 'path_to_shapefile' with your actual path)\n# usa_shapefile <- st_read(\"path_to_shapefile/usa_shapefile.shp\")\n\n# Example using built-in dataset from `sf`\nnc <- st_read(system.file(\"shape/nc.shp\", package = \"sf\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `nc' from data source \n  `/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/sf/shape/nc.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 100 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965\nGeodetic CRS:  NAD27\n```\n\n\n:::\n\n```{.r .cell-code}\n# Plot shapefile\nggplot(nc) +\n  geom_sf(fill = \"lightblue\", color = \"black\") +\n  labs(title = \"Shapefile Example: North Carolina Counties\") +\n  # Adjust scales for limits\n  scale_y_continuous(limits = c(34.5, 36))+\n  scale_x_continuous(limits = c(-82, -78))+\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](09_ggplot2_plus_files/figure-pdf/unnamed-chunk-6-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n\n\n## Read shp of Canada and US\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Load shp files\nusa_shp <- st_read(\"shp_map/us/usa.shp\") %>%\n  # Remove non-contiguous and territories\n  filter(!(NAME %in% c(\"Alaska\", \"District of Columbia\", \"Hawaii\", \"Puerto Rico\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `usa' from data source \n  `/Users/acorrend/Documents/GitHub/plnt6800/coding/week_05/shp_map/us/usa.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 52 features and 9 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -179.1473 ymin: 17.88481 xmax: 179.7785 ymax: 71.35256\nGeodetic CRS:  NAD83\n```\n\n\n:::\n\n```{.r .cell-code}\ncan_shp <- st_read(\"shp_map/can/canada.shp\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `canada' from data source \n  `/Users/acorrend/Documents/GitHub/plnt6800/coding/week_05/shp_map/can/canada.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 13 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -141.0181 ymin: 41.67695 xmax: -52.5823 ymax: 89.99943\nGeodetic CRS:  NAD83\n```\n\n\n:::\n:::\n\n\n\n\n\n## Create objects for maps\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create list of selected provinces\nselected_provinces <- c(\"Ontario\", \"Manitoba\", \"Quebec\")\n\n# Define coordinates for Ontario cities\nontario_cities <- data.frame(\n  city = c(\"Toronto\", \"Ottawa\", \"Hamilton\", \"London\", \"Kingston\"),\n  lon = c(-79.3832, -75.6972, -79.8711, -81.2497, -76.4880),\n  lat = c(43.6511, 45.4215, 43.2557, 42.9834, 44.2312)\n)\n```\n:::\n\n\n\n\n\n## Define function to customize plot\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngeo_plot <- function(x, y, z, title = NULL){\n  ggplot()+\n    geom_sf(data=x, fill = \"white\", color = \"black\") + # Provinces map\n  geom_sf(data=y, fill = \"white\", color = \"black\")+ # US map\n  # Adjust scales for lat and lon\n  scale_y_continuous(limits = c(41.8, 46))+\n  scale_x_continuous(limits = c(-84, -75), breaks = seq(-84,-74, by=1)) +\n  # Add cities with points\n  geom_point(data = z, aes(x = lon, y = lat, fill = city), \n             color = \"grey25\", shape = 21, size = 3, alpha = 0.95) +\n  # Scalebar\n  annotation_scale(tick_height = 0.3)+\n  # Text Notes for names of cities\n  geom_text_repel(data = z, \n                  aes(x=lon, y=lat, label = city), size = 3)+\n  # Name of PROVINCE\n  annotate(\"text\", x = -78, y = 45, label = \"ONTARIO\", \n           size = 4, fontface = \"bold\")+\n  # Name of Lakes\n  ## Ontario\n  annotate(\"text\", x = -77.8, y = 43.7, label = \"Lake Ontario\", \n           size = 3, fontface = \"italic\")+\n  ## Huron \n  annotate(\"text\", x = -82.5, y = 44.5, label = \"Lake \\nHuron\", \n           size = 3, fontface = \"italic\")+\n  # Add labels\n  labs(title = title, \n       x = \"Longitude\", y = \"Latitude\")+\n  # Adjust theme\n  theme_base()+\n  # reduce axis text size\n  theme(\n    panel.background = element_rect(fill = \"#bde0fe\"),\n    title = element_text(size = rel(.7)),\n    axis.title =  element_text(size = rel(.9), face = \"bold\"),\n    axis.text = element_text(size = rel(.5))\n    )\n}\n```\n:::\n\n\n\n\n\n## Plot\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot from function\ngeo_plot(x = can_shp, y = usa_shp, z = ontario_cities, \n         title = \"Ontario Map from SHP\")\n```\n\n::: {.cell-output-display}\n![](09_ggplot2_plus_files/figure-pdf/unnamed-chunk-10-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n\n\n# Working with GeoJSON Data\n\nWe can use GeoJSON files for geographic data. Here’s how to load and visualize a GeoJSON file for Ontario, Canada.\n\n## Loading  GeoJSON Data\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load Canada GeoJSON (replace with actual file path if available)\n# Read geojson for Canada\ncan_geojson <- read_sf(\"geojson_maps/canada_provinces.geojson\")  %>%  \n  # dplyr::filter(name == \"Ontario\")  %>% \n  dplyr::filter(name %in% selected_provinces)  %>% \n  dplyr::mutate(Province = name, \n                GEOID = cartodb_id)  %>%  \n  dplyr::select(GEOID, Province, geometry)\n\n# Read geojson for US\nusa_geojson <- read_sf(\"geojson_maps/us-states.json\")\n```\n:::\n\n\n\n\n\n## Plot GEOJSON\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot from function\ngeo_plot(x = can_geojson, y = usa_geojson, z = ontario_cities, \n         title = \"Ontario Map from GEOJSON\")\n```\n\n::: {.cell-output-display}\n![](09_ggplot2_plus_files/figure-pdf/unnamed-chunk-12-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n\n\n## Explanation:\n- **`geojson_read()`**: Reads the GeoJSON file.\n- **`st_as_sf()`**: Converts the data into an `sf` object for plotting.\n- **`geom_sf()`**: Plots the GeoJSON data.\n\n# Creating Interactive Maps with `leaflet`\n\n`leaflet` allows us to create interactive maps. Let's create a map of Ontario, Canada.\n\n## Ontario Map with `leaflet`\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create interactive map\nontario_cities %>%\nleaflet() %>%\n  addTiles() %>%\n# Add PINS\naddMarkers(~lon, ~lat, popup = ~city) %>%\naddCircleMarkers(~lon, ~lat, popup = ~city, radius = 5, color = \"gold\",\n                  fillOpacity = 0.7) %>%\n# Configure initial view of the map\nsetView(lng = -80, lat = 44, zoom = 6)\n```\n\n::: {.cell-output-display}\n![](09_ggplot2_plus_files/figure-pdf/unnamed-chunk-13-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n\n\n## Explanation:\n- **`addTiles()`**: Adds the base map layer.\n- **`addMarkers()`**: Plots city locations with popups displaying city names.\n- **`setView()`**: Centers the map on Toronto with a specified zoom level.\n\n# Conclusion\n\nIn this lesson, you learned how to:\n- Create geographic maps of the US and Canada using `ggplot2` and `maps`.\n- Plot data points on maps with latitude and longitude coordinates.\n- Use shapefiles and GeoJSON for more detailed geographic visualizations with `sf`.\n- Customize map aesthetics for clearer and more professional presentations.\n- Create interactive maps using `leaflet`.\n\nThese techniques are valuable for visualizing spatial data and can be adapted for a wide range of research applications.\n\n# Additional Resources\n\n1. **[ggplot2 Documentation](https://ggplot2.tidyverse.org/)** – Official documentation for creating maps and more.\n2. **[sf Package Documentation](https://r-spatial.github.io/sf/)** – Guide to handling spatial data in R.\n3. **[R Maps Package](https://cran.r-project.org/web/packages/maps/index.html)** – Reference for basic map data.\n4. **[Leaflet for R](https://rstudio.github.io/leaflet/)** – Documentation for interactive mapping in R.\n5. **[GeoJSON Data and Tools](https://geojson.io/)** – Create and explore GeoJSON data.\n6. **[R Spatial Data Science](https://rspatial.org/)** – Tutorials and resources for spatial data analysis.\n7. **[R Graph Gallery - Maps](https://r-graph-gallery.com/map.html)** – Examples of different map types using R.\n\nExperiment with different datasets and explore additional map customizations to further enhance your visualizations! 🚀\n",
    "supporting": [
      "09_ggplot2_plus_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}