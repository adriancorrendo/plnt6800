{
  "hash": "c181bd2480532dea38a116e5fa1e6ff8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Non-Linear Regression with R\"\nauthor: \"Dr. Adrian Correndo\"\ndate: \"2025-03-14\" \ncategories: [nonlinear models, R, statistics, agriculture] \nabstract-title: 'Summary' \nabstract: 'This tutorial provides an overview of non-linear regression models in R using agricultural data. We will explore different non-linear models, their applications, and how to implement them with both `nls()` and `nlme()` functions.'\nformat: \n  html:\n    toc: true\n    toc-location: left \n    toc-depth: 4 \n    number-sections: true \n    table-class: \"table table-striped table-hover\" \n    editor: source \nexecute: \n  echo: true \n  warning: false \n  message: false \nsmooth-scroll: true \nbibliography: references.bib \nlink-citations: TRUE\n---\n\n\n\n\n\n\n# Introduction\n\nNon-linear regression is a statistical technique used to model relationships that cannot be well-represented by a straight line. Unlike linear regression, which assumes a constant rate of change, non-linear models accommodate curves and complex relationships in data.\n\nThis tutorial will:\n\n- Introduce the concept of non-linear regression. <br/>\n- Show how to fit non-linear models in R using `nls()` and `nlme()`. <br/>\n- Try the minpack.lm package for starting values. <br/>\n- Conduct model selection using AIC and AICc. <br/>\n- Apply these concepts to the `agridat::lasrosas.corn` dataset. <br/>\n\n## Why Non-Linear Regression?\n\nMany real-world relationships are inherently non-linear. Examples include:\n\n- Growth models (e.g., exponential or power functions).\n- Yield response to fertilizers.\n- Enzyme kinetics in biological systems.\n\n**Required packages for today**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load necessary libraries\nlibrary(pacman)\np_load(dplyr, tidyr) # data wrangling\np_load(ggplot2) #plots\np_load(agridat) # dataset\np_load(nls, nlme) # non-linear models\np_load(minpack.lm) # convergence help for nl models\np_load(AICcmodavg) # corrected AIC performance\np_load(soiltestcorr) # nl models for soil fertility\n```\n:::\n\n\n\n\n# Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load dataset\ndata_corn <- agridat::lasrosas.corn %>% \n  mutate(topo = as.factor(topo),\n         year = as.factor(year)) \n\n# Inspect data\nhead(data_corn)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  year       lat      long yield nitro topo     bv rep nf\n1 1999 -33.05113 -63.84886 72.14 131.5    W 162.60  R1 N5\n2 1999 -33.05115 -63.84879 73.79 131.5    W 170.49  R1 N5\n3 1999 -33.05116 -63.84872 77.25 131.5    W 168.39  R1 N5\n4 1999 -33.05117 -63.84865 76.35 131.5    W 176.68  R1 N5\n5 1999 -33.05118 -63.84858 75.55 131.5    W 171.46  R1 N5\n6 1999 -33.05120 -63.84851 70.24 131.5    W 170.56  R1 N5\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(data_corn)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   year           lat              long            yield       \n 1999:1738   Min.   :-33.05   Min.   :-63.85   Min.   : 12.66  \n 2001:1705   1st Qu.:-33.05   1st Qu.:-63.85   1st Qu.: 54.54  \n             Median :-33.05   Median :-63.85   Median : 66.63  \n             Mean   :-33.05   Mean   :-63.85   Mean   : 69.83  \n             3rd Qu.:-33.05   3rd Qu.:-63.84   3rd Qu.: 84.69  \n             Max.   :-33.05   Max.   :-63.84   Max.   :117.90  \n     nitro        topo            bv         rep        nf     \n Min.   :  0.00   E : 730   Min.   : 91.74   R1:1147   N0:573  \n 1st Qu.: 29.00   HT: 785   1st Qu.:168.48   R2:1147   N1:577  \n Median : 66.00   LO: 885   Median :173.08   R3:1149   N2:571  \n Mean   : 64.57   W :1043   Mean   :174.42             N3:575  \n 3rd Qu.:106.00             3rd Qu.:179.39             N4:572  \n Max.   :131.50             Max.   :213.82             N5:575  \n```\n\n\n:::\n:::\n\n\n\n\n\n## Visualizing the Data\n\nTo determine if a non-linear model is needed, we first visualize the data:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Global scatter plot\nggplot(data_corn, aes(x = nitro, y = yield)) +\n  geom_point() +\n  geom_smooth()+\n  labs(title = \"Corn Yield vs Nitrogen\", x = \"Nitrogen (kg/ha)\", y = \"Yield (tons/ha)\")\n```\n\n::: {.cell-output-display}\n![](models_06_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Grouped scatter plot\nggplot(data_corn, aes(x = nitro, y = yield)) +\n  geom_point(aes(color = topo, shape = year)) +\n  geom_smooth(aes(color = topo, linetype = year), se=F)+\n  labs(title = \"Corn Yield vs Nitrogen\", x = \"Nitrogen (kg/ha)\", y = \"Yield (tons/ha)\")\n```\n\n::: {.cell-output-display}\n![](models_06_files/figure-html/unnamed-chunk-3-2.png){width=672}\n:::\n:::\n\n\n\n\n# Fitting a Non-Linear Model using `nls()`\n\nWe fit an **Exponential Growth Model**:\n\n$$Y = a X^b$$\n\nwhere:\n\n- $(Y)$ is the yield.\n- $(X)$ is the nitrogen applied.\n- $a$ and $b$ are parameters to estimate.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fit the model with nls\nnls_model <- nls(yield ~ a * nitro^b, data = data_corn,\n                 start = list(a = 50, b = 0.05))\n\n# Summary of the model\nsummary(nls_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nFormula: yield ~ a * nitro^b\n\nParameters:\n  Estimate Std. Error t value Pr(>|t|)    \na 55.71691    4.33102  12.865  < 2e-16 ***\nb  0.05641    0.01811   3.116  0.00185 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 32.99 on 3441 degrees of freedom\n\nNumber of iterations to convergence: 3 \nAchieved convergence tolerance: 1.209e-07\n```\n\n\n:::\n:::\n\n\n\n\n# Fitting a Non-Linear Mixed Model using `nlme()`\n\nThe idea here is to be able to account for variability among replicates (`rep`), so we extend our model to:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fit the model with nlme\nnlme_model <- nlme(yield ~ a * nitro^b,\n                   data = data_corn,\n                   fixed = a + b ~ 1,\n                   random = a ~ 1 | rep,\n                   start = c(a = coef(nls_model)[[1]], b = coef(nls_model)[[2]]) )\n    \n\n# Summary of the model\nsummary(nlme_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNonlinear mixed-effects model fit by maximum likelihood\n  Model: yield ~ a * nitro^b \n  Data: data_corn \n       AIC      BIC    logLik\n  33852.62 33877.19 -16922.31\n\nRandom effects:\n Formula: a ~ 1 | rep\n                  a Residual\nStdDev: 0.001414344 32.98493\n\nFixed effects:  a + b ~ 1 \n     Value Std.Error   DF  t-value p-value\na 55.71691  4.331020 3439 12.86461  0.0000\nb  0.05641  0.018106 3439  3.11551  0.0019\n Correlation: \n  a     \nb -0.994\n\nStandardized Within-Group Residuals:\n         Min           Q1          Med           Q3          Max \n-1.567168803 -0.383887822  0.003849285  0.919014405  3.299688776 \n\nNumber of Observations: 3443\nNumber of Groups: 3 \n```\n\n\n:::\n\n```{.r .cell-code}\nAIC(nls_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 33850.62\n```\n\n\n:::\n\n```{.r .cell-code}\nAIC(nlme_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 33852.62\n```\n\n\n:::\n:::\n\n\n\n## only topo\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnlme_model_topo <- nlme(yield ~ a * nitro^b,\n                         data = data_corn,\n                         fixed = a + b ~ topo,\n                         random = a + b ~ 1 | rep,\n                         start = c(a_Intercept = 1, b_Intercept = 0.5, \n                                   a_HT = 0, a_LO = 0, a_W = 0, \n                                   b_HT = 0, b_LO = 0, b_W = 0))\nsummary(nlme_model_topo)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNonlinear mixed-effects model fit by maximum likelihood\n  Model: yield ~ a * nitro^b \n  Data: data_corn \n       AIC      BIC    logLik\n  33377.94 33451.67 -16676.97\n\nRandom effects:\n Formula: list(a ~ 1, b ~ 1)\n Level: rep\n Structure: General positive-definite, Log-Cholesky parametrization\n              StdDev       Corr  \na.(Intercept) 4.358860e-01 a.(In)\nb.(Intercept) 5.329321e-09 0.475 \nResidual      3.071279e+01       \n\nFixed effects:  a + b ~ topo \n                  Value Std.Error   DF   t-value p-value\na.(Intercept)  65.83564  9.195307 3433  7.159700  0.0000\na.topoHT      -25.49439 12.649071 3433 -2.015515  0.0439\na.topoLO        1.40690 12.133727 3433  0.115949  0.9077\na.topoW       -12.09268 11.787969 3433 -1.025849  0.3050\nb.(Intercept)   0.04413  0.032635 3433  1.352101  0.1764\nb.topoHT        0.00672  0.060009 3433  0.112046  0.9108\nb.topoLO        0.01297  0.042594 3433  0.304426  0.7608\nb.topoW         0.01019  0.045655 3433  0.223244  0.8234\n Correlation: \n              a.(In) a.tpHT a.tpLO a.topW b.(In) b.tpHT b.tpLO\na.topoHT      -0.726                                          \na.topoLO      -0.757  0.550                                   \na.topoW       -0.779  0.567  0.591                            \nb.(Intercept) -0.993  0.722  0.753  0.775                     \nb.topoHT       0.540 -0.966 -0.409 -0.421 -0.544              \nb.topoLO       0.761 -0.553 -0.994 -0.594 -0.766  0.417       \nb.topoW        0.710 -0.516 -0.538 -0.989 -0.715  0.389  0.548\n\nStandardized Within-Group Residuals:\n       Min         Q1        Med         Q3        Max \n-1.5734100 -0.3300691  0.0845198  0.6716186  3.5438008 \n\nNumber of Observations: 3443\nNumber of Groups: 3 \n```\n\n\n:::\n\n```{.r .cell-code}\ncoef(nlme_model_topo)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   a.(Intercept)  a.topoHT a.topoLO   a.topoW b.(Intercept)    b.topoHT\nR1      65.65141 -25.49439 1.406899 -12.09268    0.04412586 0.006723821\nR2      65.72720 -25.49439 1.406899 -12.09268    0.04412586 0.006723821\nR3      66.12830 -25.49439 1.406899 -12.09268    0.04412586 0.006723821\n     b.topoLO    b.topoW\nR1 0.01296678 0.01019221\nR2 0.01296678 0.01019221\nR3 0.01296678 0.01019221\n```\n\n\n:::\n\n```{.r .cell-code}\n# Some components of broom mixed doesn't work yet for non-linear models\n# broom.mixed::tidy(nlme_model_topo)\n```\n:::\n\n\n\n## only year\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnlme_model_year <- nlme(yield ~ a * nitro^b,\n                         data = data_corn,\n                         fixed = a + b ~ year,\n                         random = a + b ~ 1 | rep,\n                         start = c(a_Intercept = 50, b_Intercept = 0.05, \n                                   a_2001 = 0, b_2001 = 0))\n```\n:::\n\n\n\n\n## topo + year\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnlme_model_topoyear <- nlme(yield ~ a * nitro^b,\n                         data = data_corn,\n                         fixed = a + b ~ topo + year,\n                         random = a + b ~ 1 | rep,\n                         start = c(a_Intercept = 50, b_Intercept = 0.05, \n                                       a_HT = 0, a_LO = 0, a_W = 0, a_2001 = 0, \n                                       b_HT = 0, b_LO = 0, b_W = 0, b_2001 = 0))\n```\n:::\n\n\n\n## minpack.lm\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fit using nlsLM() instead of nls()\nnls_fit <- nlsLM(yield ~ a * nitro^b, \n                 data = data_corn, \n                 start = list(a = 10, b = 0.8)) \n\n# Extract better initial estimates\ncoef(nls_fit)\n\nnlme_model_topoyear <- nlme(yield ~ a * nitro^b, \n                             data = data_corn, \n                             fixed = a + b ~ topo + year, \n                             random = a + b ~ 1 | rep, \n                             start = c(a_Intercept = coef(nls_fit)[1], \n                                       b_Intercept = coef(nls_fit)[2], \n                                       a_HT = 0.5, a_LO = -0.5, a_W = 0.8, a_2001 = 0.3, \n                                       b_HT = 0.1, b_LO = -0.1, b_W = 0.2, b_2001 = 0.05))\n```\n:::\n\n\n\n\n\n\n\n## topo*year\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnlme_model_interaction <- nlme(yield ~ a * nitro^b,\n                                data = data_corn,\n                                fixed = a + b ~ topo * year, \n                                random = a + b ~ 1 | rep,\n                                start = c(a_Intercept = 1, b_Intercept = 0.5, \n                                          a_HT = 0, a_LO = 0, a_W = 0, a_2001 = 0, \n                                          a_HT_2001 = 0, a_LO_2001 = 0, a_W_2001 = 0,\n                                          b_HT = 0, b_LO = 0, b_W = 0, b_2001 = 0, \n                                          b_HT_2001 = 0, b_LO_2001 = 0, b_W_2001 = 0))\nsummary(nlme_model_interaction)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNonlinear mixed-effects model fit by maximum likelihood\n  Model: yield ~ a * nitro^b \n  Data: data_corn \n       AIC      BIC    logLik\n  33089.36 33212.24 -16524.68\n\nRandom effects:\n Formula: list(a ~ 1, b ~ 1)\n Level: rep\n Structure: General positive-definite, Log-Cholesky parametrization\n              StdDev       Corr  \na.(Intercept) 4.218854e-01 a.(In)\nb.(Intercept) 5.341360e-09 0.423 \nResidual      2.938401e+01       \n\nFixed effects:  a + b ~ topo * year \n                      Value Std.Error   DF   t-value p-value\na.(Intercept)      55.24845 11.382004 3425  4.854018  0.0000\na.topoHT          -18.91198 14.663476 3425 -1.289734  0.1972\na.topoLO            5.95162 15.329161 3425  0.388255  0.6979\na.topoW            -4.92420 14.134876 3425 -0.348373  0.7276\na.year2001         34.48361 19.939592 3425  1.729404  0.0838\na.topoHT:year2001 -25.47476 26.755473 3425 -0.952133  0.3411\na.topoLO:year2001 -13.67997 25.911191 3425 -0.527956  0.5976\na.topoW:year2001  -24.38799 25.267053 3425 -0.965209  0.3345\nb.(Intercept)       0.04102  0.048357 3425  0.848201  0.3964\nb.topoHT            0.05674  0.076614 3425  0.740538  0.4590\nb.topoLO           -0.00215  0.062256 3425 -0.034577  0.9724\nb.topoW             0.02704  0.061999 3425  0.436191  0.6627\nb.year2001         -0.03186  0.064449 3425 -0.494372  0.6211\nb.topoHT:year2001  -0.06188  0.117790 3425 -0.525302  0.5994\nb.topoLO:year2001   0.04040  0.083879 3425  0.481585  0.6301\nb.topoW:year2001   -0.00726  0.090420 3425 -0.080283  0.9360\n Correlation: \n                  a.(In) a.tpHT a.tpLO a.topW a.2001 a.HT:2 a.LO:2 a.W:20\na.topoHT          -0.776                                                 \na.topoLO          -0.742  0.576                                          \na.topoW           -0.805  0.625  0.598                                   \na.year2001        -0.571  0.443  0.424  0.459                            \na.topoHT:year2001  0.425 -0.548 -0.316 -0.342 -0.745                     \na.topoLO:year2001  0.439 -0.341 -0.592 -0.354 -0.770  0.573              \na.topoW:year2001   0.450 -0.349 -0.334 -0.559 -0.789  0.588  0.607       \nb.(Intercept)     -0.992  0.770  0.737  0.799  0.566 -0.422 -0.436 -0.447\nb.topoHT           0.626 -0.971 -0.465 -0.504 -0.357  0.532  0.275  0.282\nb.topoLO           0.771 -0.598 -0.991 -0.620 -0.440  0.328  0.586  0.347\nb.topoW            0.774 -0.601 -0.574 -0.991 -0.442  0.329  0.340  0.555\nb.year2001         0.744 -0.578 -0.553 -0.599 -0.965  0.719  0.743  0.762\nb.topoHT:year2001 -0.407  0.632  0.302  0.328  0.528 -0.945 -0.406 -0.417\nb.topoLO:year2001 -0.572  0.444  0.735  0.461  0.741 -0.553 -0.972 -0.585\nb.topoW:year2001  -0.531  0.412  0.394  0.680  0.688 -0.513 -0.529 -0.969\n                  b.(In) b.tpHT b.tpLO b.topW b.2001 b.HT:2 b.LO:2\na.topoHT                                                          \na.topoLO                                                          \na.topoW                                                           \na.year2001                                                        \na.topoHT:year2001                                                 \na.topoLO:year2001                                                 \na.topoW:year2001                                                  \nb.(Intercept)                                                     \nb.topoHT          -0.631                                          \nb.topoLO          -0.777  0.490                                   \nb.topoW           -0.780  0.492  0.606                            \nb.year2001        -0.750  0.474  0.583  0.585                     \nb.topoHT:year2001  0.411 -0.650 -0.319 -0.320 -0.547              \nb.topoLO:year2001  0.577 -0.364 -0.742 -0.450 -0.768  0.420       \nb.topoW:year2001   0.535 -0.338 -0.415 -0.686 -0.713  0.390  0.548\n\nStandardized Within-Group Residuals:\n        Min          Q1         Med          Q3         Max \n-1.66304432 -0.12672025  0.07029809  0.35912890  3.70405544 \n\nNumber of Observations: 3443\nNumber of Groups: 3 \n```\n\n\n:::\n:::\n\n\n\n# Model selection\n## AIC:\nWe can use the Akaike Information Criterion (AIC).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get \nAIC(nlme_model, nlme_model_topo, nlme_model_interaction)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                       df      AIC\nnlme_model              4 33852.62\nnlme_model_topo        12 33377.94\nnlme_model_interaction 20 33089.36\n```\n\n\n:::\n:::\n\n\n\n\n## AICc:\n\nWhen comparing different nonlinear models, it is essential to use an objective model selection criterion. One of the most commonly used criteria is the **Akaike Information Criterion (AIC)** and its corrected version **AICc**.\n\n**Why Use AICc Instead of AIC?**\n\nAIC is widely used for model comparison, but it has a known bias when applied to small sample sizes or when the number of parameters (`K`) is large relative to the sample size (`n`). **AICc** corrects for this bias by adding a small-sample penalty:\n\n$$\nAICc = AIC + \\frac{2K(K+1)}{n-K-1}\n$$\n\nWhere:\n\n**AIC** is the standard Akaike Information Criterion: $\\(AIC = -2 \\log L + 2K\\)$ <br/>\n**K** is the number of estimated parameters <br/>\n**n** is the sample size <br/>\n\nThus, when `n` is large, **AICc ≈ AIC**, but for small datasets, **AICc penalizes overfitting more effectively**.\n\n## Delta AICc and AICc Weights\n\nTo compare models, we use **Delta AICc (ΔAICc)** and **AICc weights**:\n\n- **ΔAICc**: The difference between each model's AICc and the lowest AICc value.\n- A model with **ΔAICc = 0** is the **best** model.\n- Models with **ΔAICc < 2** have substantial support.\n- **ΔAICc > 10** means the model has little support.\n- **AICc weight (wAICc)**: Measures the **relative likelihood** of each model given the data.\n- A **higher weight** means the model is more likely to be the best model.\n- The weights sum to **1**, allowing for direct comparison of model likelihoods.\n\n## Using `AICcmodavg` in R\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Run them separatedly\nAICcmodavg::AICc(nlme_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 33852.63\n```\n\n\n:::\n\n```{.r .cell-code}\nAICcmodavg::AICc(nlme_model_topo)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 33378.03\n```\n\n\n:::\n\n```{.r .cell-code}\nAICcmodavg::AICc(nlme_model_interaction)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 33089.6\n```\n\n\n:::\n:::\n\n\n\n\nThe `AICcmodavg` package provides functions for model selection:\n### Compare Models Using `aictab()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a list of candidate models\nmodel_list <- list(\n  simple = nlme_model,\n  topo = nlme_model_topo,\n  interaction = nlme_model_interaction\n)\n\n# Model selection table\nmodel_selection <- aictab(cand.set = model_list, modnames = names(model_list))\n\nmodel_selection\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nModel selection based on AICc:\n\n             K     AICc Delta_AICc AICcWt Cum.Wt        LL\ninteraction 20 33089.60       0.00      1      1 -16524.68\ntopo        12 33378.03     288.43      0      1 -16676.97\nsimple       4 33852.63     763.03      0      1 -16922.31\n```\n\n\n:::\n:::\n\n\n\n\nThis will output a table with:\n\n- **AICc** values for each model\n- **ΔAICc** (relative difference)\n- **AICc weights** (relative model support)\n\n## Conclusion\n\n- **AICc is preferred over AIC** when sample sizes are small.\n- **ΔAICc helps identify the best model** and evaluate model differences.\n- **AICc weights allow comparison** of model likelihoods.\n- The `AICcmodavg` package makes it easy to apply AICc-based model selection in R.\n\nBy using AICc, we can objectively choose the best model while avoiding overfitting. 🚀\n\n# Visualization\n\nThe estimated parameters $a$ and $b$ tell us how yield responds to nitrogen application. We can visualize the fitted models:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a new data frame for predictions\n# the function \"expand.grid\" is a great alternative to cross factor levels\nnew_df <- expand.grid(nitro = seq(min(data_corn$nitro), max(data_corn$nitro), by=1),\n                      rep = unique(data_corn$rep),\n                      topo = unique(data_corn$topo),\n                      year = unique(data_corn$year))\n\n# Predictions for each model\nnew_preds <- new_df %>% \n  mutate(yield_nls = predict(nls_model, newdata = new_df),\n         yield_nlme = predict(nlme_model, newdata = new_df),\n         yield_nlme_topo = predict(nlme_model_topo, newdata = new_df, level = 0),\n         yield_nlme_interaction = predict(nlme_model_interaction, newdata = new_df, level = 0) )\n\n# Global\nggplot(data_corn, aes(x = nitro, y = yield, color = topo, shape = as.factor(year))) +\n  geom_point() +\n  geom_line(data = new_preds, aes(x = nitro, y = yield_nls, linetype = \"nls\"), color = \"black\", linewidth = 2) +\n  geom_line(data = new_preds, aes(x = nitro, y = yield_nls, linetype = \"nls\"), color = \"black\", linewidth = 2) +\n  labs(title = \"Nonlinear Regression Fit (nls or nlme)\", x = \"Nitrogen (kg/ha)\", y = \"Yield (tons/ha)\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](models_06_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Topography\nggplot(data_corn, aes(x = nitro, y = yield, color = topo, shape = as.factor(year))) +\n  geom_point() +\n  geom_line(data = new_preds, aes(x = nitro, y = yield_nls, linetype = \"nls\"), color = \"black\", linewidth = 2) +\n  geom_line(data = new_preds, aes(x = nitro, y = yield_nlme_topo, linetype = \"nlme topo\")) +\n  labs(title = \"Model by Topography\", x = \"Nitrogen (kg/ha)\", y = \"Yield (tons/ha)\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](models_06_files/figure-html/unnamed-chunk-14-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# Interaction\nggplot(data_corn, aes(x = nitro, y = yield, color = topo, shape = as.factor(year))) +\n  geom_point() +\n  geom_line(data = new_preds, aes(x = nitro, y = yield_nls, linetype = \"nls\"), color = \"black\", linewidth = 2) +\n  geom_line(data = new_preds, aes(x = nitro, y = yield_nlme_interaction, linetype = \"nlme interaction\")) +\n  labs(title = \"Model by Topography*Year\", x = \"Nitrogen (kg/ha)\", y = \"Yield (tons/ha)\") +\n  facet_wrap(~year) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](models_06_files/figure-html/unnamed-chunk-14-3.png){width=672}\n:::\n:::\n\n\n\n\n# Other alternatives\nSome packages try to help with the fitting of models that are used for specific field. For example, the `soiltestcorr` package is designed to help with the regression model fitting for relationships between relative yield and soil test values.\n## soiltestcorr\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example dataset\nsoilfert_data <- soiltestcorr::data_test\n\n# Mitscherlich\nsoiltestcorr::mitscherlich(data = soilfert_data, stv = STV, ry = RY, plot = F)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 13\n  asymptote     b curvature equation  y_intercept target  CSTV   AIC  AICc   BIC\n      <dbl> <dbl>     <dbl> <chr>           <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl>\n1      98.0  3.91    0.0885 98(1-e^(…        28.6     95  35.5 1022. 1022. 1033.\n# ℹ 3 more variables: R2 <dbl>, RMSE <dbl>, pvalue <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nsoiltestcorr::mitscherlich(data = soilfert_data, stv = STV, ry = RY, plot = TRUE)\n```\n\n::: {.cell-output-display}\n![](models_06_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Linear-plateau\nsoiltestcorr::linear_plateau(data = soilfert_data, stv = STV, ry = RY, plot = F)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 16\n  intercept slope equation    plateau  CSTV lowerCL upperCL CI_type target  STVt\n      <dbl> <dbl> <chr>         <dbl> <dbl>   <dbl>   <dbl> <chr>    <dbl> <dbl>\n1      53.7  1.55 53.7 + 1.5…    96.2  27.4      24    30.7 Wald, …   96.2  27.4\n# ℹ 6 more variables: AIC <dbl>, AICc <dbl>, BIC <dbl>, R2 <dbl>, RMSE <dbl>,\n#   pvalue <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nsoiltestcorr::linear_plateau(data = soilfert_data, stv = STV, ry = RY, plot = TRUE)\n```\n\n::: {.cell-output-display}\n![](models_06_files/figure-html/unnamed-chunk-15-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# Quadratic-plateau\nsoiltestcorr::quadratic_plateau(data = soilfert_data, stv = STV, ry = RY, plot = F)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 17\n  intercept slope quadratic equation       plateau  CSTV lowerCL upperCL CI_type\n      <dbl> <dbl>     <dbl> <chr>            <dbl> <dbl>   <dbl>   <dbl> <chr>  \n1      44.1  2.86   -0.0392 44.1 + 2.86x …    96.4  36.5    29.7    43.4 Wald C…\n# ℹ 8 more variables: target <dbl>, STVt <dbl>, AIC <dbl>, AICc <dbl>,\n#   BIC <dbl>, R2 <dbl>, RMSE <dbl>, pvalue <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nsoiltestcorr::quadratic_plateau(data = soilfert_data, stv = STV, ry = RY, plot = TRUE)\n```\n\n::: {.cell-output-display}\n![](models_06_files/figure-html/unnamed-chunk-15-3.png){width=672}\n:::\n\n```{.r .cell-code}\n# Modified Arcsine-log Calibration Curve\nsoiltestcorr::mod_alcc(data = soilfert_data, stv = STV, ry = RY, target = 95, plot = F)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 18\n      n     r RMSE_alcc AIC_alcc AIC_sma BIC_sma  p_value confidence target\n  <int> <dbl>     <dbl>    <dbl>   <dbl>   <dbl>    <dbl>      <dbl>  <dbl>\n1   137 0.716      10.5    1038.   -1.04    13.6 7.31e-23       0.95     95\n# ℹ 9 more variables: CSTV <dbl>, LL <dbl>, UL <dbl>, CSTV90 <dbl>,\n#   n.90x2 <int>, CSTV100 <dbl>, n.100 <int>, Curve <list>, SMA <list>\n```\n\n\n:::\n\n```{.r .cell-code}\nsoiltestcorr::mod_alcc(data = soilfert_data, stv = STV, ry = RY, target = 95, plot = TRUE)\n```\n\n::: {.cell-output-display}\n![](models_06_files/figure-html/unnamed-chunk-15-4.png){width=672}\n:::\n:::\n\n\n\n\n### Bootstrapping\nBootstrapping is a technique introduced in late 1970’s by Bradley Efron (Efron, 1979). It is a general purpose inferential approach that is useful for robust estimations, especially when the distribution of a statistic of quantity of interest is complicated or unknown (Faraway, 2014). It provides an alternative to perform confidence statements while relaxing the famous assumption of normality (Efron and Tibshirani, 1993). The underlying concept of bootstrapping is that the inference about a population parameter (e.g. a coefficient) or quantity can be modeled by “resampling” the available data.\n\nThe soiltestcorr package has the option to automatically run bootstrapping for the above mentioned non-linear regression models. More info [here](https://adriancorrendo.github.io/soiltestcorr/articles/bootstrapping_tutorial.html)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboots_models <- soiltestcorr::boot_mod_alcc(n=10, data = soilfert_data, stv = STV, ry = RY, target = 95)\n# See results\nboots_models\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 14\n   boot_id     n     r RMSE_alcc AIC_alcc AIC_sma BIC_sma  p_value target  CSTV\n     <dbl> <int> <dbl>     <dbl>    <dbl>   <dbl>   <dbl>    <dbl>  <dbl> <dbl>\n 1       1   137 0.685      9.74    1018. -39.2    -24.6  2.46e-20     95  30.6\n 2       2   137 0.750      9.19    1003. -22.7     -8.07 4.94e-26     95  30.0\n 3       3   137 0.703     10.5     1040.  -3.99    10.6  9.54e-22     95  29.8\n 4       4   137 0.700     10.5     1040.  -2.24    12.4  1.74e-21     95  30.8\n 5       5   137 0.758     10.7     1044.   0.954   15.6  8.79e-27     95  30.3\n 6       6   137 0.679     10.3     1033. -24.3     -9.68 7.52e-20     95  30.3\n 7       7   137 0.759     10.1     1029.   6.86    21.5  6.32e-27     95  30.9\n 8       8   137 0.701     10.9     1050.   4.94    19.5  1.44e-21     95  30.0\n 9       9   137 0.690     10.0     1026.  -5.20     9.40 1.18e-20     95  30.2\n10      10   137 0.736      9.50    1012. -16.8     -2.23 1.21e-24     95  30.3\n# ℹ 4 more variables: CSTV90 <dbl>, n.90x2 <int>, CSTV100 <dbl>, n.100 <int>\n```\n\n\n:::\n:::\n\n\n\n\n# Conclusion\n\nNon-linear regression allows for flexible modeling of relationships in agricultural data. The `nls()` function in R provides a simple way to estimate non-linear models, while `nlme()` extends this by incorporating random effects for better inference. Yet, these alternatives present challenges to achieve convergence of the models due to the lack of good starting values, or simply because the model doesn't fit the data very well. There are some packages that help with specific non-linear regression models. Always keep in mind that understanding the meaning of the coeffients of the models you are trying to fit will tremendously help.\n\n",
    "supporting": [
      "models_06_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}