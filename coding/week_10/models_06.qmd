---
title: "Non-Linear Regression with R"
author: "Dr. Adrian Correndo"
date: "2025-03-14" 
categories: [nonlinear models, R, statistics, agriculture] 
abstract-title: 'Summary' 
abstract: 'This tutorial provides an overview of non-linear regression models in R using agricultural data. We will explore different non-linear models, their applications, and how to implement them with both `nls()` and `nlme()` functions.'
format: 
  html:
    toc: true
    toc-location: left 
    toc-depth: 4 
    number-sections: true 
    table-class: "table table-striped table-hover" 
    editor: source 
execute: 
  echo: true 
  warning: false 
  message: false 
smooth-scroll: true 
bibliography: references.bib 
link-citations: TRUE
---

```{r}
#| include: false
knitr::opts_chunk$set(
  echo = TRUE,
  message = FALSE,
  warning = FALSE,
  tidy = TRUE
  )
```

# Introduction

Non-linear regression is a statistical technique used to model relationships that cannot be well-represented by a straight line. Unlike linear regression, which assumes a constant rate of change, non-linear models accommodate curves and complex relationships in data.

This tutorial will:

- Introduce the concept of non-linear regression. <br/>
- Show how to fit non-linear models in R using `nls()` and `nlme()`. <br/>
- Try the minpack.lm package for starting values. <br/>
- Conduct model selection using AIC and AICc. <br/>
- Apply these concepts to the `agridat::lasrosas.corn` dataset. <br/>
- See an example of specific package to help with non-linear regression

## Why Non-Linear Regression?

Many real-world relationships are inherently non-linear. Examples include:

- Growth models (e.g., exponential or power functions).
- Yield response to fertilizers.
- Enzyme kinetics in biological systems.

**Required packages for today**
```{r}
# Load necessary libraries
library(pacman)
p_load(dplyr, tidyr) # data wrangling
p_load(ggplot2) #plots
p_load(agridat) # dataset
p_load(nls, nlme) # non-linear models
p_load(minpack.lm) # convergence help for nl models
p_load(AICcmodavg) # corrected AIC performance
p_load(soiltestcorr) # nl models for soil fertility

```

# Data
```{r data}
# Load dataset
data_corn <- agridat::lasrosas.corn %>% 
  mutate(topo = as.factor(topo),
         year = as.factor(year)) 

# Inspect data
head(data_corn)
summary(data_corn)
```


## Visualizing the Data

To determine if a non-linear model is needed, we first visualize the data:

```{r}
# Global scatter plot
ggplot(data_corn, aes(x = nitro, y = yield)) +
  geom_point() +
  geom_smooth()+
  labs(title = "Corn Yield vs Nitrogen", x = "Nitrogen (kg/ha)", y = "Yield (tons/ha)")

# Grouped scatter plot
ggplot(data_corn, aes(x = nitro, y = yield)) +
  geom_point(aes(color = topo, shape = year)) +
  geom_smooth(aes(color = topo, linetype = year), se=F)+
  labs(title = "Corn Yield vs Nitrogen", x = "Nitrogen (kg/ha)", y = "Yield (tons/ha)")
```

# Fitting a Non-Linear Model using `nls()`

We fit an **Exponential Growth Model**:

$$Y = a X^b$$

where:

- $(Y)$ is the yield.
- $(X)$ is the nitrogen applied.
- $a$ and $b$ are parameters to estimate.

```{r}
# Fit the model with nls
nls_model <- nls(yield ~ a * nitro^b, data = data_corn,
                 start = list(a = 50, b = 0.05))

# Summary of the model
summary(nls_model)
```

# Fitting a Non-Linear Mixed Model using `nlme()`

The idea here is to be able to account for variability among replicates (`rep`), so we extend our model to:

```{r}
# Fit the model with nlme
nlme_model <- nlme(yield ~ a * nitro^b,
                   data = data_corn,
                   fixed = a + b ~ 1,
                   random = a ~ 1 | rep,
                   start = c(a = coef(nls_model)[[1]], b = coef(nls_model)[[2]]) )
    

# Summary of the model
summary(nlme_model)
AIC(nls_model)
AIC(nlme_model)
```
## only topo
```{r}
nlme_model_topo <- nlme(yield ~ a * nitro^b,
                         data = data_corn,
                         fixed = a + b ~ topo,
                         random = a + b ~ 1 | rep,
                         start = c(a_Intercept = 1, b_Intercept = 0.5, 
                                   a_HT = 0, a_LO = 0, a_W = 0, 
                                   b_HT = 0, b_LO = 0, b_W = 0))
summary(nlme_model_topo)
coef(nlme_model_topo)
# Some components of broom mixed doesn't work yet for non-linear models
# broom.mixed::tidy(nlme_model_topo)
```
## only year
```{r eval=FALSE}
nlme_model_year <- nlme(yield ~ a * nitro^b,
                         data = data_corn,
                         fixed = a + b ~ year,
                         random = a + b ~ 1 | rep,
                         start = c(a_Intercept = 50, b_Intercept = 0.05, 
                                   a_2001 = 0, b_2001 = 0))

```

## topo + year
```{r eval=FALSE}
nlme_model_topoyear <- nlme(yield ~ a * nitro^b,
                         data = data_corn,
                         fixed = a + b ~ topo + year,
                         random = a + b ~ 1 | rep,
                         start = c(a_Intercept = 50, b_Intercept = 0.05, 
                                       a_HT = 0, a_LO = 0, a_W = 0, a_2001 = 0, 
                                       b_HT = 0, b_LO = 0, b_W = 0, b_2001 = 0))

```
## minpack.lm
```{r eval=FALSE}
# Fit using nlsLM() instead of nls()
nls_fit <- nlsLM(yield ~ a * nitro^b, 
                 data = data_corn, 
                 start = list(a = 10, b = 0.8)) 

# Extract better initial estimates
coef(nls_fit)

nlme_model_topoyear <- nlme(yield ~ a * nitro^b, 
                             data = data_corn, 
                             fixed = a + b ~ topo + year, 
                             random = a + b ~ 1 | rep, 
                             start = c(a_Intercept = coef(nls_fit)[1], 
                                       b_Intercept = coef(nls_fit)[2], 
                                       a_HT = 0.5, a_LO = -0.5, a_W = 0.8, a_2001 = 0.3, 
                                       b_HT = 0.1, b_LO = -0.1, b_W = 0.2, b_2001 = 0.05))
```




## topo*year
```{r}
nlme_model_interaction <- nlme(yield ~ a * nitro^b,
                                data = data_corn,
                                fixed = a + b ~ topo * year, 
                                random = a + b ~ 1 | rep,
                                start = c(a_Intercept = 1, b_Intercept = 0.5, 
                                          a_HT = 0, a_LO = 0, a_W = 0, a_2001 = 0, 
                                          a_HT_2001 = 0, a_LO_2001 = 0, a_W_2001 = 0,
                                          b_HT = 0, b_LO = 0, b_W = 0, b_2001 = 0, 
                                          b_HT_2001 = 0, b_LO_2001 = 0, b_W_2001 = 0))
summary(nlme_model_interaction)
```
# Model selection
## AIC:
We can use the Akaike Information Criterion (AIC).
```{r}
# Get 
AIC(nlme_model, nlme_model_topo, nlme_model_interaction)
```

## AICc:

When comparing different nonlinear models, it is essential to use an objective model selection criterion. One of the most commonly used criteria is the **Akaike Information Criterion (AIC)** and its corrected version **AICc**.

**Why Use AICc Instead of AIC?**

AIC is widely used for model comparison, but it has a known bias when applied to small sample sizes or when the number of parameters (`K`) is large relative to the sample size (`n`). **AICc** corrects for this bias by adding a small-sample penalty:

$$
AICc = AIC + \frac{2K(K+1)}{n-K-1}
$$

Where:

**AIC** is the standard Akaike Information Criterion: $\(AIC = -2 \log L + 2K\)$ <br/>
**K** is the number of estimated parameters <br/>
**n** is the sample size <br/>

Thus, when `n` is large, **AICc ≈ AIC**, but for small datasets, **AICc penalizes overfitting more effectively**.

## Delta AICc and AICc Weights

To compare models, we use **Delta AICc (ΔAICc)** and **AICc weights**:

- **ΔAICc**: The difference between each model's AICc and the lowest AICc value.
- A model with **ΔAICc = 0** is the **best** model.
- Models with **ΔAICc < 2** have substantial support.
- **ΔAICc > 10** means the model has little support.
- **AICc weight (wAICc)**: Measures the **relative likelihood** of each model given the data.
- A **higher weight** means the model is more likely to be the best model.
- The weights sum to **1**, allowing for direct comparison of model likelihoods.

## Using `AICcmodavg` in R
```{r}
# Run them separatedly
AICcmodavg::AICc(nlme_model)
AICcmodavg::AICc(nlme_model_topo)
AICcmodavg::AICc(nlme_model_interaction)
```

The `AICcmodavg` package provides functions for model selection:
### Compare Models Using `aictab()`

```{r}
# Create a list of candidate models
model_list <- list(
  simple = nlme_model,
  topo = nlme_model_topo,
  interaction = nlme_model_interaction
)

# Model selection table
model_selection <- aictab(cand.set = model_list, modnames = names(model_list))

model_selection

```

This will output a table with:

- **AICc** values for each model
- **ΔAICc** (relative difference)
- **AICc weights** (relative model support)

## Conclusion

- **AICc is preferred over AIC** when sample sizes are small.
- **ΔAICc helps identify the best model** and evaluate model differences.
- **AICc weights allow comparison** of model likelihoods.
- The `AICcmodavg` package makes it easy to apply AICc-based model selection in R.

By using AICc, we can objectively choose the best model while avoiding overfitting. 🚀

# Visualization

The estimated parameters $a$ and $b$ tell us how yield responds to nitrogen application. We can visualize the fitted models:

```{r}
# Create a new data frame for predictions
# the function "expand.grid" is a great alternative to cross factor levels
new_df <- expand.grid(nitro = seq(min(data_corn$nitro), max(data_corn$nitro), by=1),
                      rep = unique(data_corn$rep),
                      topo = unique(data_corn$topo),
                      year = unique(data_corn$year))

# Predictions for each model
new_preds <- new_df %>% 
  mutate(yield_nls = predict(nls_model, newdata = new_df),
         yield_nlme = predict(nlme_model, newdata = new_df),
         yield_nlme_topo = predict(nlme_model_topo, newdata = new_df, level = 0),
         yield_nlme_interaction = predict(nlme_model_interaction, newdata = new_df, level = 0) )

# Global
ggplot(data_corn, aes(x = nitro, y = yield, color = topo, shape = as.factor(year))) +
  geom_point() +
  geom_line(data = new_preds, aes(x = nitro, y = yield_nls, linetype = "nls"), color = "black", linewidth = 2) +
  geom_line(data = new_preds, aes(x = nitro, y = yield_nls, linetype = "nls"), color = "black", linewidth = 2) +
  labs(title = "Nonlinear Regression Fit (nls or nlme)", x = "Nitrogen (kg/ha)", y = "Yield (tons/ha)") +
  theme_minimal()

# Topography
ggplot(data_corn, aes(x = nitro, y = yield, color = topo, shape = as.factor(year))) +
  geom_point() +
  geom_line(data = new_preds, aes(x = nitro, y = yield_nls, linetype = "nls"), color = "black", linewidth = 2) +
  geom_line(data = new_preds, aes(x = nitro, y = yield_nlme_topo, linetype = "nlme topo")) +
  labs(title = "Model by Topography", x = "Nitrogen (kg/ha)", y = "Yield (tons/ha)") +
  theme_minimal()

# Interaction
ggplot(data_corn, aes(x = nitro, y = yield, color = topo, shape = as.factor(year))) +
  geom_point() +
  geom_line(data = new_preds, aes(x = nitro, y = yield_nls, linetype = "nls"), color = "black", linewidth = 2) +
  geom_line(data = new_preds, aes(x = nitro, y = yield_nlme_interaction, linetype = "nlme interaction")) +
  labs(title = "Model by Topography*Year", x = "Nitrogen (kg/ha)", y = "Yield (tons/ha)") +
  facet_wrap(~year) +
  theme_minimal()

```

# Other alternatives
Some packages try to help with the fitting of models that are used for specific field. For example, the `soiltestcorr` package is designed to help with the regression model fitting for relationships between relative yield and soil test values.
## soiltestcorr
```{r}
# Example dataset
soilfert_data <- soiltestcorr::data_test

# Mitscherlich
soiltestcorr::mitscherlich(data = soilfert_data, stv = STV, ry = RY, plot = F)
soiltestcorr::mitscherlich(data = soilfert_data, stv = STV, ry = RY, plot = TRUE)
# Linear-plateau
soiltestcorr::linear_plateau(data = soilfert_data, stv = STV, ry = RY, plot = F)
soiltestcorr::linear_plateau(data = soilfert_data, stv = STV, ry = RY, plot = TRUE)
# Quadratic-plateau
soiltestcorr::quadratic_plateau(data = soilfert_data, stv = STV, ry = RY, plot = F)
soiltestcorr::quadratic_plateau(data = soilfert_data, stv = STV, ry = RY, plot = TRUE)
# Modified Arcsine-log Calibration Curve
soiltestcorr::mod_alcc(data = soilfert_data, stv = STV, ry = RY, target = 95, plot = F)
soiltestcorr::mod_alcc(data = soilfert_data, stv = STV, ry = RY, target = 95, plot = TRUE)

```

### Bootstrapping
Bootstrapping is a technique introduced in late 1970’s by Bradley Efron (Efron, 1979). It is a general purpose inferential approach that is useful for robust estimations, especially when the distribution of a statistic of quantity of interest is complicated or unknown (Faraway, 2014). It provides an alternative to perform confidence statements while relaxing the famous assumption of normality (Efron and Tibshirani, 1993). The underlying concept of bootstrapping is that the inference about a population parameter (e.g. a coefficient) or quantity can be modeled by “resampling” the available data.

The soiltestcorr package has the option to automatically run bootstrapping for the above mentioned non-linear regression models. More info [here](https://adriancorrendo.github.io/soiltestcorr/articles/bootstrapping_tutorial.html)
```{r}
boots_models <- soiltestcorr::boot_mod_alcc(n=10, data = soilfert_data, stv = STV, ry = RY, target = 95)
# See results
boots_models
```

# Conclusion

Non-linear regression allows for flexible modeling of relationships in agricultural data. The `nls()` function in R provides a simple way to estimate non-linear models, while `nlme()` extends this by incorporating random effects for better inference. Yet, these alternatives present challenges to achieve convergence of the models due to the lack of good starting values, or simply because the model doesn't fit the data very well. There are some packages that help with specific non-linear regression models. Always keep in mind that understanding the meaning of the coeffients of the models you are trying to fit will tremendously help.

