[
  {
    "objectID": "coding/week_01/essentials_01.html",
    "href": "coding/week_01/essentials_01.html",
    "title": "Essentials of R coding I",
    "section": "",
    "text": "This page provides an overview of the essential types of elements in R, including examples and explanations for each. Use this as a quick reference to understand the basics of data types and operations.",
    "crumbs": [
      "Lessons",
      "01-Essentials of R"
    ]
  },
  {
    "objectID": "coding/week_01/essentials_01.html#numbers",
    "href": "coding/week_01/essentials_01.html#numbers",
    "title": "Essentials of R coding I",
    "section": "01. Numbers",
    "text": "01. Numbers\n\n20\n\n[1] 20",
    "crumbs": [
      "Lessons",
      "01-Essentials of R"
    ]
  },
  {
    "objectID": "coding/week_01/essentials_01.html#math-operations",
    "href": "coding/week_01/essentials_01.html#math-operations",
    "title": "Essentials of R coding I",
    "section": "02. Math Operations",
    "text": "02. Math Operations\n\n20+1 # addition\n\n[1] 21\n\n20-4 # subtraction\n\n[1] 16\n\n20*5 # multiplication\n\n[1] 100\n\n20/5 # division\n\n[1] 4\n\n2^2 # exponentials\n\n[1] 4\n\nsqrt(9) # square root\n\n[1] 3\n\n# Greater exponents for roots\n# notation is: x^(1/n)\n\n# Cubic root of 27\n27^(1/3)  # Result: 3\n\n[1] 3\n\n# 4th root of 16\n16^(1/4)  # Result: 2\n\n[1] 2\n\n# 5th root of 32\n32^(1/5)  # Result: 2\n\n[1] 2",
    "crumbs": [
      "Lessons",
      "01-Essentials of R"
    ]
  },
  {
    "objectID": "coding/week_01/essentials_01.html#text-or-characters-also-called-strings",
    "href": "coding/week_01/essentials_01.html#text-or-characters-also-called-strings",
    "title": "Essentials of R coding I",
    "section": "03. Text or characters (also called strings)",
    "text": "03. Text or characters (also called strings)\n\n\"coding is fun\"\n\n[1] \"coding is fun\"\n\n\nBut these elements are not stored as objects yet:",
    "crumbs": [
      "Lessons",
      "01-Essentials of R"
    ]
  },
  {
    "objectID": "coding/week_01/essentials_01.html#define-objects",
    "href": "coding/week_01/essentials_01.html#define-objects",
    "title": "Essentials of R coding I",
    "section": "04. Define objects",
    "text": "04. Define objects\n\na &lt;- 20\n10 -&gt; b\n# We can also use equal:\nc = 15\n# But using \"&lt;-\", and leave = only for operations (so you can notice the difference) is considered a better coding practice.",
    "crumbs": [
      "Lessons",
      "01-Essentials of R"
    ]
  },
  {
    "objectID": "coding/week_01/essentials_01.html#print-objects",
    "href": "coding/week_01/essentials_01.html#print-objects",
    "title": "Essentials of R coding I",
    "section": "05. Print objects",
    "text": "05. Print objects\n\na\n\n[1] 20\n\nprint(a)\n\n[1] 20\n\nb\n\n[1] 10\n\nc\n\n[1] 15",
    "crumbs": [
      "Lessons",
      "01-Essentials of R"
    ]
  },
  {
    "objectID": "coding/week_01/essentials_01.html#vectors",
    "href": "coding/week_01/essentials_01.html#vectors",
    "title": "Essentials of R coding I",
    "section": "06. Vectors",
    "text": "06. Vectors\nA vector is one of the most basic data structures. It is a sequence of elements of the same type, such as numbers, characters, or logical values. Vectors are used to store and manipulate collections of data efficiently. \n\na. Creating a vector\nVectors can be created using the c() function (combine function):\n\n# Numeric vector\nnumeric_vector &lt;- c(1, 2, 3, 4.5)\nnumeric_vector\n\n[1] 1.0 2.0 3.0 4.5\n\n# Character vector\ncharacter_vector &lt;- c(\"corn\", \"wheat\", \"soybean\")\ncharacter_vector\n\n[1] \"corn\"    \"wheat\"   \"soybean\"\n\n# Logical vector\nlogical_vector &lt;- c(TRUE, FALSE, TRUE)\nlogical_vector\n\n[1]  TRUE FALSE  TRUE\n\n\n\n\nb. Accessing Elements\nYou can access elements of a vector using square brackets []:\n\n# Access the first element\nnumeric_vector[1]\n\n[1] 1\n\n# Access multiple elements\nnumeric_vector[c(1, 3)]\n\n[1] 1 3\n\n\n\n\nc. Vectorized Operations\nIn R, vector-operations are applied to each element automatically:\n\n# Adding a scalar to a vector\nnumeric_vector + 2\n\n[1] 3.0 4.0 5.0 6.5\n\n# Element-wise addition\nnumeric_vector + c(10, 20, 30, 40)\n\n[1] 11.0 22.0 33.0 44.5\n\n\n\n\nd. Common Functions with Vectors\n\n‘length()’: Get the number of elements in a vector.\n‘typeof()’ or ‘class()’: Determine the type of elements in a vector.\n‘seq()’: Generate a sequence of numbers.\n‘rep()’: Repeat elements to create a vector.",
    "crumbs": [
      "Lessons",
      "01-Essentials of R"
    ]
  },
  {
    "objectID": "coding/week_01/essentials_01.html#lists",
    "href": "coding/week_01/essentials_01.html#lists",
    "title": "Essentials of R coding I",
    "section": "07. Lists",
    "text": "07. Lists\nIn R, a list is a versatile data structure that can contain elements of different types, including vectors, matrices, data frames, and even other lists. Unlike vectors, which are homogeneous, lists are heterogeneous, meaning their elements can be of different data types and lengths. \nKey Characteristics of Lists: \n\nHeterogeneous: Lists can store elements of varying types (numeric, character, logical, etc.) and structures (vectors, data frames, functions, etc.). \nIndexed: Elements in a list are accessed using double square brackets [[ ]] or named elements using $.\n\nWhy Use Lists? \n\nFlexibility: Lists can store complex and nested data structures. \nData Wrangling: Useful for handling results from models, nested data, or any mixed-type collections. \nFunctions: Functions in R often return their output as lists (e.g., lm()). \n\n\na. Creating a list\nLists are created using the list() function:\n\n# Create a list with different types of elements\nmy_list &lt;- list(\n  \"numeric_v\" = numeric_vector,\n  \"character_v\" = character_vector,\n  \"single_number\" = 42,\n  \"logical_value\" = TRUE\n)\n\n\n\nb. Accessing Elements in a List\nYou can access elements in a list by their position or name:\nBy Position:\n\n# Access the first element\nmy_list[[1]]\n\n[1] 1.0 2.0 3.0 4.5\n\n# Access the second element\nmy_list[[2]]\n\n[1] \"corn\"    \"wheat\"   \"soybean\"\n\n\nBy name:\n\n# Access by name\nmy_list$numeric_v\n\n[1] 1.0 2.0 3.0 4.5\n\nmy_list$character_v\n\n[1] \"corn\"    \"wheat\"   \"soybean\"\n\n\nSubelements:\n\n# Access the first value in the numeric vector\nmy_list$numeric_vector[1]\n\nNULL\n\n\n\n\nc. Some functions for lists\n\n# Number of elements in the list\nlength(my_list)\n\n[1] 4\n\n# Names of the elements\nnames(my_list)\n\n[1] \"numeric_v\"     \"character_v\"   \"single_number\" \"logical_value\"\n\n# Structure of the list\nstr(my_list)\n\nList of 4\n $ numeric_v    : num [1:4] 1 2 3 4.5\n $ character_v  : chr [1:3] \"corn\" \"wheat\" \"soybean\"\n $ single_number: num 42\n $ logical_value: logi TRUE",
    "crumbs": [
      "Lessons",
      "01-Essentials of R"
    ]
  },
  {
    "objectID": "coding/week_01/essentials_01.html#data-frame",
    "href": "coding/week_01/essentials_01.html#data-frame",
    "title": "Essentials of R coding I",
    "section": "08. Data frame",
    "text": "08. Data frame\nIn R, a data frame is a two-dimensional data structure used for storing tabular data. It is one of the most commonly used data structures in R for data analysis and manipulation. \nKey Characteristics of a Data Frame \n\nTabular Structure: Data is organized in rows and columns. \nHeterogeneous Columns: Each column can contain different data types (e.g., numeric, character, logical), but all elements in a column must be of the same type. \nRow and Column Names: Rows and columns can have names for easier identification. \n\nWhy Use a Data Frame? \n\nData Analysis: It is ideal for representing structured data like spreadsheets or databases. \nFlexible Operations: Columns can be easily added, removed, or modified. \nIntegration with R Functions: Many R functions for statistical modeling and analysis expect data frames as input. \n\n\na. Creating a Data Frame\nA data frame can be created using the data.frame() function:\n\n# Create a data frame\nmy_data &lt;- data.frame(\n  Crop = c(\"Corn\", \"Wheat\", \"Soybean\"), # Character column\n  Yield = c(180, 90, 50), # Numeric column\n  Legume = c(FALSE, FALSE, TRUE) # Logical column\n)\n\nprint(my_data)\n\n     Crop Yield Legume\n1    Corn   180  FALSE\n2   Wheat    90  FALSE\n3 Soybean    50   TRUE\n\n\n\n\nb. Accessing data in a data frame\nAccessing columns:\n\n# Access a column by name\nmy_data$Crop\n\n[1] \"Corn\"    \"Wheat\"   \"Soybean\"\n\n# Access a column by index\nmy_data[, 2]\n\n[1] 180  90  50\n\n\nAccessing rows:\n\n# Access the first row\nmy_data[1, ]\n\n  Crop Yield Legume\n1 Corn   180  FALSE\n\n# Access specific rows\nmy_data[c(1, 3), ]\n\n     Crop Yield Legume\n1    Corn   180  FALSE\n3 Soybean    50   TRUE\n\n\nAccessing specific elements\n\n# Access the element in the 2nd row, 3rd column\nmy_data[2, 3]\n\n[1] FALSE\n\n# Access specific cells by column name\nmy_data[2, \"Crop\"]\n\n[1] \"Wheat\"\n\n\n\n\nc. Adding a new column\n\nmy_data$Season &lt;- c(\"Summer\", \"Winter\", \"Summer\")\n\n\n\nd. Modify a column\n\nmy_data$Yield &lt;- my_data$Yield + 5\n\n\n\ne. Adding a new row\nIn base R, we can use rbind() to add rows:\n\nnew_row &lt;- data.frame(Crop = \"Barley\", Yield = 80, Legume = FALSE, Season = \"Winter\")\nmy_data &lt;- rbind(my_data, new_row)\n\n\n\nf. Filtering (rows)\nIn base R, we can use subset() to filter rows:\n\nsubset(my_data, Yield &gt; 150)\n\n  Crop Yield Legume Season\n1 Corn   185  FALSE Summer\n\n\nWe can also use logical conditions:\n\nmy_data[my_data$Legume == TRUE, ]\n\n     Crop Yield Legume Season\n3 Soybean    55   TRUE Summer\n\n\n\n\ng. Selecting (columns)\nIn base R, there is no function to select columns. We need to use brackets [] and vectors c():\n\nmy_data[c(\"Crop\", \"Yield\")]\n\n     Crop Yield\n1    Corn   185\n2   Wheat    95\n3 Soybean    55\n4  Barley    80\n\n\n\n\nh. Some functions for data frames\n\nnrow(my_data)        # Number of rows\n\n[1] 4\n\nncol(my_data)        # Number of columns\n\n[1] 4\n\ncolnames(my_data)    # Column names\n\n[1] \"Crop\"   \"Yield\"  \"Legume\" \"Season\"\n\nsummary(my_data)     # Summary statistics\n\n     Crop               Yield          Legume           Season         \n Length:4           Min.   : 55.00   Mode :logical   Length:4          \n Class :character   1st Qu.: 73.75   FALSE:3         Class :character  \n Mode  :character   Median : 87.50   TRUE :1         Mode  :character  \n                    Mean   :103.75                                     \n                    3rd Qu.:117.50                                     \n                    Max.   :185.00",
    "crumbs": [
      "Lessons",
      "01-Essentials of R"
    ]
  },
  {
    "objectID": "coding/week_01/essentials_01.html#matrix",
    "href": "coding/week_01/essentials_01.html#matrix",
    "title": "Essentials of R coding I",
    "section": "09. Matrix",
    "text": "09. Matrix\nIn R, a matrix is a two-dimensional, rectangular data structure that stores elements of the same type. It is similar to a data frame in structure but less flexible, as all elements in a matrix must be of a single data type (e.g., numeric, character, or logical). \nKey Characteristics of a Matrix \n\nHomogeneous: All elements in a matrix must be of the same type. \n2D Structure: A matrix has rows and columns, forming a table-like structure. \nDimensions: Defined by the number of rows and columns. \n\nWhy Use a Matrix? \n\nMathematical Operations: Ideal for linear algebra and mathematical modeling. \nEfficient Storage: Matrices use less memory compared to more complex structures like data frames. \nSimpler Operations: Homogeneous data ensures consistent behavior across elements. \n\n\na. Creating a Matrix\nYou can create a matrix using the matrix() function:\n\n# Create a numeric matrix\nmy_matrix &lt;- matrix(\n  data = 1:9,     # Data values\n  nrow = 3,       # Number of rows\n  ncol = 3,       # Number of columns\n)\n\nprint(my_matrix)\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n\n\n\nb. Accessing elements in a matrix\nAccessing rows:\n\n# Access the first row\nmy_matrix[1, ]\n\n[1] 1 4 7\n\n\nAccessing columns:\n\n# Access the second column\nmy_matrix[, 2]\n\n[1] 4 5 6\n\n\nAccessing specific elements:\n\n# Access the element in the 2nd row, 3rd column\nmy_matrix[2, 3]\n\n[1] 8\n\n\n\n\nc. Adding a new column\n\nnew_col &lt;- c(10, 11, 12) # Create the column\nmy_matrix &lt;- cbind(my_matrix, new_col) # Paste it to the existing\n\n\n\nd. Adding a new row\n\nnew_row &lt;- c(13, 14, 15, 16)\nmy_matrix &lt;- rbind(my_matrix, new_row)",
    "crumbs": [
      "Lessons",
      "01-Essentials of R"
    ]
  },
  {
    "objectID": "coding/week_01/essentials_01.html#functions",
    "href": "coding/week_01/essentials_01.html#functions",
    "title": "Essentials of R coding I",
    "section": "10. Functions",
    "text": "10. Functions\n\na. Create a function\nWe need to use the syntax function(x) { x as object of a task }. ‘x’ is considered an “argument”, and the function itself is inside the {}. For example:\n\nmy_function &lt;- function(x) { x + 1 }\n\n\n\nb. Check the function\n\nmy_function(9)\n\n[1] 10\n\n\n\n\nc. Write a function with 3 arguments\n\nmy_xyz_function &lt;- function(x, y, z) { x + y - z }\n\n\n\nd. Order of arguments\nNote: R is order sensitive (if you don’t explicitly specify the argument)\n\nmy_xyz_function(12, 3, 4)\n\n[1] 11\n\nmy_xyz_function(12, 4, 3)\n\n[1] 13\n\n\n\n\ne. Specifying arguments with names\nIf you specify the argument name as = to, the order doesn’t matter:\n\nmy_xyz_function(z = 4, x = 12, y = 3)\n\n[1] 11\n\n\n\n\nf. A more complex function\n\nfx &lt;- function(x, y, remove_na = NULL) {\n        # First operation is a sum, removing NAs\n        first &lt;- sum(c(x, y), na.rm = remove_na)\n        # Add a text message\n        text &lt;- \"This function is so cool\"\n        # Store result\n        result &lt;- first + x\n        # Print output\n        print(list(\"Message\" = text,\n                   \"1st\" = first,\n                   \"end\" = result))\n                   }\n\nRun the function with alternative arguments:\n\nfx(x = a, y = b, remove_na = FALSE)\n\n$Message\n[1] \"This function is so cool\"\n\n$`1st`\n[1] 30\n\n$end\n[1] 50\n\nfx(x = a, y = b, remove_na = TRUE)\n\n$Message\n[1] \"This function is so cool\"\n\n$`1st`\n[1] 30\n\n$end\n[1] 50\n\n\nStore the output in an object:\n\nfoo &lt;- fx(x=b, y=a)\n\n$Message\n[1] \"This function is so cool\"\n\n$`1st`\n[1] 30\n\n$end\n[1] 40",
    "crumbs": [
      "Lessons",
      "01-Essentials of R"
    ]
  },
  {
    "objectID": "coding/week_02/03_versioncontrol.html",
    "href": "coding/week_02/03_versioncontrol.html",
    "title": "🌱 Getting Started with Git and GitHub for Ag Data Science",
    "section": "",
    "text": "Have you ever struggled with:\n\nMessy file versions? 📂 Naming files like code.R, code_final.R, code_final_final.R, codefinal3.R, or code_seethis.R? 🤯\nLost in email threads? 📧 Collaborating with colleagues by sending multiple file versions via email, leading to confusion and mistakes?\nUntracked changes? 🔄 Making edits but forgetting what changed and why?\n\nIf so, you’re not alone! These are common challenges in agriculture data science and research projects. Fortunately, Git and GitHub provide an efficient way to manage and collaborate on code without the chaos.",
    "crumbs": [
      "Lessons",
      "03-Git & GitHub"
    ]
  },
  {
    "objectID": "coding/week_02/03_versioncontrol.html#install-git",
    "href": "coding/week_02/03_versioncontrol.html#install-git",
    "title": "🌱 Getting Started with Git and GitHub for Ag Data Science",
    "section": "5.1 1️⃣ Install Git",
    "text": "5.1 1️⃣ Install Git\nGit is a version control system that runs locally on your computer. To install it:\n\n📥 Download Git from git-scm.com\nFollow the installation instructions for your OS (Windows, macOS, Linux)\nOpen RStudio, go to the “Terminal” tab,\nVerify the installation by running this line:\n\ngit --version",
    "crumbs": [
      "Lessons",
      "03-Git & GitHub"
    ]
  },
  {
    "objectID": "coding/week_02/03_versioncontrol.html#create-a-github-account",
    "href": "coding/week_02/03_versioncontrol.html#create-a-github-account",
    "title": "🌱 Getting Started with Git and GitHub for Ag Data Science",
    "section": "5.2 2️⃣ Create a GitHub Account",
    "text": "5.2 2️⃣ Create a GitHub Account\nGitHub is a cloud-based platform that stores your Git repositories online.\n\n🌍 Go to GitHub and sign up.\nSet up your GitHub profile and SSH key (optional but recommended for authentication).",
    "crumbs": [
      "Lessons",
      "03-Git & GitHub"
    ]
  },
  {
    "objectID": "coding/week_02/03_versioncontrol.html#creating-a-github-repository",
    "href": "coding/week_02/03_versioncontrol.html#creating-a-github-repository",
    "title": "🌱 Getting Started with Git and GitHub for Ag Data Science",
    "section": "9.1 ✅ Creating a GitHub Repository",
    "text": "9.1 ✅ Creating a GitHub Repository\n\nOpen GitHub and click New Repository ➕.\nName the repository (e.g., my-first-repo) and choose Public or Private.\nClick Create Repository 🚀.",
    "crumbs": [
      "Lessons",
      "03-Git & GitHub"
    ]
  },
  {
    "objectID": "coding/week_02/03_versioncontrol.html#creating-an-r-script-and-committing-changes",
    "href": "coding/week_02/03_versioncontrol.html#creating-an-r-script-and-committing-changes",
    "title": "🌱 Getting Started with Git and GitHub for Ag Data Science",
    "section": "9.2 📂 Creating an R Script and Committing Changes",
    "text": "9.2 📂 Creating an R Script and Committing Changes\n\nOpen GitHub Desktop and click Clone a Repository.\nSelect your repository and choose a local directory.\nOpen RStudio and create a new file named hello.R.\nAdd the following content:\nprint(\"Hello R world!\")\nSave the file and return to GitHub Desktop.\nYou should see the file listed under Changes.\nWrite a commit message (e.g., “Added hello.R”) and click Commit to main.\nClick Push Origin to upload the changes to GitHub.",
    "crumbs": [
      "Lessons",
      "03-Git & GitHub"
    ]
  },
  {
    "objectID": "coding/week_02/03_versioncontrol.html#cloning-or-pulling-changes",
    "href": "coding/week_02/03_versioncontrol.html#cloning-or-pulling-changes",
    "title": "🌱 Getting Started with Git and GitHub for Ag Data Science",
    "section": "9.3 🔄 Cloning or Pulling Changes",
    "text": "9.3 🔄 Cloning or Pulling Changes\n\nIf you want to work on an existing repository, click Clone Repository in GitHub Desktop.\nSelect a repository and choose a local directory.\nIf changes have been made remotely, click Fetch Origin and then Pull Origin to update your local version.",
    "crumbs": [
      "Lessons",
      "03-Git & GitHub"
    ]
  },
  {
    "objectID": "outline/calendar.html",
    "href": "outline/calendar.html",
    "title": "PLNT6800|01 - Calendar",
    "section": "",
    "text": "Days: Wednesdays and Fridays\nTime: 1:00 pm - 2:20 pm\nLocation: CRSC 202",
    "crumbs": [
      "Calendar",
      "Schedule"
    ]
  },
  {
    "objectID": "outline/calendar.html#calendar",
    "href": "outline/calendar.html#calendar",
    "title": "PLNT6800|01 - Calendar",
    "section": "Calendar",
    "text": "Calendar\nThe course runs on Wednesdays and Fridays from 1:00 PM to 2:20 PM. Below is the tentative schedule. Please, note the schedule may vary depending on the progress of the class.\n\n\n\nWeek\nDate\nTopic\nCode\nLesson\n\n\n\n\n1\nJan 8\nIntroductions, Reproducibility\n-\n-\n\n\n\nJan 10\nEssentials of RStudio, R coding\n🌐\n🎥\n\n\n2\nJan 15\nFundamentals of R packages\n🌐\n🎥\n\n\n\nJan 17\nBasics of version control & GitHub\n🌐\n🎥\n\n\n3\nJan 22\nData Wrangling I\n🌐\n🎥\n\n\n\nJan 24\nData Wrangling II\n🌐\n🎥\n\n\n4\nJan 29\nData Wrangling III\n🌐\n🎥\n\n\n\nJan 31\nIteration: Loops & Mapping\n🌐\n🎥\n\n\n5\nFeb 5\nWeather Data: Retrieving & Processing\n🌐\n🎥\n\n\n\nFeb 7\nData Viz I: ggplot2 basics\n🌐\n🎥\n\n\n6\nFeb 12\nData Viz II: Multiple plots\n🌐\n🎥\n\n\n\nFeb 14\nData Viz III: Advanced plots, maps\n🌐\n🎥\n\n\n\n\nWinter Break begins after the end of class\n\n\n\n\n7\nFeb 26\nModels I: Key concepts\n🌐\n🎥\n\n\n\nFeb 28\nModels II: Explanatory vs. Predictive\n🌐\n🎥\n\n\n8\nMar 5\nModels III: Linear Models\n🌐\n🎥\n\n\n\nMar 7\nModels IV: Fixed, Random, Mixed Effects\n🌐\n🎥\n\n\n9\nMar 12\nModels V: Regression I\n🌐\n🎥\n\n\n\nMar 14\nModels VI: Regression II\n🌐\n🎥\n\n\n10\nMar 19\nModels VII: Review LMs\n🌐\n🎥\n\n\n\nMar 21\nModels VIII: Principal Components\n🌐\n🎥\n\n\n11\nMar 26\nQuarto / Rmarkdown tricks\n🌐\n🎥\n\n\n\nMar 28\nGeneral Review class\n🌐\n🎥\n\n\n12\nApr 2\nSemester Projects Presentations I\n🌐\n\n\n\n\nApr 4\nSemester Projects Presentations II\n🌐\n\n\n\n13\nApr 11\nFinal Exam Due (11.59 pm)\n🌐",
    "crumbs": [
      "Calendar",
      "Schedule"
    ]
  },
  {
    "objectID": "slides/day1.html#welcome",
    "href": "slides/day1.html#welcome",
    "title": "Reproducible Ag Data Science with R",
    "section": "Welcome 👋",
    "text": "Welcome 👋\n\nGoal: Gain foundational knowledge and understand how data science can improve agricultural practices.\nLet’s dive into it with an emphasis on reproducibility and data literacy.\n\n\n\n\n\n\n\n\nTip\n\n\n\nRemember: Questions and discussions are encouraged! 💬",
    "crumbs": [
      "Slides",
      "Reproducibility"
    ]
  },
  {
    "objectID": "slides/day1.html#objectives-for-today",
    "href": "slides/day1.html#objectives-for-today",
    "title": "Reproducible Ag Data Science with R",
    "section": "Objectives for Today 📌",
    "text": "Objectives for Today 📌\n\nDefine core concepts:\n\nData Science,\nData Literacy,\nReproducibility.\n\nUnderstand the role of reproducible data science in agriculture.\nExplore challenges and opportunities.",
    "crumbs": [
      "Slides",
      "Reproducibility"
    ]
  },
  {
    "objectID": "slides/day1.html#what-is-data-science-in-agriculture",
    "href": "slides/day1.html#what-is-data-science-in-agriculture",
    "title": "Reproducible Ag Data Science with R",
    "section": "What is Data Science in Agriculture? 🌱",
    "text": "What is Data Science in Agriculture? 🌱\n\nApplying data engineering, analysis, statistics, and machine learning to solve agricultural problems.\nExamples: Precision agriculture, yield forecasting, environmental monitoring.",
    "crumbs": [
      "Slides",
      "Reproducibility"
    ]
  },
  {
    "objectID": "slides/day1.html#key-definitions",
    "href": "slides/day1.html#key-definitions",
    "title": "Reproducible Ag Data Science with R",
    "section": "Key Definitions 📖",
    "text": "Key Definitions 📖\n\n\n\nData Science: Extracting insights from data using algorithms and statistical methods. \nData Literacy: Skills to read, interpret, and analyze data. \nReproducibility: Ensuring analyses can be recreated by others.\n\n\n\n\n\n\n\n\n\nNote\n\n\nWhy does reproducibility matter?\n\nTrustworthy results,\ntransparency, &\ncollaboration in research.",
    "crumbs": [
      "Slides",
      "Reproducibility"
    ]
  },
  {
    "objectID": "slides/day1.html#challenges-in-data-literacy",
    "href": "slides/day1.html#challenges-in-data-literacy",
    "title": "Reproducible Ag Data Science with R",
    "section": "Challenges in Data Literacy 🌐",
    "text": "Challenges in Data Literacy 🌐\n\nDiverse data sources (weather, soil, crop data)\nStandardization issues across datasets\nData skills gap among ag professionals",
    "crumbs": [
      "Slides",
      "Reproducibility"
    ]
  },
  {
    "objectID": "slides/day1.html#why-does-it-matter",
    "href": "slides/day1.html#why-does-it-matter",
    "title": "Reproducible Ag Data Science with R",
    "section": "Why does it matter?",
    "text": "Why does it matter?\n\n\nIt is the #1 skill-gap in the job market: \n\nAcademia,\nIndustry,\nGovernment, NGOs, etc.\n\n\n\n\n\nIs there a REPRODUCIBILITY CRISIS in science?\nYES\nA Nature survey with ~1,600 researchers found that\n\n+70% failure rate to reproduce another scientist’s experiments\n+50% have failed to reproduce their own experiments\nMain causes: selective reporting, weak stats, code/data unavailability, etc.",
    "crumbs": [
      "Slides",
      "Reproducibility"
    ]
  },
  {
    "objectID": "slides/day1.html#good-news-is",
    "href": "slides/day1.html#good-news-is",
    "title": "Reproducible Ag Data Science with R",
    "section": "GOOD NEWS IS…",
    "text": "GOOD NEWS IS…",
    "crumbs": [
      "Slides",
      "Reproducibility"
    ]
  },
  {
    "objectID": "slides/day1.html#why-reproducibility-in-agriculture",
    "href": "slides/day1.html#why-reproducibility-in-agriculture",
    "title": "Reproducible Ag Data Science with R",
    "section": "Why Reproducibility in Agriculture?",
    "text": "Why Reproducibility in Agriculture?\n\nAgriculture research relies heavily on environmental data, often variable and complex.\nWe have complex challenges 🗒️\n\nVariability due to environmental factors, soil types, and weather patterns.\nComplex datasets involving long-term studies, geographical variability.\n\nOpportunities ✅\n\nReproducibility helps stakeholders make reliable, data-driven decisions.\nEnsures scientific findings are reliable and valid.\nFacilitates collaboration, accountability, and efficiency among researchers and practitioners.",
    "crumbs": [
      "Slides",
      "Reproducibility"
    ]
  },
  {
    "objectID": "slides/day1.html#challenges-in-ag-research",
    "href": "slides/day1.html#challenges-in-ag-research",
    "title": "Reproducible Ag Data Science with R",
    "section": "Challenges in Ag-research",
    "text": "Challenges in Ag-research\n\nREPRODUCIBILITY 💻\n\nLimited capability to reproduce analyses & results\nDATA are rarely shared, CODES even less\n\n\n\nACCESSIBILITY 📲\n\nYet we are not translating enough science into flexible, and transparent decision tools.\n\n\n\n“But it all starts with …”\n\n\nEDUCATION 🎓\n\nLimited curriculum in applied data science",
    "crumbs": [
      "Slides",
      "Reproducibility"
    ]
  },
  {
    "objectID": "slides/day1.html#discussion-prompt",
    "href": "slides/day1.html#discussion-prompt",
    "title": "Reproducible Ag Data Science with R",
    "section": "Discussion Prompt 💬",
    "text": "Discussion Prompt 💬\n\n\ni. Where do you think improved data literacy & reproducibility could impact agriculture the most?\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nConsider areas like resource management, market predictions, and farm management.",
    "crumbs": [
      "Slides",
      "Reproducibility"
    ]
  },
  {
    "objectID": "slides/day1.html#what-is-r",
    "href": "slides/day1.html#what-is-r",
    "title": "Reproducible Ag Data Science with R",
    "section": "What is R? 🧮",
    "text": "What is R? 🧮\n\n\nR is a programming language and environment primarily for statistical analysis, data visualization, and data science.\nKnown for its extensive statistical libraries, data manipulation capabilities, and graphics.\nWidely used in fields like data science, bioinformatics, agriculture, and social sciences.\n\n\n\nBrief History 📜\n\nOrigin: Developed in the early 1990s by Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand.\nInspiration: R is an implementation of the S language, designed at Bell Laboratories for data analysis.\nOpen Source: Released as free, open-source software, leading to a large community of users and contributors.\nPopularity: Today, R is one of the top programming languages for statistical analysis and data science.",
    "crumbs": [
      "Slides",
      "Reproducibility"
    ]
  },
  {
    "objectID": "slides/day1.html#r-vs.-excel-for-data-wrangling",
    "href": "slides/day1.html#r-vs.-excel-for-data-wrangling",
    "title": "Reproducible Ag Data Science with R",
    "section": "R vs. Excel for Data Wrangling 📊",
    "text": "R vs. Excel for Data Wrangling 📊\n\n\n\nExcel: Known for ease of use, popular among business and finance professionals.\n\nPros: Intuitive, good for small datasets and quick analysis.\nCons: Limited in handling large datasets, lacks reproducibility.\n\nR: Provides powerful data manipulation packages (e.g., dplyr, tidyr).\n\nPros: Handles large datasets efficiently, supports complex transformations, fully reproducible.\nCons: Requires programming knowledge, steeper learning curve than Excel.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTip: R is highly scalable and is ideal for projects requiring automation, reproducibility, and handling large datasets.",
    "crumbs": [
      "Slides",
      "Reproducibility"
    ]
  },
  {
    "objectID": "slides/day1.html#r-vs.-sas-for-statistical-analysis",
    "href": "slides/day1.html#r-vs.-sas-for-statistical-analysis",
    "title": "Reproducible Ag Data Science with R",
    "section": "R vs. SAS for Statistical Analysis 📉",
    "text": "R vs. SAS for Statistical Analysis 📉\n\n\n\nSAS: A powerful statistical software suite used widely in industries such as healthcare and finance.\n\nPros: Robust for regulatory environments, highly standardized.\nCons: Proprietary and costly, limited community contributions.\n\nR: Offers a vast array of statistical packages and flexibility in method implementation.\n\nPros: Free and open-source, customizable, strong community support.\nCons: Requires more coding and configuration for regulatory standards.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nComparison: R is often chosen for research and academia due to its flexibility and customization, while SAS remains strong in industries needing strict compliance and control.",
    "crumbs": [
      "Slides",
      "Reproducibility"
    ]
  },
  {
    "objectID": "slides/day1.html#r-vs-python",
    "href": "slides/day1.html#r-vs-python",
    "title": "Reproducible Ag Data Science with R",
    "section": "R vs Python 🔍",
    "text": "R vs Python 🔍\n\nR, & Python are popular languages in data science and research.\nEach language has unique strengths, ideal use cases, and licensing considerations.",
    "crumbs": [
      "Slides",
      "Reproducibility"
    ]
  },
  {
    "objectID": "slides/day1.html#r-strengths-and-use-cases",
    "href": "slides/day1.html#r-strengths-and-use-cases",
    "title": "Reproducible Ag Data Science with R",
    "section": "R: Strengths and Use Cases 🧮",
    "text": "R: Strengths and Use Cases 🧮\n\n\n\nDesigned for Statistics: R is optimized for statistical analysis, making it ideal for research and academia.\nVisualization: Excellent data visualization libraries like ggplot2.\nLicensing: Licensed under GPL; many packages are also GPL, with some using MIT or BSD.\n\n\nIdeal Use Cases:\n\nData analysis, visualization, and complex statistical modeling.\nResearch and academia where open-source, reproducible code is needed.\nLicensing in Production: GPL may restrict proprietary use; check package licenses carefully.",
    "crumbs": [
      "Slides",
      "Reproducibility"
    ]
  },
  {
    "objectID": "slides/day1.html#python-strengths-and-use-cases",
    "href": "slides/day1.html#python-strengths-and-use-cases",
    "title": "Reproducible Ag Data Science with R",
    "section": "Python: Strengths and Use Cases 🐍",
    "text": "Python: Strengths and Use Cases 🐍\n\n\n\nGeneral-Purpose Language: Python is popular for both data science and software development.\nMachine Learning & AI: Extensive libraries for ML and AI, such as scikit-learn, TensorFlow.\nLicensing: PSFL (Python Software Foundation License), highly permissive for proprietary use.\n\n\nIdeal Use Cases:\n\nEnd-to-end development, from data wrangling to ML and web development.\nProduction-ready ML and AI applications.\nLicensing in Production: Permissive licenses allow closed-source use, making Python production-friendly.",
    "crumbs": [
      "Slides",
      "Reproducibility"
    ]
  },
  {
    "objectID": "slides/day1.html#comparison-summary",
    "href": "slides/day1.html#comparison-summary",
    "title": "Reproducible Ag Data Science with R",
    "section": "Comparison Summary 📊",
    "text": "Comparison Summary 📊\n\n\n\n\n\n\n\nNote\n\n\n\nR: Best for statistical analysis and visualization, but GPL license may restrict use in proprietary products.\nExcel: User-friendly, ideal for simple tasks, but limited for complex data wrangling.\nSAS: Industry-standard for statistical analysis with regulatory requirements, but costly and less flexible than R.\nPython: Strong in ML and AI with highly permissive licensing, making it ideal for production.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFeature\nR\nPython\n\n\n\n\nPrimary Strength\nStatistics & Visualization\nGeneral-purpose, ML, AI\n\n\nPerformance\nModerate\nModerate\n\n\nLicensing\nGPL (core), MIT, BSD (some)\nPSFL, highly permissive\n\n\nProduction Use\nLimited by GPL\nVery friendly for proprietary\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\nChoosing the right tool depends on your project’s requirements, team skills, and licensing needs for research vs. production.",
    "crumbs": [
      "Slides",
      "Reproducibility"
    ]
  },
  {
    "objectID": "slides/day1.html#thank-you",
    "href": "slides/day1.html#thank-you",
    "title": "Reproducible Ag Data Science with R",
    "section": "THANK YOU!",
    "text": "THANK YOU!\nacorrend@uoguelph.ca\n\nAdrian A. Correndo\nAssistant Professor\nSustainable Cropping Systems\nDepartment of Plant Agriculture\nUniversity of Guelph\n\n\nRm 226, Crop Science Bldg | Department of Plant Agriculture\nOntario Agricultural College | University of Guelph | 50 Stone Rd E, Guelph, ON-N1G 2W1, Canada.\n\nContact me",
    "crumbs": [
      "Slides",
      "Reproducibility"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PLNT6800|01 - Special Topics in Plant Science",
    "section": "",
    "text": "Reproducible Ag Data Science with R is designed for graduate students in crop and soil sciences to develop key skills in data science using R. This course emphasizes reproducibility in data analysis, ensuring that results can be consistently replicated. Students will learn essential data science concepts, and how to use functions, packages, and version control to effectively manage their data and collaborate with peers. Following tidy principles, the course promotes best coding practices for data wrangling, effective visualization, and clean deployment of statistical models common in agriculture. By the end of the course, students will be equipped to handle a variety of agricultural datasets and produce reliable, reproducible research outcomes.\n\n\nBy the end of this course, students will be able to:\n\nUnderstand and apply the principles of reproducible research in data science.\nUse version control tools like GitHub for managing code and collaborative projects.\nDevelop proficiency in R, including data wrangling, data visualization, and the use of relevant packages for agricultural datasets.\nApply statistical models to agricultural data and interpret the results.\nProduce professional reports using RMarkdown and Quarto, ensuring reproducibility and clarity.\n\n\n\n\nThis course will use a variety of technologies and resources. To successfully participate in and complete this course, students will need access to the following\n\n\nCourseLink. This platform will be used as the main Course-Home Page. If you need any assistance with the software tools or the CourseLink website, contact CourseLink Support. Email: courselink@uoguelph.ca Tel: 519-824-4120 ext. 56939 Toll-Free (CAN/USA): 1-866- 275-1478. Support Hours (Eastern Time): Monday thru Friday: 8:30 am–8:30 pm; Saturday: 10:00 am–4:00 pm; Sunday: 12:00 pm–6:00 pm\nZoom. This course will use Zoom for lectures when in-person class is not possible. Check your system requirements to ensure you will be able to participate (https://opened.uoguelph.ca/student-resources/system-and-software-requirements/). A Zoom link for the class will be provided before the first day of class. Please, check Home-Page and announcements on CourseLink, and emails from the instructor (acorrend@uoguelph.ca).\n\n\n\n\nR (latest stable version, available at CRAN).\nRStudio/Posit IDE (desktop or cloud-based version for writing and running R code).\nCourse-Specific Libraries and Packages: Students will be required to install R packages. Detailed instructions will be provided in class.\nVersion Control and Collaboration Tools: Git (for version control) and a free GitHub account for collaborative project work and sharing code.\n\n\n\n\nA laptop or desktop computer capable of running R and RStudio (Windows, MacOS, or Linux). Minimum specifications include:\n\nProcessor: At least a dual-core processor.\nRAM: 8 GB or more (16 GB recommended for handling larger datasets).\nStorage: 10 GB of free space for software installation, course files, and datasets.\n\n\n\n\nReliable high-speed internet for accessing online sessions, resources, downloading software, and using cloud-based platforms (e.g., Posit Cloud, GitHub).",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "PLNT6800|01 - Special Topics in Plant Science",
    "section": "",
    "text": "Reproducible Ag Data Science with R is designed for graduate students in crop and soil sciences to develop key skills in data science using R. This course emphasizes reproducibility in data analysis, ensuring that results can be consistently replicated. Students will learn essential data science concepts, and how to use functions, packages, and version control to effectively manage their data and collaborate with peers. Following tidy principles, the course promotes best coding practices for data wrangling, effective visualization, and clean deployment of statistical models common in agriculture. By the end of the course, students will be equipped to handle a variety of agricultural datasets and produce reliable, reproducible research outcomes.\n\n\nBy the end of this course, students will be able to:\n\nUnderstand and apply the principles of reproducible research in data science.\nUse version control tools like GitHub for managing code and collaborative projects.\nDevelop proficiency in R, including data wrangling, data visualization, and the use of relevant packages for agricultural datasets.\nApply statistical models to agricultural data and interpret the results.\nProduce professional reports using RMarkdown and Quarto, ensuring reproducibility and clarity.\n\n\n\n\nThis course will use a variety of technologies and resources. To successfully participate in and complete this course, students will need access to the following\n\n\nCourseLink. This platform will be used as the main Course-Home Page. If you need any assistance with the software tools or the CourseLink website, contact CourseLink Support. Email: courselink@uoguelph.ca Tel: 519-824-4120 ext. 56939 Toll-Free (CAN/USA): 1-866- 275-1478. Support Hours (Eastern Time): Monday thru Friday: 8:30 am–8:30 pm; Saturday: 10:00 am–4:00 pm; Sunday: 12:00 pm–6:00 pm\nZoom. This course will use Zoom for lectures when in-person class is not possible. Check your system requirements to ensure you will be able to participate (https://opened.uoguelph.ca/student-resources/system-and-software-requirements/). A Zoom link for the class will be provided before the first day of class. Please, check Home-Page and announcements on CourseLink, and emails from the instructor (acorrend@uoguelph.ca).\n\n\n\n\nR (latest stable version, available at CRAN).\nRStudio/Posit IDE (desktop or cloud-based version for writing and running R code).\nCourse-Specific Libraries and Packages: Students will be required to install R packages. Detailed instructions will be provided in class.\nVersion Control and Collaboration Tools: Git (for version control) and a free GitHub account for collaborative project work and sharing code.\n\n\n\n\nA laptop or desktop computer capable of running R and RStudio (Windows, MacOS, or Linux). Minimum specifications include:\n\nProcessor: At least a dual-core processor.\nRAM: 8 GB or more (16 GB recommended for handling larger datasets).\nStorage: 10 GB of free space for software installation, course files, and datasets.\n\n\n\n\nReliable high-speed internet for accessing online sessions, resources, downloading software, and using cloud-based platforms (e.g., Posit Cloud, GitHub).",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "software/software.html",
    "href": "software/software.html",
    "title": "Required Software & Accounts",
    "section": "",
    "text": "R & RStudio IDEGitGitHubGitHub DesktopPosit Cloud\n\n\nBefore starting with the course, it is important that you install R and R Studio in your computer. Please, follow these simple steps:\nDownload the latest version of R from CRAN, here Download the latest version of RStudio from posit, here Run and install in the downloaded files in the same order. There are plenty of useful tutorials on the internet such as:\n\nhttps://rstudio-education.github.io/hopr/starting.html\nhttps://www.youtube.com/watch?v=Tb3R4GLJ45U\n\n\n\nWhat is Git?\nGit is a powerful version control system that helps you track changes in your code, collaborate with others, and manage your projects effectively.\nHow to Install Git:\nFollow these steps to install Git on your computer:\n\nVisit the official Git website (https://git-scm.com/);to download the installer for your operating system.\nFor detailed guidance, read the official tutorial to install git (https://git-scm.com/book/en/v2/Getting-Started-Installing-Git).\nYou may use these step-by-step videos for installation:\n\n• Installing Git on Windows (https://www.youtube.com/watch?v=iYkLrXobBbA)\n• Installing Git on Mac (https://www.youtube.com/watch?v=B4qsvQ5IqWk)\nOnce installed, verify by typing git –version in your terminal to ensure Git is ready to use!\n\n\nWhat is GitHub?\nGitHub is a web-based interface (nowadays own by Microsoft) that facilitates the use of Git, an open source version control software. This lets multiple people make separate changes to projects and have control over them. GitHub is to Git the equivalent of what RStudio is to R.\nFor this course, it is required that you create your GitHub account. Preferably, using your University email (##@uoguelph.ca). Please, follow the steps detailed on this official link from GitHub:\nhttps://docs.github.com/en/get-started/start-your-journey/creating-an-account-on-github\nYou may also find multiple useful YouTube tutorials like this one:\nhttps://www.youtube.com/watch?v=h5cKAd94QNo\n\n\nWhat is GitHub Desktop?\nGitHub Desktop is a user-friendly application that helps you interact with Git and GitHub through a simple graphical interface, making it easier to manage your repositories.\nHow to Install GitHub Desktop:\nFollow these steps to install GitHub Desktop on your computer:\n\nVisit the GitHub Desktop website (https://desktop.github.com); and download the application for your operating system.\nRun the installer and follow the on-screen instructions to complete the installation.\nAfter installation, sign in to your GitHub account or create one if you don’t have it.\n\nFor additional help, check out these videos:\n• Installing GitHub Desktop on Windows (https://www.youtube.com/watch?v=3JdDAJ2YPeU)\n• Installing GitHub Desktop on Mac (https://www.youtube.com/watch?v=C0n6O4d0ccw)\nOnce installed, you can easily clone repositories, commit changes, and sync your work with GitHub!\n\n\nWhat is Posit Cloud?\nPosit Cloud is an online platform that allows you to run RStudio “online”. It helps to write and execute R code directly in your browser, making it easy to learn and work on data science projects without installing software locally.\nHow to Create a Free Posit Cloud Account:\nFollow these steps to set up your free account:\n\nVisit Posit Cloud website at https://posit.cloud.\nClick on Sign Up and choose to create an account using your UoG email. THIS IS IMPORTANT, USE YOUR UOG EMAIL!\nComplete the registration form and verify your email if required.\nOnce registered, log in to your Posit Cloud account and start exploring R projects directly in your browser.\nMore instructions about our course workspace will be provided during the semester.\n\nFor a hint of what PositCloud does, you may watch with this video:\nhttps://www.youtube.com/watch?v=-fzwm4ZhVQQ With Posit Cloud, you’ll have a convenient environment to learn and work on your R programming assignments!",
    "crumbs": [
      "Software",
      "Instructions"
    ]
  },
  {
    "objectID": "outline/outline.html",
    "href": "outline/outline.html",
    "title": "PLNT6800|01 - Course Outline",
    "section": "",
    "text": "Course Code: PLNT6800\nCourse Title: Reproducible Ag Data Science with R\nTerm: Winter\nCredits: 0.50\n\n\n\n\nDays: Wednesdays and Fridays\nTime: 1:00 pm - 2:20 pm\nLocation: CRSC 202\n\n\n\n\n\nDr. Adrian Correndo\nEmail: acorrend@uoguelph.ca",
    "crumbs": [
      "Course Outline",
      "Outline"
    ]
  },
  {
    "objectID": "outline/outline.html#course-information",
    "href": "outline/outline.html#course-information",
    "title": "PLNT6800|01 - Course Outline",
    "section": "",
    "text": "Course Code: PLNT6800\nCourse Title: Reproducible Ag Data Science with R\nTerm: Winter\nCredits: 0.50\n\n\n\n\nDays: Wednesdays and Fridays\nTime: 1:00 pm - 2:20 pm\nLocation: CRSC 202\n\n\n\n\n\nDr. Adrian Correndo\nEmail: acorrend@uoguelph.ca",
    "crumbs": [
      "Course Outline",
      "Outline"
    ]
  },
  {
    "objectID": "outline/outline.html#course-description",
    "href": "outline/outline.html#course-description",
    "title": "PLNT6800|01 - Course Outline",
    "section": "2. Course Description",
    "text": "2. Course Description\nReproducible Ag Data Science with R is designed for graduate students in crop and soil sciences to develop key skills in data science using R. This course emphasizes reproducibility in data analysis, ensuring that results can be consistently replicated. Students will learn essential data science concepts, and how to use functions, packages, and version control to effectively manage their data and collaborate with peers. Following tidy principles, the course promotes best coding practices for data wrangling, effective visualization, and clean deployment of statistical models common in agriculture. By the end of the course, students will be equipped to handle a variety of agricultural datasets and produce reliable, reproducible research outcomes.\n\nPrerequisite(s)\nA basic understanding of R or any programming language is recommended but not required. Basic statistical theory is also recommended.\n\n\nTextbooks and Resources\nRecommended:\n\nR for Data Science by Hadley Wickham & Garrett Grolemund.\nOnline resources and package documentation will be provided throughout the course.",
    "crumbs": [
      "Course Outline",
      "Outline"
    ]
  },
  {
    "objectID": "outline/outline.html#course-learning-outcomes",
    "href": "outline/outline.html#course-learning-outcomes",
    "title": "PLNT6800|01 - Course Outline",
    "section": "3. Course Learning Outcomes",
    "text": "3. Course Learning Outcomes\nBy the end of this course, students will be able to:\n\nUnderstand and apply the principles of reproducible research in data science.\nUse version control tools like GitHub for managing code and collaborative projects.\nDevelop proficiency in R, including data wrangling, data visualization, and the use of relevant packages for agricultural datasets.\nApply statistical models to agricultural data and interpret the results.\nProduce professional reports using RMarkdown and Quarto, ensuring reproducibility and clarity.",
    "crumbs": [
      "Course Outline",
      "Outline"
    ]
  },
  {
    "objectID": "outline/outline.html#calendar",
    "href": "outline/outline.html#calendar",
    "title": "PLNT6800|01 - Course Outline",
    "section": "4. Calendar",
    "text": "4. Calendar\nSee http://adriancorrendo.github.io/plnt6800/calendar.html\n\nLast Day to Drop Course\nTBD",
    "crumbs": [
      "Course Outline",
      "Outline"
    ]
  },
  {
    "objectID": "outline/outline.html#assessment-breakdown",
    "href": "outline/outline.html#assessment-breakdown",
    "title": "PLNT6800|01 - Course Outline",
    "section": "5. Assessment Breakdown",
    "text": "5. Assessment Breakdown\n\n\n\n\n\n\n\n\nComponent\nWeight (%)\nDetails\n\n\n\n\nWeekly Exercises\n30%\nHands-on exercises to practice skills covered in each week’s topic.\n\n\nSemester Project\n50%\nComplete data analysis project, report, and presentation.\n\n\nFinal Exam\n20%\nCumulative assessment covering all topics from the course.\n\n\n\n\nFinal Exam\n\nDate: Apr 11, 11.59 pm.",
    "crumbs": [
      "Course Outline",
      "Outline"
    ]
  },
  {
    "objectID": "outline/outline.html#course-grading-policies",
    "href": "outline/outline.html#course-grading-policies",
    "title": "PLNT6800|01 - Course Outline",
    "section": "6. Course Grading Policies",
    "text": "6. Course Grading Policies\n\na. Late Submissions\nAssignments submitted late will be penalized 5% per day, up to six days. Extensions granted only for valid reasons.\n\n\nb. Use of Devices\nElectronic recording of classes is forbidden without prior permission from the instructor.\n\n\nc. Academic honesty\nPlease adhere to the following guidelines when working on assignments for this course:\n\nIndividual and Team Assignments: You are welcome to discuss individual homework and lab assignments with other students; however, direct sharing or copying of code or written work is not permitted. For team assignments, collaboration is allowed freely within your team. Sharing or copying code or written content between teams is prohibited. Any unauthorized sharing or copying will be treated as a violation for all parties involved.\nExams: Collaboration or discussion with others during exams is strictly prohibited. Unauthorized collaboration or use of unapproved materials will be considered a violation for all students involved.\nReusing Code: Unless specified otherwise, you may refer to online resources (e.g., StackOverflow) for coding examples in assignments. If you use code from an external source directly or take inspiration from it, you must clearly cite the source. The use of AI to complete tasks is not prohibited but it must be disclosed. Failure to cite reused code will be considered plagiarism.",
    "crumbs": [
      "Course Outline",
      "Outline"
    ]
  },
  {
    "objectID": "outline/outline.html#course-statements",
    "href": "outline/outline.html#course-statements",
    "title": "PLNT6800|01 - Course Outline",
    "section": "7. Course Statements",
    "text": "7. Course Statements\n\nA. Communication with instructor\nDuring the course, your instructor will interact with you on various course matters on the course website using the following ways of communication:\n\nAnnouncements: The instructor will use Announcements on the Course Home page to provide you with course reminders and updates. Pleasecheck this section frequently for course updates from your instructor.\nEmail: If you have a conflict that prevents you from completing course requirements, or have a question concerning a personal matter, you cansend your instructor a private message by email. The instructor will attempt to respond to your email within 24 hours.\nVideo Call: If you have a complex question you would like to discuss with your instructor, you may book a video meeting on Zoom or Teams. Video meetings depend on the availability and are booked on a first come first served basis.\n\n\n\nB. Course Technology Requirements\nThis course will use a variety of technologies and resources. To successfully participate in and complete this course, students will need access to the following\n\n1. Communication tools:\nCourseLink. This platform will be used as the main Course-Home Page. If you need any assistance with the software tools or the CourseLink website, contact CourseLink Support. Email: courselink@uoguelph.ca Tel: 519-824-4120 ext. 56939 Toll-Free (CAN/USA): 1-866- 275-1478. Support Hours (Eastern Time): Monday thru Friday: 8:30 am–8:30 pm; Saturday: 10:00 am–4:00 pm; Sunday: 12:00 pm–6:00 pm\nZoom. This course will use Zoom for lectures when in-person class is not possible. Check your system requirements to ensure you will be able to participate (https://opened.uoguelph.ca/student-resources/system-and-software-requirements/). A Zoom link for the class will be provided before the first day of class. Please, check Home-Page and announcements on CourseLink, and emails from the instructor (acorrend@uoguelph.ca).\n\n\n2. Software & Tools:\n\nR (latest stable version, available at CRAN).\nRStudio/Posit IDE (desktop or cloud-based version for writing and running R code).\nCourse-Specific Libraries and Packages: Students will be required to install R packages. Detailed instructions will be provided in class.\nVersion Control and Collaboration Tools: Git (for version control) and a free GitHub account for collaborative project work and sharing code.\n\n\n\n3. Computing Requirements:\nA laptop or desktop computer capable of running R and RStudio (Windows, MacOS, or Linux). Minimum specifications include:\n\nProcessor: At least a dual-core processor.\nRAM: 8 GB or more (16 GB recommended for handling larger datasets).\nStorage: 10 GB of free space for software installation, course files, and datasets.\n\n\n\n4. Internet Access:\nReliable high-speed internet for accessing online sessions, resources, downloading software, and using cloud-based platforms (e.g., Posit Cloud, GitHub).\n\n\n\n\nC. Data Usage Policy for the Semester Project\nStudents are encouraged to use data from their own research projects for the semester project. However, it is essential to ensure the integrity and privacy of the data, as well as compliance with the policies of their research lab or institution. To safeguard data privacy and integrity: \n\nData Sharing Restrictions: Students are NOT allowed to upload raw research data directly to the instructor, peers, GitHub repositories, Posit Cloud, or any other external platform.\nDe-Identification and Transformation: Before using or sharing the data for the semester project, students must de-identify and transform the data as necessary. This process should ensure that sensitive information or identifying details are removed or anonymized. All data preparation must be performed locally on the student’s machine before incorporating it into the project. \nDocumentation Requirement: Students must include a clear description of the steps taken to de-identify and transform the data in their project report or presentation. This demonstrates adherence to ethical data handling practices.\n\nBy following these guidelines, students can apply their learning to real-world datasets while respecting ethical and institutional standards. The instructor is not responsible for students’ violations to the integrity and privacy of their research data. Non-compliance with this policy may result in disqualification of the project or additional academic consequences.",
    "crumbs": [
      "Course Outline",
      "Outline"
    ]
  },
  {
    "objectID": "outline/outline.html#accessibility",
    "href": "outline/outline.html#accessibility",
    "title": "PLNT6800|01 - Course Outline",
    "section": "8. Accessibility",
    "text": "8. Accessibility\nStudents requiring accommodations must register with Student Accessibility Services. Contact the instructor early in the semester to arrange accommodations.",
    "crumbs": [
      "Course Outline",
      "Outline"
    ]
  },
  {
    "objectID": "outline/outline.html#land-acknowledgement",
    "href": "outline/outline.html#land-acknowledgement",
    "title": "PLNT6800|01 - Course Outline",
    "section": "9. Land Acknowledgement",
    "text": "9. Land Acknowledgement\nThe University of Guelph resides on the ancestral lands of the Attawandaron people and the treaty lands and territory of the Mississaugas of the Credit. We recognize the significance of the Dish with One Spoon Covenant to this land and offer respect to our Anishinaabe, Haudenosaunee, and Métis neighbours. Today, this gathering place is home to many First Nations, Inuit, and Métis peoples, and acknowledging them reminds us of our important connection to this land where we work and learn.",
    "crumbs": [
      "Course Outline",
      "Outline"
    ]
  },
  {
    "objectID": "coding/week_03/04_datawrangling_01.html",
    "href": "coding/week_03/04_datawrangling_01.html",
    "title": "Transforming Ag data with dplyr",
    "section": "",
    "text": "This lesson introduces the concept of tidy data, and a few basic data wrangling techniques using dplyr package. Today, we are using dplyr and datasets from the agridat package. If you don’t have them installed, you can do so by running:\n\n\n\nlibrary(pacman)\np_load(agridat) # Agridat datasets\np_load(dplyr) # dplyr for data wrangling\np_load(skimr) # skimr for quick exploration of the data",
    "crumbs": [
      "Lessons",
      "04-Data Wrangling I"
    ]
  },
  {
    "objectID": "coding/week_03/04_datawrangling_01.html#required-packages-for-today",
    "href": "coding/week_03/04_datawrangling_01.html#required-packages-for-today",
    "title": "Transforming Ag data with dplyr",
    "section": "",
    "text": "library(pacman)\np_load(agridat) # Agridat datasets\np_load(dplyr) # dplyr for data wrangling\np_load(skimr) # skimr for quick exploration of the data",
    "crumbs": [
      "Lessons",
      "04-Data Wrangling I"
    ]
  },
  {
    "objectID": "coding/week_03/04_datawrangling_01.html#what-is-a-data-frame",
    "href": "coding/week_03/04_datawrangling_01.html#what-is-a-data-frame",
    "title": "Transforming Ag data with dplyr",
    "section": "2.1 What is a Data Frame?",
    "text": "2.1 What is a Data Frame?\nA data frame is a two-dimensional table-like structure in R, where columns can contain different types of data (e.g., numeric, character). It is the default structure for datasets loaded from CSV files or data packages.\n\n2.1.1 open a data frame\n\n# Load the wheat dataset from agricolae (which is a data frame)\nwheat_data &lt;- agridat::payne.wheat\n\n# Check the structure of the data frame\nstr(wheat_data)\n\n'data.frame':   480 obs. of  4 variables:\n $ rotation: Factor w/ 6 levels \"AB\",\"AF\",\"Lc3\",..: 1 1 1 1 2 2 2 2 5 5 ...\n $ nitro   : int  0 70 140 210 0 70 140 210 0 70 ...\n $ year    : int  1981 1981 1981 1981 1981 1981 1981 1981 1981 1981 ...\n $ yield   : num  3.84 6.59 7.49 7.39 3.06 6.32 7.61 7.78 5.82 7.52 ...",
    "crumbs": [
      "Lessons",
      "04-Data Wrangling I"
    ]
  },
  {
    "objectID": "coding/week_03/04_datawrangling_01.html#what-is-a-tibble",
    "href": "coding/week_03/04_datawrangling_01.html#what-is-a-tibble",
    "title": "Transforming Ag data with dplyr",
    "section": "2.2 What is a Tibble?",
    "text": "2.2 What is a Tibble?\nA tibble is a modern version of a data frame, introduced by the tibble package. It offers several improvements:\n•   Tibbles don’t convert characters to factors by default.\n•   Printing is more concise and doesn’t overwhelm you with too much data.\n•   Tibbles are more explicit with column types when printed.\n\n2.2.1 create a tibble\n\n# Convert the wheat data frame to a tibble\nwheat_tibble &lt;- as_tibble(wheat_data)\n\n# Check the structure of the tibble\nwheat_tibble\n\n# A tibble: 480 × 4\n   rotation nitro  year yield\n   &lt;fct&gt;    &lt;int&gt; &lt;int&gt; &lt;dbl&gt;\n 1 AB           0  1981  3.84\n 2 AB          70  1981  6.59\n 3 AB         140  1981  7.49\n 4 AB         210  1981  7.39\n 5 AF           0  1981  3.06\n 6 AF          70  1981  6.32\n 7 AF         140  1981  7.61\n 8 AF         210  1981  7.78\n 9 Ln3          0  1981  5.82\n10 Ln3         70  1981  7.52\n# ℹ 470 more rows",
    "crumbs": [
      "Lessons",
      "04-Data Wrangling I"
    ]
  },
  {
    "objectID": "coding/week_03/04_datawrangling_01.html#iii.-key-differences-between-data-frames-and-tibbles",
    "href": "coding/week_03/04_datawrangling_01.html#iii.-key-differences-between-data-frames-and-tibbles",
    "title": "Transforming Ag data with dplyr",
    "section": "2.3 iii. Key Differences between Data Frames and Tibbles",
    "text": "2.3 iii. Key Differences between Data Frames and Tibbles\n1.  **Printing**:\n• Data Frames print the entire dataset unless you limit the number of rows. No information about column types is displayed. • Tibbles print only the first 10 rows and automatically show column types.\n\n2.3.1 Example:\n\n# Print the entire data frame\nprint(wheat_data)\n\n    rotation nitro year yield\n1         AB     0 1981  3.84\n2         AB    70 1981  6.59\n3         AB   140 1981  7.49\n4         AB   210 1981  7.39\n5         AF     0 1981  3.06\n6         AF    70 1981  6.32\n7         AF   140 1981  7.61\n8         AF   210 1981  7.78\n9        Ln3     0 1981  5.82\n10       Ln3    70 1981  7.52\n11       Ln3   140 1981  8.12\n12       Ln3   210 1981  7.40\n13       Ln8     0 1981  4.71\n14       Ln8    70 1981  6.52\n15       Ln8   140 1981  8.03\n16       Ln8   210 1981  7.83\n17       Lc3     0 1981  5.35\n18       Lc3    70 1981  6.70\n19       Lc3   140 1981  7.69\n20       Lc3   210 1981  7.53\n21       Lc8     0 1981  6.47\n22       Lc8    70 1981  7.84\n23       Lc8   140 1981  7.98\n24       Lc8   210 1981  7.68\n25        AB     0 1982  4.47\n26        AB    70 1982  6.38\n27        AB   140 1982  7.82\n28        AB   210 1982  8.13\n29        AF     0 1982  4.30\n30        AF    70 1982  6.82\n31        AF   140 1982  8.16\n32        AF   210 1982  8.52\n33       Ln3     0 1982  5.37\n34       Ln3    70 1982  7.91\n35       Ln3   140 1982  7.53\n36       Ln3   210 1982  8.46\n37       Ln8     0 1982  5.55\n38       Ln8    70 1982  8.04\n39       Ln8   140 1982  8.27\n40       Ln8   210 1982  7.31\n41       Lc3     0 1982  5.16\n42       Lc3    70 1982  7.81\n43       Lc3   140 1982  8.38\n44       Lc3   210 1982  7.40\n45       Lc8     0 1982  6.56\n46       Lc8    70 1982  8.36\n47       Lc8   140 1982  8.60\n48       Lc8   210 1982  8.41\n49        AB     0 1983  4.11\n50        AB    70 1983  6.28\n51        AB   140 1983  8.70\n52        AB   210 1983  8.17\n53        AF     0 1983  3.76\n54        AF    70 1983  6.79\n55        AF   140 1983  8.50\n56        AF   210 1983  9.43\n57       Ln3     0 1983  3.86\n58       Ln3    70 1983  7.05\n59       Ln3   140 1983  8.06\n60       Ln3   210 1983  8.28\n61       Ln8     0 1983  4.45\n62       Ln8    70 1983  7.23\n63       Ln8   140 1983  7.48\n64       Ln8   210 1983  6.93\n65       Lc3     0 1983  6.36\n66       Lc3    70 1983  9.67\n67       Lc3   140 1983  9.34\n68       Lc3   210 1983  8.40\n69       Lc8     0 1983  7.39\n70       Lc8    70 1983  9.64\n71       Lc8   140 1983  8.80\n72       Lc8   210 1983  8.66\n73        AB     0 1984  3.66\n74        AB    70 1984  6.56\n75        AB   140 1984  7.74\n76        AB   210 1984  9.41\n77        AF     0 1984  4.28\n78        AF    70 1984  8.94\n79        AF   140 1984  9.12\n80        AF   210 1984  9.35\n81       Ln3     0 1984  4.92\n82       Ln3    70 1984  7.66\n83       Ln3   140 1984  9.75\n84       Ln3   210 1984 10.35\n85       Ln8     0 1984  5.46\n86       Ln8    70 1984  8.68\n87       Ln8   140 1984  9.20\n88       Ln8   210 1984 10.33\n89       Lc3     0 1984  7.18\n90       Lc3    70 1984 11.06\n91       Lc3   140 1984 10.52\n92       Lc3   210 1984  9.88\n93       Lc8     0 1984  7.51\n94       Lc8    70 1984  9.66\n95       Lc8   140 1984 11.04\n96       Lc8   210 1984  9.36\n97        AB     0 1985  2.39\n98        AB    70 1985  5.90\n99        AB   140 1985  7.76\n100       AB   210 1985  8.62\n101       AF     0 1985  2.03\n102       AF    70 1985  5.46\n103       AF   140 1985  7.72\n104       AF   210 1985  9.20\n105      Ln3     0 1985  4.24\n106      Ln3    70 1985  7.26\n107      Ln3   140 1985  8.26\n108      Ln3   210 1985  9.69\n109      Ln8     0 1985  4.07\n110      Ln8    70 1985  6.98\n111      Ln8   140 1985  8.39\n112      Ln8   210 1985  8.55\n113      Lc3     0 1985  4.97\n114      Lc3    70 1985  7.64\n115      Lc3   140 1985  9.57\n116      Lc3   210 1985  8.84\n117      Lc8     0 1985  4.44\n118      Lc8    70 1985  8.08\n119      Lc8   140 1985  8.76\n120      Lc8   210 1985 10.19\n121       AB     0 1986  4.17\n122       AB    70 1986  6.91\n123       AB   140 1986  7.21\n124       AB   210 1986  8.53\n125       AF     0 1986  4.08\n126       AF    70 1986  5.08\n127       AF   140 1986  6.32\n128       AF   210 1986  7.88\n129      Ln3     0 1986  3.36\n130      Ln3    70 1986  5.65\n131      Ln3   140 1986  6.62\n132      Ln3   210 1986  6.05\n133      Ln8     0 1986  4.68\n134      Ln8    70 1986  6.55\n135      Ln8   140 1986  7.20\n136      Ln8   210 1986  6.84\n137      Lc3     0 1986  6.14\n138      Lc3    70 1986  7.15\n139      Lc3   140 1986  6.89\n140      Lc3   210 1986  6.20\n141      Lc8     0 1986  6.09\n142      Lc8    70 1986  7.31\n143      Lc8   140 1986  6.85\n144      Lc8   210 1986  6.75\n145       AB     0 1987  4.39\n146       AB    70 1987  6.18\n147       AB   140 1987  6.75\n148       AB   210 1987  7.84\n149       AF     0 1987  3.02\n150       AF    70 1987  5.56\n151       AF   140 1987  6.60\n152       AF   210 1987  6.43\n153      Ln3     0 1987  4.41\n154      Ln3    70 1987  6.55\n155      Ln3   140 1987  7.59\n156      Ln3   210 1987  7.13\n157      Ln8     0 1987  4.80\n158      Ln8    70 1987  6.74\n159      Ln8   140 1987  7.86\n160      Ln8   210 1987  7.00\n161      Lc3     0 1987  5.51\n162      Lc3    70 1987  7.24\n163      Lc3   140 1987  7.74\n164      Lc3   210 1987  7.61\n165      Lc8     0 1987  5.26\n166      Lc8    70 1987  7.48\n167      Lc8   140 1987  8.31\n168      Lc8   210 1987  8.13\n169       AB     0 1988  2.98\n170       AB    70 1988  6.28\n171       AB   140 1988  6.77\n172       AB   210 1988  6.20\n173       AF     0 1988  3.09\n174       AF    70 1988  6.60\n175       AF   140 1988  6.63\n176       AF   210 1988  6.61\n177      Ln3     0 1988  4.01\n178      Ln3    70 1988  6.77\n179      Ln3   140 1988  7.12\n180      Ln3   210 1988  6.14\n181      Ln8     0 1988  4.34\n182      Ln8    70 1988  6.73\n183      Ln8   140 1988  7.46\n184      Ln8   210 1988  7.23\n185      Lc3     0 1988  5.68\n186      Lc3    70 1988  7.39\n187      Lc3   140 1988  7.54\n188      Lc3   210 1988  7.51\n189      Lc8     0 1988  5.26\n190      Lc8    70 1988  7.87\n191      Lc8   140 1988  6.94\n192      Lc8   210 1988  7.06\n193       AB     0 1989  1.16\n194       AB    70 1989  3.94\n195       AB   140 1989  4.58\n196       AB   210 1989  4.74\n197       AF     0 1989  2.80\n198       AF    70 1989  4.92\n199       AF   140 1989  5.17\n200       AF   210 1989  5.82\n201      Ln3     0 1989  4.04\n202      Ln3    70 1989  5.94\n203      Ln3   140 1989  6.10\n204      Ln3   210 1989  6.04\n205      Ln8     0 1989  3.77\n206      Ln8    70 1989  5.58\n207      Ln8   140 1989  5.56\n208      Ln8   210 1989  4.91\n209      Lc3     0 1989  5.45\n210      Lc3    70 1989  6.28\n211      Lc3   140 1989  6.12\n212      Lc3   210 1989  5.81\n213      Lc8     0 1989  4.91\n214      Lc8    70 1989  6.69\n215      Lc8   140 1989  6.39\n216      Lc8   210 1989  5.06\n217       AB     0 1990  1.47\n218       AB    70 1990  4.94\n219       AB   140 1990  5.83\n220       AB   210 1990  6.33\n221       AF     0 1990  1.38\n222       AF    70 1990  5.72\n223       AF   140 1990  6.30\n224       AF   210 1990  5.18\n225      Ln3     0 1990  1.73\n226      Ln3    70 1990  4.94\n227      Ln3   140 1990  5.43\n228      Ln3   210 1990  6.17\n229      Ln8     0 1990  2.62\n230      Ln8    70 1990  5.79\n231      Ln8   140 1990  5.08\n232      Ln8   210 1990  5.25\n233      Lc3     0 1990  3.59\n234      Lc3    70 1990  6.06\n235      Lc3   140 1990  7.20\n236      Lc3   210 1990  6.42\n237      Lc8     0 1990  3.31\n238      Lc8    70 1990  6.51\n239      Lc8   140 1990  6.65\n240      Lc8   210 1990  6.99\n241       AB     0 1991  4.48\n242       AB    70 1991  8.56\n243       AB   140 1991  9.94\n244       AB   210 1991 10.23\n245       AF     0 1991  3.46\n246       AF    70 1991  8.00\n247       AF   140 1991  9.75\n248       AF   210 1991 10.57\n249      Ln3     0 1991  6.75\n250      Ln3    70 1991  8.85\n251      Ln3   140 1991  9.96\n252      Ln3   210 1991 10.41\n253      Ln8     0 1991  5.94\n254      Ln8    70 1991  8.83\n255      Ln8   140 1991  9.64\n256      Ln8   210 1991  9.75\n257      Lc3     0 1991  6.47\n258      Lc3    70 1991  9.37\n259      Lc3   140 1991 10.46\n260      Lc3   210 1991 10.48\n261      Lc8     0 1991  6.08\n262      Lc8    70 1991  8.81\n263      Lc8   140 1991  9.63\n264      Lc8   210 1991 10.10\n265       AB     0 1992  6.31\n266       AB    70 1992  7.84\n267       AB   140 1992  7.21\n268       AB   210 1992  6.81\n269       AF     0 1992  3.82\n270       AF    70 1992  8.05\n271       AF   140 1992  8.21\n272       AF   210 1992  7.59\n273      Ln3     0 1992  2.73\n274      Ln3    70 1992  6.47\n275      Ln3   140 1992  7.49\n276      Ln3   210 1992  7.26\n277      Ln8     0 1992  4.19\n278      Ln8    70 1992  7.17\n279      Ln8   140 1992  7.54\n280      Ln8   210 1992  6.67\n281      Lc3     0 1992  6.33\n282      Lc3    70 1992  7.48\n283      Lc3   140 1992  6.13\n284      Lc3   210 1992  4.79\n285      Lc8     0 1992  7.11\n286      Lc8    70 1992  6.65\n287      Lc8   140 1992  6.45\n288      Lc8   210 1992  6.14\n289       AB     0 1993  3.11\n290       AB    70 1993  5.92\n291       AB   140 1993  5.89\n292       AB   210 1993  6.63\n293       AF     0 1993  2.86\n294       AF    70 1993  5.79\n295       AF   140 1993  6.72\n296       AF   210 1993  7.37\n297      Ln3     0 1993  3.13\n298      Ln3    70 1993  5.40\n299      Ln3   140 1993  6.60\n300      Ln3   210 1993  6.52\n301      Ln8     0 1993  3.42\n302      Ln8    70 1993  5.16\n303      Ln8   140 1993  6.47\n304      Ln8   210 1993  6.55\n305      Lc3     0 1993  5.58\n306      Lc3    70 1993  7.01\n307      Lc3   140 1993  7.69\n308      Lc3   210 1993  7.91\n309      Lc8     0 1993  6.08\n310      Lc8    70 1993  7.03\n311      Lc8   140 1993  7.20\n312      Lc8   210 1993  7.69\n313       AB     0 1994  0.93\n314       AB    70 1994  3.94\n315       AB   140 1994  4.04\n316       AB   210 1994  3.51\n317       AF     0 1994  1.80\n318       AF    70 1994  5.32\n319       AF   140 1994  8.08\n320       AF   210 1994  8.55\n321      Ln3     0 1994  4.76\n322      Ln3    70 1994  6.16\n323      Ln3   140 1994  7.35\n324      Ln3   210 1994  7.14\n325      Ln8     0 1994  3.64\n326      Ln8    70 1994  5.14\n327      Ln8   140 1994  7.00\n328      Ln8   210 1994  7.16\n329      Lc3     0 1994  5.06\n330      Lc3    70 1994  6.00\n331      Lc3   140 1994  6.28\n332      Lc3   210 1994  7.50\n333      Lc8     0 1994  3.46\n334      Lc8    70 1994  6.48\n335      Lc8   140 1994  6.07\n336      Lc8   210 1994  7.53\n337       AB     0 1995  1.30\n338       AB    70 1995  4.21\n339       AB   140 1995  4.35\n340       AB   210 1995  4.35\n341       AF     0 1995  1.27\n342       AF    70 1995  3.82\n343       AF   140 1995  4.60\n344       AF   210 1995  4.96\n345      Ln3     0 1995  2.17\n346      Ln3    70 1995  5.01\n347      Ln3   140 1995  5.39\n348      Ln3   210 1995  5.79\n349      Ln8     0 1995  2.52\n350      Ln8    70 1995  5.71\n351      Ln8   140 1995  5.36\n352      Ln8   210 1995  6.53\n353      Lc3     0 1995  2.57\n354      Lc3    70 1995  5.70\n355      Lc3   140 1995  6.46\n356      Lc3   210 1995  5.78\n357      Lc8     0 1995  3.52\n358      Lc8    70 1995  6.60\n359      Lc8   140 1995  6.36\n360      Lc8   210 1995  6.14\n361       AB     0 1996  1.19\n362       AB    70 1996  7.24\n363       AB   140 1996  7.80\n364       AB   210 1996  8.43\n365       AF     0 1996  0.65\n366       AF    70 1996  6.60\n367       AF   140 1996  7.69\n368       AF   210 1996  7.79\n369      Ln3     0 1996  3.82\n370      Ln3    70 1996  7.19\n371      Ln3   140 1996  7.15\n372      Ln3   210 1996  8.41\n373      Ln8     0 1996  6.37\n374      Ln8    70 1996  8.23\n375      Ln8   140 1996  8.77\n376      Ln8   210 1996  8.46\n377      Lc3     0 1996  5.23\n378      Lc3    70 1996  7.76\n379      Lc3   140 1996  8.19\n380      Lc3   210 1996  8.67\n381      Lc8     0 1996  5.73\n382      Lc8    70 1996  7.97\n383      Lc8   140 1996  8.48\n384      Lc8   210 1996  8.28\n385       AB     0 1997  1.58\n386       AB    70 1997  5.73\n387       AB   140 1997  7.37\n388       AB   210 1997  7.88\n389       AF     0 1997  2.40\n390       AF    70 1997  6.52\n391       AF   140 1997  9.25\n392       AF   210 1997  9.24\n393      Ln3     0 1997  1.74\n394      Ln3    70 1997  3.83\n395      Ln3   140 1997  5.15\n396      Ln3   210 1997  5.02\n397      Ln8     0 1997  2.53\n398      Ln8    70 1997  6.20\n399      Ln8   140 1997  6.93\n400      Ln8   210 1997  7.25\n401      Lc3     0 1997  4.40\n402      Lc3    70 1997  7.70\n403      Lc3   140 1997  8.01\n404      Lc3   210 1997  8.30\n405      Lc8     0 1997  4.10\n406      Lc8    70 1997  6.78\n407      Lc8   140 1997  7.36\n408      Lc8   210 1997  7.43\n409       AB     0 1998  3.21\n410       AB    70 1998  6.70\n411       AB   140 1998  9.35\n412       AB   210 1998 10.26\n413       AF     0 1998  2.52\n414       AF    70 1998  6.35\n415       AF   140 1998  8.80\n416       AF   210 1998  9.72\n417      Ln3     0 1998  3.77\n418      Ln3    70 1998  7.13\n419      Ln3   140 1998  8.67\n420      Ln3   210 1998  9.62\n421      Ln8     0 1998  4.97\n422      Ln8    70 1998  7.77\n423      Ln8   140 1998  9.21\n424      Ln8   210 1998  9.24\n425      Lc3     0 1998  4.78\n426      Lc3    70 1998  7.48\n427      Lc3   140 1998  8.50\n428      Lc3   210 1998  8.75\n429      Lc8     0 1998  4.11\n430      Lc8    70 1998  7.55\n431      Lc8   140 1998  9.01\n432      Lc8   210 1998  8.98\n433       AB     0 1999  0.00\n434       AB    70 1999  1.97\n435       AB   140 1999  3.44\n436       AB   210 1999  2.28\n437       AF     0 1999  0.52\n438       AF    70 1999  6.55\n439       AF   140 1999  7.53\n440       AF   210 1999  8.48\n441      Ln3     0 1999  1.69\n442      Ln3    70 1999  6.58\n443      Ln3   140 1999  7.58\n444      Ln3   210 1999  7.83\n445      Ln8     0 1999  3.42\n446      Ln8    70 1999  6.59\n447      Ln8   140 1999  8.26\n448      Ln8   210 1999  6.51\n449      Lc3     0 1999  4.42\n450      Lc3    70 1999  7.27\n451      Lc3   140 1999  8.65\n452      Lc3   210 1999  9.54\n453      Lc8     0 1999  1.79\n454      Lc8    70 1999  4.65\n455      Lc8   140 1999  5.54\n456      Lc8   210 1999  4.95\n457       AB     0 2000  1.45\n458       AB    70 2000  4.54\n459       AB   140 2000  4.52\n460       AB   210 2000  5.53\n461       AF     0 2000  0.96\n462       AF    70 2000  4.87\n463       AF   140 2000  6.28\n464       AF   210 2000  7.39\n465      Ln3     0 2000  3.40\n466      Ln3    70 2000  7.06\n467      Ln3   140 2000  8.64\n468      Ln3   210 2000  8.71\n469      Ln8     0 2000  3.42\n470      Ln8    70 2000  6.58\n471      Ln8   140 2000  7.22\n472      Ln8   210 2000  7.49\n473      Lc3     0 2000  5.05\n474      Lc3    70 2000  8.24\n475      Lc3   140 2000  8.96\n476      Lc3   210 2000 10.33\n477      Lc8     0 2000  4.31\n478      Lc8    70 2000  7.47\n479      Lc8   140 2000  8.95\n480      Lc8   210 2000  9.65\n\n# Print the tibble (shows only first 10 rows and column types)\nprint(wheat_tibble)\n\n# A tibble: 480 × 4\n   rotation nitro  year yield\n   &lt;fct&gt;    &lt;int&gt; &lt;int&gt; &lt;dbl&gt;\n 1 AB           0  1981  3.84\n 2 AB          70  1981  6.59\n 3 AB         140  1981  7.49\n 4 AB         210  1981  7.39\n 5 AF           0  1981  3.06\n 6 AF          70  1981  6.32\n 7 AF         140  1981  7.61\n 8 AF         210  1981  7.78\n 9 Ln3          0  1981  5.82\n10 Ln3         70  1981  7.52\n# ℹ 470 more rows",
    "crumbs": [
      "Lessons",
      "04-Data Wrangling I"
    ]
  },
  {
    "objectID": "coding/week_03/04_datawrangling_01.html#why-using-r-packages",
    "href": "coding/week_03/04_datawrangling_01.html#why-using-r-packages",
    "title": "Transforming Ag data with dplyr",
    "section": "3.1 Why using R Packages? 💡",
    "text": "3.1 Why using R Packages? 💡\n\nEfficiency: Avoid rewriting code for common tasks.\nConsistency: Standardized code structure and naming conventions.\nReproducibility: Ensures that your work is easier to share and reproduce.\nIntuitive: R packages use functions with intuitive names of functions, so you can spend less time learning the code & more time learning to solve practical problems.",
    "crumbs": [
      "Lessons",
      "04-Data Wrangling I"
    ]
  },
  {
    "objectID": "coding/week_03/04_datawrangling_01.html#example-1-mutate",
    "href": "coding/week_03/04_datawrangling_01.html#example-1-mutate",
    "title": "Transforming Ag data with dplyr",
    "section": "3.2 Example 1: mutate()",
    "text": "3.2 Example 1: mutate()\n\nPackages like dplyr simplify tasks by providing clean, concise code for data manipulation.\n\n\n\n1. Create a new column: total, which is the sum of two existing columns (var1 and var2).\n\n\n\n3.2.0.1 Base R version\n\n\n# Sample data\ndf &lt;- data.frame(var1 = c(1, 2, 3), var2 = c(4, 5, 6))\n\n# Adding a new column using base R\ndf$total &lt;- df$var1 + df$var2\n\n\n\n\n\n3.2.0.2 dplyr package (Tidyverse)\nlibrary(dplyr)\n\n# Using mutate to add a new column\ndf &lt;- df %&gt;%\n  mutate(total = var1 + var2)",
    "crumbs": [
      "Lessons",
      "04-Data Wrangling I"
    ]
  },
  {
    "objectID": "coding/week_03/04_datawrangling_01.html#example-2-filter",
    "href": "coding/week_03/04_datawrangling_01.html#example-2-filter",
    "title": "Transforming Ag data with dplyr",
    "section": "3.3 Example 2: filter()",
    "text": "3.3 Example 2: filter()\n\n2. Filtering: get values of var1 greater than 2.\n\n\n\n3.3.0.1 Base R version\n\n# Filter rows using base R\nfiltered_df &lt;- df[df$var1 &gt; 2, ]\n\n\n\n\n\n3.3.0.2 dplyr package (Tidyverse)\n# Filter rows using dplyr\nfiltered_df &lt;- filter(data = df, var1 &gt; 2)",
    "crumbs": [
      "Lessons",
      "04-Data Wrangling I"
    ]
  },
  {
    "objectID": "coding/week_03/04_datawrangling_01.html#example-3-select",
    "href": "coding/week_03/04_datawrangling_01.html#example-3-select",
    "title": "Transforming Ag data with dplyr",
    "section": "3.4 Example 3: select()",
    "text": "3.4 Example 3: select()\n\n3. Select specific variables: get var1 and var3.\n\n\n\n\n3.4.0.1 Base R version\n# Select columns using base R\nselected_df &lt;- df[ , c(\"var1\",\"var3\")]\n\n\n\n\n\n3.4.0.2 dplyr package (Tidyverse)\n# Filter rows using dplyr\nfiltered_df &lt;- select(data = df, var1, var3)",
    "crumbs": [
      "Lessons",
      "04-Data Wrangling I"
    ]
  },
  {
    "objectID": "coding/week_03/04_datawrangling_01.html#inspect-data",
    "href": "coding/week_03/04_datawrangling_01.html#inspect-data",
    "title": "Transforming Ag data with dplyr",
    "section": "4.1 Inspect data",
    "text": "4.1 Inspect data\n\n4.1.1 glimpse\nThe glimpse() function provides an overview of the dataset, including variable names and data types.\n\n# Inspect the dataset\nglimpse(corn_data)\n\nRows: 3,443\nColumns: 9\n$ year  &lt;int&gt; 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999…\n$ lat   &lt;dbl&gt; -33.05113, -33.05115, -33.05116, -33.05117, -33.05118, -33.05120…\n$ long  &lt;dbl&gt; -63.84886, -63.84879, -63.84872, -63.84865, -63.84858, -63.84851…\n$ yield &lt;dbl&gt; 72.14, 73.79, 77.25, 76.35, 75.55, 70.24, 76.17, 69.17, 69.77, 6…\n$ nitro &lt;dbl&gt; 131.5, 131.5, 131.5, 131.5, 131.5, 131.5, 131.5, 131.5, 131.5, 1…\n$ topo  &lt;fct&gt; W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W…\n$ bv    &lt;dbl&gt; 162.60, 170.49, 168.39, 176.68, 171.46, 170.56, 172.94, 171.86, …\n$ rep   &lt;fct&gt; R1, R1, R1, R1, R1, R1, R1, R1, R1, R1, R1, R1, R1, R1, R1, R1, …\n$ nf    &lt;fct&gt; N5, N5, N5, N5, N5, N5, N5, N5, N5, N5, N5, N5, N5, N5, N5, N5, …\n\n\n\n\n4.1.2 skim\nThe skim() function from the ‘skimr’ allows to take a deeper look to all the variables (columns), creating a quick summary that reports the presence of missing values, etc., etc.\n\nskimr::skim(corn_data)\n\n\nData summary\n\n\nName\ncorn_data\n\n\nNumber of rows\n3443\n\n\nNumber of columns\n9\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n3\n\n\nnumeric\n6\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\ntopo\n0\n1\nFALSE\n4\nW: 1043, LO: 885, HT: 785, E: 730\n\n\nrep\n0\n1\nFALSE\n3\nR3: 1149, R1: 1147, R2: 1147\n\n\nnf\n0\n1\nFALSE\n6\nN1: 577, N3: 575, N5: 575, N0: 573\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nyear\n0\n1\n1999.99\n1.00\n1999.00\n1999.00\n1999.00\n2001.00\n2001.00\n▇▁▁▁▇\n\n\nlat\n0\n1\n-33.05\n0.00\n-33.05\n-33.05\n-33.05\n-33.05\n-33.05\n▃▇▆▃▁\n\n\nlong\n0\n1\n-63.85\n0.00\n-63.85\n-63.85\n-63.85\n-63.84\n-63.84\n▇▇▇▇▇\n\n\nyield\n0\n1\n69.83\n19.83\n12.66\n54.54\n66.63\n84.68\n117.90\n▁▅▇▃▃\n\n\nnitro\n0\n1\n64.57\n42.60\n0.00\n29.00\n66.00\n106.00\n131.50\n▅▇▇▂▇\n\n\nbv\n0\n1\n174.42\n9.68\n91.74\n168.48\n173.08\n179.39\n213.82\n▁▁▁▇▁",
    "crumbs": [
      "Lessons",
      "04-Data Wrangling I"
    ]
  },
  {
    "objectID": "coding/week_03/04_datawrangling_01.html#adding-new-variables-with-mutate",
    "href": "coding/week_03/04_datawrangling_01.html#adding-new-variables-with-mutate",
    "title": "Transforming Ag data with dplyr",
    "section": "4.2 Adding New Variables with mutate()",
    "text": "4.2 Adding New Variables with mutate()\nYou can add new columns to your dataset with mutate(). Let’s calculate the yield in tons per hectare (assuming the current yield is in kilograms):\n\n# Add a column for yield in tons\ncorn_data &lt;- corn_data %&gt;% \n  # New column, `yield_tons`, with the transformed yield values.\n  mutate(yield_tons = yield / 1000)\n\nhead(corn_data)\n\n  year       lat      long yield nitro topo     bv rep nf yield_tons\n1 1999 -33.05113 -63.84886 72.14 131.5    W 162.60  R1 N5    0.07214\n2 1999 -33.05115 -63.84879 73.79 131.5    W 170.49  R1 N5    0.07379\n3 1999 -33.05116 -63.84872 77.25 131.5    W 168.39  R1 N5    0.07725\n4 1999 -33.05117 -63.84865 76.35 131.5    W 176.68  R1 N5    0.07635\n5 1999 -33.05118 -63.84858 75.55 131.5    W 171.46  R1 N5    0.07555\n6 1999 -33.05120 -63.84851 70.24 131.5    W 170.56  R1 N5    0.07024",
    "crumbs": [
      "Lessons",
      "04-Data Wrangling I"
    ]
  },
  {
    "objectID": "coding/week_03/04_datawrangling_01.html#filtering-data",
    "href": "coding/week_03/04_datawrangling_01.html#filtering-data",
    "title": "Transforming Ag data with dplyr",
    "section": "4.3 Filtering Data",
    "text": "4.3 Filtering Data\nTo focus on specific data, we can use filter(). For example, let’s filter the data to include only rows where the nitrogen applied (nitro) is greater than 100:\n\n# Filter rows with nitro &gt; 100\nhigh_nitro &lt;- corn_data %&gt;%\n  # only rows where the `nitro` column has values greater than 100.\n  filter(nitro &gt; 100)\n\nhead(high_nitro)\n\n  year       lat      long yield nitro topo     bv rep nf yield_tons\n1 1999 -33.05113 -63.84886 72.14 131.5    W 162.60  R1 N5    0.07214\n2 1999 -33.05115 -63.84879 73.79 131.5    W 170.49  R1 N5    0.07379\n3 1999 -33.05116 -63.84872 77.25 131.5    W 168.39  R1 N5    0.07725\n4 1999 -33.05117 -63.84865 76.35 131.5    W 176.68  R1 N5    0.07635\n5 1999 -33.05118 -63.84858 75.55 131.5    W 171.46  R1 N5    0.07555\n6 1999 -33.05120 -63.84851 70.24 131.5    W 170.56  R1 N5    0.07024",
    "crumbs": [
      "Lessons",
      "04-Data Wrangling I"
    ]
  },
  {
    "objectID": "coding/week_03/04_datawrangling_01.html#selecting-columns",
    "href": "coding/week_03/04_datawrangling_01.html#selecting-columns",
    "title": "Transforming Ag data with dplyr",
    "section": "4.4 Selecting columns",
    "text": "4.4 Selecting columns\nTo select specific variables, we use select(), which selects specific columns from the dataset.\n\n# Select specific columns\nselected_data &lt;- corn_data %&gt;% select(yield, nitro, topo)\nhead(selected_data)\n\n  yield nitro topo\n1 72.14 131.5    W\n2 73.79 131.5    W\n3 77.25 131.5    W\n4 76.35 131.5    W\n5 75.55 131.5    W\n6 70.24 131.5    W",
    "crumbs": [
      "Lessons",
      "04-Data Wrangling I"
    ]
  },
  {
    "objectID": "coding/week_03/04_datawrangling_01.html#renaming-columns",
    "href": "coding/week_03/04_datawrangling_01.html#renaming-columns",
    "title": "Transforming Ag data with dplyr",
    "section": "4.5 Renaming columns",
    "text": "4.5 Renaming columns\nWhen we need to change names of columns, we can use rename():\n\n# Rename a column\nrenamed_data &lt;- corn_data %&gt;% rename(Nitrogen = nitro)\nhead(renamed_data)\n\n  year       lat      long yield Nitrogen topo     bv rep nf yield_tons\n1 1999 -33.05113 -63.84886 72.14    131.5    W 162.60  R1 N5    0.07214\n2 1999 -33.05115 -63.84879 73.79    131.5    W 170.49  R1 N5    0.07379\n3 1999 -33.05116 -63.84872 77.25    131.5    W 168.39  R1 N5    0.07725\n4 1999 -33.05117 -63.84865 76.35    131.5    W 176.68  R1 N5    0.07635\n5 1999 -33.05118 -63.84858 75.55    131.5    W 171.46  R1 N5    0.07555\n6 1999 -33.05120 -63.84851 70.24    131.5    W 170.56  R1 N5    0.07024",
    "crumbs": [
      "Lessons",
      "04-Data Wrangling I"
    ]
  },
  {
    "objectID": "coding/week_03/04_datawrangling_01.html#arranging-data",
    "href": "coding/week_03/04_datawrangling_01.html#arranging-data",
    "title": "Transforming Ag data with dplyr",
    "section": "4.6 Arranging data",
    "text": "4.6 Arranging data\nTo reorder the data based on specific criteria, we can use arrange(), which will arrange rows by a variable in ascending or descending order.\n\n# Arrange data by yield in descending order\narranged_data &lt;- corn_data %&gt;% arrange(desc(yield))\nhead(arranged_data)\n\n  year       lat      long  yield nitro topo     bv rep nf yield_tons\n1 2001 -33.05086 -63.84317 117.90  99.8   LO 162.17  R3 N4    0.11790\n2 2001 -33.05125 -63.84245 117.19 124.6   LO 165.81  R3 N5    0.11719\n3 2001 -33.05181 -63.84323 116.64 124.6   LO 159.75  R1 N5    0.11664\n4 2001 -33.05084 -63.84324 114.94  99.8   LO 166.27  R3 N4    0.11494\n5 2001 -33.05134 -63.84299 114.46  99.8   LO 164.58  R2 N4    0.11446\n6 2001 -33.05127 -63.84238 114.08 124.6   LO 170.94  R3 N5    0.11408",
    "crumbs": [
      "Lessons",
      "04-Data Wrangling I"
    ]
  },
  {
    "objectID": "coding/week_03/04_datawrangling_01.html#finding-unique-values",
    "href": "coding/week_03/04_datawrangling_01.html#finding-unique-values",
    "title": "Transforming Ag data with dplyr",
    "section": "4.7 Finding unique values",
    "text": "4.7 Finding unique values\nTo find out what are the unique values of a variable, we can use distinct(), which will return the unique values within a column.\n\n# Unique values in topo\nunique_topo &lt;- corn_data %&gt;% distinct(topo)\nunique_topo\n\n  topo\n1    W\n2   HT\n3    E\n4   LO",
    "crumbs": [
      "Lessons",
      "04-Data Wrangling I"
    ]
  },
  {
    "objectID": "coding/week_03/04_datawrangling_01.html#counting",
    "href": "coding/week_03/04_datawrangling_01.html#counting",
    "title": "Transforming Ag data with dplyr",
    "section": "4.8 Counting",
    "text": "4.8 Counting\nThe function count() counts the number of observations within a group.\n\n# Count observations by topo\ntopo_count &lt;- corn_data %&gt;% count(topo)\ntopo_count\n\n  topo    n\n1    E  730\n2   HT  785\n3   LO  885\n4    W 1043",
    "crumbs": [
      "Lessons",
      "04-Data Wrangling I"
    ]
  },
  {
    "objectID": "coding/week_03/04_datawrangling_01.html#summarizing-data",
    "href": "coding/week_03/04_datawrangling_01.html#summarizing-data",
    "title": "Transforming Ag data with dplyr",
    "section": "4.9 Summarizing Data",
    "text": "4.9 Summarizing Data\nTo get a quick overview of your data, you can use summarize() in combination with group_by(). For example, let’s calculate the average yield for each topographical category (topo):\n\n# Average yield by topography\naverage_yield_topo &lt;- corn_data %&gt;%\n  group_by(topo) %&gt;%\n  summarize(avg_yield = mean(yield, na.rm = TRUE))\naverage_yield_topo\n\n# A tibble: 4 × 2\n  topo  avg_yield\n  &lt;fct&gt;     &lt;dbl&gt;\n1 E          78.7\n2 HT         48.6\n3 LO         84.9\n4 W          66.8\n\n# Average yield by year and topography\naverage_yield_topoyear &lt;- corn_data %&gt;%\n  group_by(year, topo) %&gt;%\n  summarize(avg_yield = mean(yield, na.rm = TRUE))\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n\naverage_yield_topoyear\n\n# A tibble: 8 × 3\n# Groups:   year [2]\n   year topo  avg_yield\n  &lt;int&gt; &lt;fct&gt;     &lt;dbl&gt;\n1  1999 E          64.8\n2  1999 HT         53.4\n3  1999 LO         71.2\n4  1999 W          66.0\n5  2001 E          92.7\n6  2001 HT         44.7\n7  2001 LO         99.9\n8  2001 W          67.7\n\n\nThis groups the data by topo and calculates the mean yield for each group.",
    "crumbs": [
      "Lessons",
      "04-Data Wrangling I"
    ]
  },
  {
    "objectID": "coding/week_02/02_fundamentals_rpackages.html",
    "href": "coding/week_02/02_fundamentals_rpackages.html",
    "title": "Fundamentals of R Packages",
    "section": "",
    "text": "i. What Are R Packages?\nR packages are collections of functions, data, and documentation that extend the capabilities of R. They are designed to solve specific problems or add functionalities, such as data visualization, statistical modeling, or handling specific types of data.\nAnalogy: Think of R as a toolbox 🧰 and packages as individual tools 🔧 you can add to enhance its utility.\n\n\n\n\n\n\nImportant\n\n\n\nCore Components:\n\nFunctions: Ready-made commands to perform tasks.\nData: Preloaded datasets for analysis or examples.\nDocumentation: Manuals explaining how to use the package.\n\n\n\nii. Why Are R Packages Important?\n\nThey extend functionality beyond base features.\nEnable efficient workflows by using pre-written and optimized code.\nProvide community-contributed solutions for a wide variety of domains (e.g., agriculture, bioinformatics, machine learning).\n\niii. Where to Find R Packages?\n\nCRAN (Comprehensive R Archive Network): The primary repository for R packages. Well-maintained and includes thousands of packages.\nBioconductor: Specialized in bioinformatics and genomics.\nGitHub: A platform where developers host and share experimental or in-development packages.",
    "crumbs": [
      "Lessons",
      "02-Fundamentals of packages"
    ]
  },
  {
    "objectID": "coding/week_02/02_fundamentals_rpackages.html#a.-installing-packages",
    "href": "coding/week_02/02_fundamentals_rpackages.html#a.-installing-packages",
    "title": "Fundamentals of R Packages",
    "section": "a. Installing packages",
    "text": "a. Installing packages\nTo install a package from CRAN, use:\n\ninstall.packages(\"dplyr\")\n\nTo install a development version of a package from GitHub, use:\n\ndevtools::install_github(\"rstudio/ggplot2\")\n\nChecking installed packages\n\ninstalled.packages()",
    "crumbs": [
      "Lessons",
      "02-Fundamentals of packages"
    ]
  },
  {
    "objectID": "coding/week_02/02_fundamentals_rpackages.html#b.-loading-packages",
    "href": "coding/week_02/02_fundamentals_rpackages.html#b.-loading-packages",
    "title": "Fundamentals of R Packages",
    "section": "b. Loading Packages",
    "text": "b. Loading Packages\nOnce installed, load a package using:\n\nlibrary(dplyr)\n\nOr alternatively, you may use packages like pacman:\n\nlibrary(pacman)\npacman::p_load(dplyr, ggplot2)\n\nOr easypackages:\n\nlibrary(easypackages)\neasypackages::libraries(dplyr, ggplot2)",
    "crumbs": [
      "Lessons",
      "02-Fundamentals of packages"
    ]
  },
  {
    "objectID": "coding/week_02/02_fundamentals_rpackages.html#c.-updating-packages",
    "href": "coding/week_02/02_fundamentals_rpackages.html#c.-updating-packages",
    "title": "Fundamentals of R Packages",
    "section": "c. Updating packages",
    "text": "c. Updating packages\n\nupdate.packages()",
    "crumbs": [
      "Lessons",
      "02-Fundamentals of packages"
    ]
  },
  {
    "objectID": "coding/week_02/02_fundamentals_rpackages.html#d.-unload-packages",
    "href": "coding/week_02/02_fundamentals_rpackages.html#d.-unload-packages",
    "title": "Fundamentals of R Packages",
    "section": "d. Unload packages",
    "text": "d. Unload packages\n\ndetach(\"package:ggplot2\", unload = TRUE)",
    "crumbs": [
      "Lessons",
      "02-Fundamentals of packages"
    ]
  },
  {
    "objectID": "coding/week_02/02_fundamentals_rpackages.html#e.-uninstall-packages",
    "href": "coding/week_02/02_fundamentals_rpackages.html#e.-uninstall-packages",
    "title": "Fundamentals of R Packages",
    "section": "e. Uninstall packages",
    "text": "e. Uninstall packages\n\nremove.packages(\"ggplot2\")",
    "crumbs": [
      "Lessons",
      "02-Fundamentals of packages"
    ]
  },
  {
    "objectID": "coding/week_02/02_fundamentals_rpackages.html#a.-start-with-the-right-packages",
    "href": "coding/week_02/02_fundamentals_rpackages.html#a.-start-with-the-right-packages",
    "title": "Fundamentals of R Packages",
    "section": "a. Start with the Right Packages:",
    "text": "a. Start with the Right Packages:\nUse foundational and well supported packages (e.g. tidyverse, data.table).",
    "crumbs": [
      "Lessons",
      "02-Fundamentals of packages"
    ]
  },
  {
    "objectID": "coding/week_02/02_fundamentals_rpackages.html#b.-stay-curious",
    "href": "coding/week_02/02_fundamentals_rpackages.html#b.-stay-curious",
    "title": "Fundamentals of R Packages",
    "section": "b. Stay Curious:",
    "text": "b. Stay Curious:\nExplore new packages via CRAN Task Views (e.g., Agriculture Task View).",
    "crumbs": [
      "Lessons",
      "02-Fundamentals of packages"
    ]
  },
  {
    "objectID": "coding/week_02/02_fundamentals_rpackages.html#c.-version-control",
    "href": "coding/week_02/02_fundamentals_rpackages.html#c.-version-control",
    "title": "Fundamentals of R Packages",
    "section": "c. Version Control:",
    "text": "c. Version Control:\nWhen becoming an advanced user, you could implement renv or packrat to manage package versions for reproducible analysis.",
    "crumbs": [
      "Lessons",
      "02-Fundamentals of packages"
    ]
  },
  {
    "objectID": "coding/week_02/02_fundamentals_rpackages.html#a.-ggplot2-for-data-visualization",
    "href": "coding/week_02/02_fundamentals_rpackages.html#a.-ggplot2-for-data-visualization",
    "title": "Fundamentals of R Packages",
    "section": "a. ggplot2 for data visualization:",
    "text": "a. ggplot2 for data visualization:\n\nlibrary(ggplot2)\nggplot(mtcars, aes(x = mpg, y = hp)) + geom_point()",
    "crumbs": [
      "Lessons",
      "02-Fundamentals of packages"
    ]
  },
  {
    "objectID": "coding/week_02/02_fundamentals_rpackages.html#b.-dplyr-for-data-manipulation",
    "href": "coding/week_02/02_fundamentals_rpackages.html#b.-dplyr-for-data-manipulation",
    "title": "Fundamentals of R Packages",
    "section": "b. dplyr for data manipulation:",
    "text": "b. dplyr for data manipulation:\n\nlibrary(dplyr)\nmtcars %&gt;% filter(mpg &gt; 20) %&gt;% summarize(mean_hp = mean(hp))\n\n  mean_hp\n1    88.5",
    "crumbs": [
      "Lessons",
      "02-Fundamentals of packages"
    ]
  },
  {
    "objectID": "coding/week_02/02_fundamentals_rpackages.html#c.-agridat",
    "href": "coding/week_02/02_fundamentals_rpackages.html#c.-agridat",
    "title": "Fundamentals of R Packages",
    "section": "c. agridat",
    "text": "c. agridat\nThe agridat package contains datasets related to agriculture, such as crop yields, experimental designs, and climate data. Let’s use an example from this package:\n\n# Load the package\nlibrary(agridat)\n# Load an example dataset\ndata(rothamsted.oats, package = 'agridat')\nhead(rothamsted.oats)\n\n  block trt  grain straw row col\n1     x  oa 61.375  83.0  12   1\n2     x 2me 68.750 130.0  12   2\n3     x 2sl 64.250 100.0  12   3\n4     x  ob 65.500  96.0  12   4\n5     w 2sl 79.625 130.5  12   5\n6     w  oa 79.250 122.0  12   6\n\n# Visualize crop yields\nlibrary(ggplot2)\nggplot(rothamsted.oats, aes(x = trt, y = grain, fill = as.factor(block))) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(\n    title = \"Grain Yields in Rothamsted Oats Experiment\",\n    x = \"Treatment\",\n    y = \"Grain Yield (grams/plot)\",\n    fill = \"Block\"\n  ) +\n  theme_minimal()",
    "crumbs": [
      "Lessons",
      "02-Fundamentals of packages"
    ]
  },
  {
    "objectID": "coding/week_02/02_fundamentals_rpackages.html#d.-agricolae",
    "href": "coding/week_02/02_fundamentals_rpackages.html#d.-agricolae",
    "title": "Fundamentals of R Packages",
    "section": "d. agricolae",
    "text": "d. agricolae\nThe agricolae package in R is a comprehensive toolset designed for statistical analysis and visualization of agricultural experiments. It is particularly useful for researchers and practitioners working in crop science, agronomy, and other fields of agricultural research.\nIt provides methods for designing experiments, analyzing experimental data, and visualizing results, particularly for data collected in agricultural and biological research.\n\n\n\n\n\n\nNote\n\n\n\nIt supports:\n\nExperimental Designs: Generate designs for field experiments like randomized complete block design (RCBD), Latin square, factorial experiments, and others.\nStatistical Analysis: Analyze variance (ANOVA), perform post-hoc tests (e.g., LSD, Tukey HSD), and assess experimental data.\nVisualization: Create plots for results, including mean comparisons, dendrograms, and histograms.\nAgronomic Tools: Calculate indices like stability for crop yields or pest/disease control measures.\n\n\n\n\ni. Data analysis\n\n# Load agricolae package\nlibrary(agricolae)\n\n# Simulate agricultural data\ndata &lt;- data.frame(\n  treatment = rep(c(\"A\", \"B\", \"C\"), each = 5),\n  yield = c(50, 55, 52, 51, 54,   # Yields for Treatment A\n            60, 62, 59, 61, 63,   # Yields for Treatment B\n            48, 46, 50, 49, 47)   # Yields for Treatment C\n)\n\n# Display the dataset\nprint(data)\n\n   treatment yield\n1          A    50\n2          A    55\n3          A    52\n4          A    51\n5          A    54\n6          B    60\n7          B    62\n8          B    59\n9          B    61\n10         B    63\n11         C    48\n12         C    46\n13         C    50\n14         C    49\n15         C    47\n\n# Perform ANOVA\nanova_result &lt;- aov(yield ~ treatment, data = data)\nsummary(anova_result)\n\n            Df Sum Sq Mean Sq F value   Pr(&gt;F)    \ntreatment    2  437.2   218.6   70.52 2.32e-07 ***\nResiduals   12   37.2     3.1                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n# Perform LSD test for pairwise comparison\nlsd_result &lt;- LSD.test(anova_result, \"treatment\", console = TRUE)\n\n\nStudy: anova_result ~ \"treatment\"\n\nLSD t Test for yield \n\nMean Square Error:  3.1 \n\ntreatment,  means and individual ( 95 %) CI\n\n  yield      std r        se     LCL     UCL Min Max Q25 Q50 Q75\nA  52.4 2.073644 5 0.7874008 50.6844 54.1156  50  55  51  52  54\nB  61.0 1.581139 5 0.7874008 59.2844 62.7156  59  63  60  61  62\nC  48.0 1.581139 5 0.7874008 46.2844 49.7156  46  50  47  48  49\n\nAlpha: 0.05 ; DF Error: 12\nCritical Value of t: 2.178813 \n\nleast Significant Difference: 2.426223 \n\nTreatments with the same letter are not significantly different.\n\n  yield groups\nB  61.0      a\nA  52.4      b\nC  48.0      c\n\n# Could also run Tukey HSD, & Duncan's Test\n\n# Plot LSD results\nplot(lsd_result, main = \"LSD Test Results for Treatment Yields\")\n\n\n\n\n\n\n\n\n\n\nii. Design of experiments\nYou can generate layouts for randomized complete block designs (RCBD), Latin squares, Graeco-Latin squares, factorial experiments, and split-plot designs\n\ndesign &lt;- design.rcbd(trt = c(\"A\", \"B\", \"C\"), r = 3)\nprint(design)\n\n$parameters\n$parameters$design\n[1] \"rcbd\"\n\n$parameters$trt\n[1] \"A\" \"B\" \"C\"\n\n$parameters$r\n[1] 3\n\n$parameters$serie\n[1] 2\n\n$parameters$seed\n[1] 2000902035\n\n$parameters$kinds\n[1] \"Super-Duper\"\n\n$parameters[[7]]\n[1] TRUE\n\n\n$sketch\n     [,1] [,2] [,3]\n[1,] \"A\"  \"B\"  \"C\" \n[2,] \"A\"  \"C\"  \"B\" \n[3,] \"C\"  \"A\"  \"B\" \n\n$book\n  plots block c(\"A\", \"B\", \"C\")\n1   101     1                A\n2   102     1                B\n3   103     1                C\n4   201     2                A\n5   202     2                C\n6   203     2                B\n7   301     3                C\n8   302     3                A\n9   303     3                B",
    "crumbs": [
      "Lessons",
      "02-Fundamentals of packages"
    ]
  },
  {
    "objectID": "coding/week_02/02_fundamentals_rpackages.html#e.-soiltestcorr",
    "href": "coding/week_02/02_fundamentals_rpackages.html#e.-soiltestcorr",
    "title": "Fundamentals of R Packages",
    "section": "e. soiltestcorr",
    "text": "e. soiltestcorr\nThis package assists users on reproducible regression analysis of relationships between crop relative yield (ry) and soil test values (stv) under different approaches.\nFor example, we can fit a linear-plateu model the a dataset with:\n\nlibrary(soiltestcorr)\n\ndata_freitas &lt;- soiltestcorr::freitas1966\n\nplot_lp &lt;- linear_plateau(data = data_freitas,\n                          stv = STK, ry = RY, plot = TRUE)\n\nplot_lp",
    "crumbs": [
      "Lessons",
      "02-Fundamentals of packages"
    ]
  }
]